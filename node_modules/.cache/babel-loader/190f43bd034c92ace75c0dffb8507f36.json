{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toBase64 = exports.tagsToBase64 = void 0;\n\nvar to_tlv_1 = require(\"./to-tlv\");\n/**\n * Converts a tags array to a base64 string using the TLV encoding\n * @param {Tag[]} tags\n * @return {string} representing base64 of tags TLV\n */\n\n\nfunction tagsToBase64(tags) {\n  return Buffer.from((0, to_tlv_1.toTlv)(tags)).toString('base64');\n}\n\nexports.tagsToBase64 = tagsToBase64;\n/**\n * Converts a string with utf8 encoding to a base64 string\n * @param {string} value with utf8 encoding\n * @return {string} representing base64\n */\n\nfunction toBase64(value) {\n  return Buffer.from(value).toString('base64');\n}\n\nexports.toBase64 = toBase64;","map":{"version":3,"sources":["/Users/sirin/go/src/github.com/sirinibin/reactjs-pos/node_modules/@axenda/zatca/lib/utils/to-base64.js"],"names":["Object","defineProperty","exports","value","toBase64","tagsToBase64","to_tlv_1","require","tags","Buffer","from","toTlv","toString"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,QAAR,GAAmBF,OAAO,CAACG,YAAR,GAAuB,KAAK,CAA/C;;AACA,IAAIC,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAtB;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,YAAT,CAAsBG,IAAtB,EAA4B;AACxB,SAAOC,MAAM,CAACC,IAAP,CAAY,CAAC,GAAGJ,QAAQ,CAACK,KAAb,EAAoBH,IAApB,CAAZ,EAAuCI,QAAvC,CAAgD,QAAhD,CAAP;AACH;;AACDV,OAAO,CAACG,YAAR,GAAuBA,YAAvB;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,QAAT,CAAkBD,KAAlB,EAAyB;AACrB,SAAOM,MAAM,CAACC,IAAP,CAAYP,KAAZ,EAAmBS,QAAnB,CAA4B,QAA5B,CAAP;AACH;;AACDV,OAAO,CAACE,QAAR,GAAmBA,QAAnB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toBase64 = exports.tagsToBase64 = void 0;\nvar to_tlv_1 = require(\"./to-tlv\");\n/**\n * Converts a tags array to a base64 string using the TLV encoding\n * @param {Tag[]} tags\n * @return {string} representing base64 of tags TLV\n */\nfunction tagsToBase64(tags) {\n    return Buffer.from((0, to_tlv_1.toTlv)(tags)).toString('base64');\n}\nexports.tagsToBase64 = tagsToBase64;\n/**\n * Converts a string with utf8 encoding to a base64 string\n * @param {string} value with utf8 encoding\n * @return {string} representing base64\n */\nfunction toBase64(value) {\n    return Buffer.from(value).toString('base64');\n}\nexports.toBase64 = toBase64;\n"]},"metadata":{},"sourceType":"script"}