{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/sirin/go/src/github.com/sirinibin/reactjs-pos/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _slicedToArray from\"/Users/sirin/go/src/github.com/sirinibin/reactjs-pos/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect,useRef,forwardRef,useImperativeHandle}from\"react\";import Cookies from\"universal-cookie\";import{Chart}from\"react-google-charts\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var DailySales=/*#__PURE__*/forwardRef(function(props,ref){var cookies=new Cookies();useImperativeHandle(ref,function(){return{init:function init(){makeDailyData();}};});var _useState=useState([{label:\"2023\",value:2023},{label:\"2022\",value:2022},{label:\"2021\",value:2021},{label:\"2020\",value:2020}]),_useState2=_slicedToArray(_useState,2),yearOptions=_useState2[0],setYearOptions=_useState2[1];var _useState3=useState([{label:\"JAN\",value:1},{label:\"FEB\",value:2},{label:\"MAR\",value:3},{label:\"APR\",value:4},{label:\"MAY\",value:5},{label:\"JUN\",value:6},{label:\"JULY\",value:7},{label:\"AUG\",value:8},{label:\"SEP\",value:9},{label:\"OCT\",value:10},{label:\"NOV\",value:11},{label:\"DEC\",value:12}]),_useState4=_slicedToArray(_useState3,2),monthOptions=_useState4[0],setMonthOptions=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),dailySales=_useState6[0],setDailySales=_useState6[1];var _useState7=useState(new Date().getMonth()+1),_useState8=_slicedToArray(_useState7,2),dailySalesSelectedMonth=_useState8[0],setDailySalesSelectedMonth=_useState8[1];var _useState9=useState(new Date().getFullYear()),_useState10=_slicedToArray(_useState9,2),dailySalesSelectedYear=_useState10[0],setDailySalesSelectedYear=_useState10[1];function daysInMonth(month,year){return new Date(year,month,0).getDate();}function makeDailyData(){var columns=[{type:\"date\",label:\"Date\"}];if(props.columns.sales){columns.push({type:\"number\",label:\"Sales\"});}if(props.columns.salesProfit){columns.push({type:\"number\",label:\"Sales Profit\"});}if(props.columns.paidSales){columns.push({type:\"number\",label:\"Paid Sales\"});}if(props.columns.unpaidSales){columns.push({type:\"number\",label:\"UnPaid Sales\"});}if(props.columns.expense){columns.push({type:\"number\",label:\"Expense\"});}if(props.columns.purchase){columns.push({type:\"number\",label:\"Purchase\"});}if(props.columns.salesReturn){columns.push({type:\"number\",label:\"Sales Return\"});}if(props.columns.salesReturnProfit){columns.push({type:\"number\",label:\"Sales Return Profit\"});}if(props.columns.salesReturnLoss){columns.push({type:\"number\",label:\"Sales Return Loss\"});}if(props.columns.purchaseReturn){columns.push({type:\"number\",label:\"Purchase Return\"});}if(props.columns.loss){columns.push({type:\"number\",label:\"Sales Loss\"});}var data=[];if(columns.length>1){data.push(columns);}console.log(\"selectedMonth:\",dailySalesSelectedMonth);console.log(\"selectedYear:\",dailySalesSelectedYear);var lastDay=daysInMonth(dailySalesSelectedMonth,dailySalesSelectedYear);console.log(\"lastDay:\",lastDay);for(var day=1;day<=lastDay;day++){var sales=0.00;var paidSales=0.00;var unpaidSales=0.00;var profit=0.00;var loss=0.00;if(props.columns.sales||props.columns.salesProfit||props.columns.loss||props.columns.paidSales||props.columns.unpaidSales){var _iterator=_createForOfIteratorHelper(props.allOrders),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var sale=_step.value;// console.log(\"Sale Month:\", new Date(sale.date).getMonth() + 1);\n// console.log(\"Sale Year:\", new Date(sale.date).getFullYear());\nif(new Date(sale.date).getMonth()+1==dailySalesSelectedMonth&&new Date(sale.date).getFullYear()==dailySalesSelectedYear&&new Date(sale.date).getDate()==day){sales+=parseFloat(sale.net_total);profit+=parseFloat(sale.net_profit);if(sale.payment_status==\"paid\"){paidSales+=parseFloat(sale.net_total);}else if(sale.payment_status==\"not_paid\"){unpaidSales+=parseFloat(sale.net_total);}loss+=parseFloat(sale.loss);}}}catch(err){_iterator.e(err);}finally{_iterator.f();}}var totalExpense=0.00;if(props.columns.expense){var _iterator2=_createForOfIteratorHelper(props.allExpenses),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var expense=_step2.value;if(new Date(expense.date).getMonth()+1==dailySalesSelectedMonth&&new Date(expense.date).getFullYear()==dailySalesSelectedYear&&new Date(expense.date).getDate()==day){totalExpense+=parseFloat(expense.amount);}}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}}var totalPurchase=0.00;if(props.columns.purchase){var _iterator3=_createForOfIteratorHelper(props.allPurchases),_step3;try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var purchase=_step3.value;if(new Date(purchase.date).getMonth()+1==dailySalesSelectedMonth&&new Date(purchase.date).getFullYear()==dailySalesSelectedYear&&new Date(purchase.date).getDate()==day){totalPurchase+=parseFloat(purchase.net_total);}}}catch(err){_iterator3.e(err);}finally{_iterator3.f();}}var totalSalesReturn=0.00;var totalSalesReturnProfit=0.00;var totalSalesReturnLoss=0.00;if(props.columns.salesReturn||props.columns.salesReturnProfit||props.columns.salesReturnLoss){var _iterator4=_createForOfIteratorHelper(props.allSalesReturns),_step4;try{for(_iterator4.s();!(_step4=_iterator4.n()).done;){var salesReturn=_step4.value;if(new Date(salesReturn.date).getMonth()+1==dailySalesSelectedMonth&&new Date(salesReturn.date).getFullYear()==dailySalesSelectedYear&&new Date(salesReturn.date).getDate()==day){totalSalesReturn+=parseFloat(salesReturn.net_total);totalSalesReturnProfit+=parseFloat(salesReturn.net_profit);totalSalesReturnLoss+=parseFloat(salesReturn.loss);}}}catch(err){_iterator4.e(err);}finally{_iterator4.f();}}var totalPurchaseReturn=0.00;if(props.columns.purchaseReturn){var _iterator5=_createForOfIteratorHelper(props.allPurchaseReturns),_step5;try{for(_iterator5.s();!(_step5=_iterator5.n()).done;){var purchaseReturn=_step5.value;if(new Date(purchaseReturn.date).getMonth()+1==dailySalesSelectedMonth&&new Date(purchaseReturn.date).getFullYear()==dailySalesSelectedYear&&new Date(purchaseReturn.date).getDate()==day){totalPurchaseReturn+=parseFloat(purchaseReturn.net_total);}}}catch(err){_iterator5.e(err);}finally{_iterator5.f();}}var row=[new Date(dailySalesSelectedYear,dailySalesSelectedMonth-1,day)];if(props.columns.sales){row.push(parseFloat(sales.toFixed(2)));}if(props.columns.salesProfit){row.push(parseFloat(profit.toFixed(2)));}if(props.columns.paidSales){row.push(parseFloat(paidSales.toFixed(2)));}if(props.columns.unpaidSales){row.push(parseFloat(unpaidSales.toFixed(2)));}if(props.columns.expense){row.push(parseFloat(totalExpense.toFixed(2)));}if(props.columns.purchase){row.push(parseFloat(totalPurchase.toFixed(2)));}if(props.columns.salesReturn){row.push(parseFloat(totalSalesReturn.toFixed(2)));}if(props.columns.salesReturnProfit){row.push(parseFloat(totalSalesReturnProfit.toFixed(2)));}if(props.columns.salesReturnLoss){row.push(parseFloat(totalSalesReturnLoss.toFixed(2)));}if(props.columns.purchaseReturn){row.push(parseFloat(totalPurchaseReturn.toFixed(2)));}if(props.columns.loss){row.push(parseFloat(loss.toFixed(2)));}if(row.length>1){data.push(row);}}dailySales=data;setDailySales(data);}var _useState11=useState({title:'',subtitle:'(SAR)',legend:{position:'right'},hAxis:{title:\"Date\"},vAxis:{title:\"Amount(SAR)\"},series:{// 0: { curveType: \"function\", axis: 'Temps' },\n// 1: { curveType: \"function\", axis: 'Daylight' },\n}}),_useState12=_slicedToArray(_useState11,2),options=_useState12[0],setOptions=_useState12[1];useEffect(function(){// getAllOrders();\n// eslint-disable-next-line react-hooks/exhaustive-deps\n},[]);return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(\"div\",{className:\"container-fluid p-0\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"col-md-2\",children:[/*#__PURE__*/_jsx(\"label\",{className:\"form-label\",children:\"Year\"}),/*#__PURE__*/_jsx(\"div\",{className:\"input-group mb-3\",children:/*#__PURE__*/_jsx(\"select\",{value:dailySalesSelectedYear,onChange:function onChange(e){if(!e.target.value){return;}dailySalesSelectedYear=parseInt(e.target.value);setDailySalesSelectedYear(parseInt(e.target.value));makeDailyData();},className:\"form-control\",children:yearOptions.map(function(option){return/*#__PURE__*/_jsx(\"option\",{value:option.value,children:option.label});})})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"col-md-2\",children:[/*#__PURE__*/_jsx(\"label\",{className:\"form-label\",children:\"Month\"}),/*#__PURE__*/_jsx(\"div\",{className:\"input-group mb-3\",children:/*#__PURE__*/_jsx(\"select\",{value:dailySalesSelectedMonth,onChange:function onChange(e){if(!e.target.value){return;}dailySalesSelectedMonth=parseInt(e.target.value);setDailySalesSelectedMonth(parseInt(e.target.value));makeDailyData();},className:\"form-control\",children:monthOptions.map(function(option){return/*#__PURE__*/_jsx(\"option\",{value:option.value,children:option.label});})})})]}),dailySales&&dailySales.length>0?/*#__PURE__*/_jsx(Chart,{chartType:\"LineChart\",width:\"100%\",height:\"400px\",data:dailySales,options:options}):\"\"]})})});});export default DailySales;","map":{"version":3,"sources":["/Users/sirin/go/src/github.com/sirinibin/reactjs-pos/src/analytics/sales/dailySales.js"],"names":["React","useState","useEffect","useRef","forwardRef","useImperativeHandle","Cookies","Chart","DailySales","props","ref","cookies","init","makeDailyData","label","value","yearOptions","setYearOptions","monthOptions","setMonthOptions","dailySales","setDailySales","Date","getMonth","dailySalesSelectedMonth","setDailySalesSelectedMonth","getFullYear","dailySalesSelectedYear","setDailySalesSelectedYear","daysInMonth","month","year","getDate","columns","type","sales","push","salesProfit","paidSales","unpaidSales","expense","purchase","salesReturn","salesReturnProfit","salesReturnLoss","purchaseReturn","loss","data","length","console","log","lastDay","day","profit","allOrders","sale","date","parseFloat","net_total","net_profit","payment_status","totalExpense","allExpenses","amount","totalPurchase","allPurchases","totalSalesReturn","totalSalesReturnProfit","totalSalesReturnLoss","allSalesReturns","totalPurchaseReturn","allPurchaseReturns","row","toFixed","title","subtitle","legend","position","hAxis","vAxis","series","options","setOptions","e","target","parseInt","map","option"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, forwardRef, useImperativeHandle } from \"react\";\nimport Cookies from \"universal-cookie\";\nimport { Chart } from \"react-google-charts\";\n\n\n\nconst DailySales = forwardRef((props, ref) => {\n    const cookies = new Cookies();\n    useImperativeHandle(ref, () => ({\n        init() {\n            makeDailyData();\n        }\n    }));\n\n    const [yearOptions, setYearOptions] = useState([\n        {\n            label: \"2023\",\n            value: 2023,\n        },\n        {\n            label: \"2022\",\n            value: 2022,\n        },\n        {\n            label: \"2021\",\n            value: 2021,\n        },\n        {\n            label: \"2020\",\n            value: 2020,\n        }\n    ]);\n    const [monthOptions, setMonthOptions] = useState([\n        {\n            label: \"JAN\",\n            value: 1,\n        },\n        {\n            label: \"FEB\",\n            value: 2,\n        },\n        {\n            label: \"MAR\",\n            value: 3,\n        },\n        {\n            label: \"APR\",\n            value: 4,\n        },\n        {\n            label: \"MAY\",\n            value: 5,\n        },\n        {\n            label: \"JUN\",\n            value: 6,\n        },\n        {\n            label: \"JULY\",\n            value: 7,\n        },\n        {\n            label: \"AUG\",\n            value: 8,\n        },\n        {\n            label: \"SEP\",\n            value: 9,\n        },\n        {\n            label: \"OCT\",\n            value: 10,\n        },\n        {\n            label: \"NOV\",\n            value: 11,\n        },\n        {\n            label: \"DEC\",\n            value: 12,\n        },\n    ]);\n\n\n    let [dailySales, setDailySales] = useState([]);\n    let [dailySalesSelectedMonth, setDailySalesSelectedMonth] = useState(new Date().getMonth() + 1);\n    let [dailySalesSelectedYear, setDailySalesSelectedYear] = useState(new Date().getFullYear());\n\n\n    function daysInMonth(month, year) {\n        return new Date(year, month, 0).getDate();\n    }\n\n    function makeDailyData() {\n        let columns = [\n            { type: \"date\", label: \"Date\" }\n        ];\n        if (props.columns.sales) {\n            columns.push({ type: \"number\", label: \"Sales\" });\n        }\n\n        if (props.columns.salesProfit) {\n            columns.push({ type: \"number\", label: \"Sales Profit\" });\n        }\n\n        if (props.columns.paidSales) {\n            columns.push({ type: \"number\", label: \"Paid Sales\" });\n        }\n\n        if (props.columns.unpaidSales) {\n            columns.push({ type: \"number\", label: \"UnPaid Sales\" });\n        }\n\n        if (props.columns.expense) {\n            columns.push({ type: \"number\", label: \"Expense\" });\n        }\n\n        if (props.columns.purchase) {\n            columns.push({ type: \"number\", label: \"Purchase\" });\n        }\n\n        if (props.columns.salesReturn) {\n            columns.push({ type: \"number\", label: \"Sales Return\" });\n        }\n\n        if (props.columns.salesReturnProfit) {\n            columns.push({ type: \"number\", label: \"Sales Return Profit\" });\n        }\n\n        if (props.columns.salesReturnLoss) {\n            columns.push({ type: \"number\", label: \"Sales Return Loss\" });\n        }\n\n        if (props.columns.purchaseReturn) {\n            columns.push({ type: \"number\", label: \"Purchase Return\" });\n        }\n\n        if (props.columns.loss) {\n            columns.push({ type: \"number\", label: \"Sales Loss\" });\n        }\n\n        let data = [];\n\n\n        if (columns.length > 1) {\n            data.push(columns)\n        }\n\n\n        console.log(\"selectedMonth:\", dailySalesSelectedMonth);\n        console.log(\"selectedYear:\", dailySalesSelectedYear);\n        let lastDay = daysInMonth(dailySalesSelectedMonth, dailySalesSelectedYear);\n        console.log(\"lastDay:\", lastDay);\n        for (let day = 1; day <= lastDay; day++) {\n\n            let sales = 0.00;\n            let paidSales = 0.00;\n            let unpaidSales = 0.00;\n            let profit = 0.00;\n            let loss = 0.00;\n            if (props.columns.sales || props.columns.salesProfit || props.columns.loss|| props.columns.paidSales || props.columns.unpaidSales) {\n                for (const sale of props.allOrders) {\n                    // console.log(\"Sale Month:\", new Date(sale.date).getMonth() + 1);\n                    // console.log(\"Sale Year:\", new Date(sale.date).getFullYear());\n                    if ((new Date(sale.date).getMonth() + 1) == dailySalesSelectedMonth && new Date(sale.date).getFullYear() == dailySalesSelectedYear && new Date(sale.date).getDate() == day) {\n                        sales += parseFloat(sale.net_total);\n                        profit += parseFloat(sale.net_profit);\n                        if(sale.payment_status==\"paid\"){\n                            paidSales += parseFloat(sale.net_total);\n                        }else if(sale.payment_status==\"not_paid\"){\n                            unpaidSales += parseFloat(sale.net_total);\n                        }\n                        loss += parseFloat(sale.loss);\n                    }\n                }\n            }\n\n            let totalExpense = 0.00;\n            if (props.columns.expense) {\n                for (const expense of props.allExpenses) {\n                    if ((new Date(expense.date).getMonth() + 1) == dailySalesSelectedMonth &&\n                        new Date(expense.date).getFullYear() == dailySalesSelectedYear &&\n                        new Date(expense.date).getDate() == day) {\n                        totalExpense += parseFloat(expense.amount);\n                    }\n                }\n            }\n\n            let totalPurchase = 0.00;\n            if (props.columns.purchase) {\n                for (const purchase of props.allPurchases) {\n                    if ((new Date(purchase.date).getMonth() + 1) == dailySalesSelectedMonth &&\n                        new Date(purchase.date).getFullYear() == dailySalesSelectedYear &&\n                        new Date(purchase.date).getDate() == day) {\n                        totalPurchase += parseFloat(purchase.net_total);\n                    }\n                }\n            }\n\n            let totalSalesReturn = 0.00;\n            let totalSalesReturnProfit = 0.00;\n            let totalSalesReturnLoss = 0.00;\n            if (props.columns.salesReturn||props.columns.salesReturnProfit||props.columns.salesReturnLoss) {\n                for (const salesReturn of props.allSalesReturns) {\n                    if ((new Date(salesReturn.date).getMonth() + 1) == dailySalesSelectedMonth &&\n                        new Date(salesReturn.date).getFullYear() == dailySalesSelectedYear &&\n                        new Date(salesReturn.date).getDate() == day) {\n                        totalSalesReturn += parseFloat(salesReturn.net_total);\n                        totalSalesReturnProfit += parseFloat(salesReturn.net_profit);\n                        totalSalesReturnLoss += parseFloat(salesReturn.loss);\n                    }\n                }\n            }\n\n            let totalPurchaseReturn = 0.00;\n            if (props.columns.purchaseReturn) {\n                for (const purchaseReturn of props.allPurchaseReturns) {\n                    if ((new Date(purchaseReturn.date).getMonth() + 1) == dailySalesSelectedMonth &&\n                        new Date(purchaseReturn.date).getFullYear() == dailySalesSelectedYear &&\n                        new Date(purchaseReturn.date).getDate() == day) {\n                        totalPurchaseReturn += parseFloat(purchaseReturn.net_total);\n                    }\n                }\n            }\n\n            let row = [new Date(dailySalesSelectedYear, dailySalesSelectedMonth - 1, day)];\n\n            if (props.columns.sales) {\n                row.push(parseFloat(sales.toFixed(2)));\n            }\n\n            if (props.columns.salesProfit) {\n                row.push(parseFloat(profit.toFixed(2)));\n            }\n\n            if (props.columns.paidSales) {\n                row.push(parseFloat(paidSales.toFixed(2)));\n            }\n\n            if (props.columns.unpaidSales) {\n                row.push(parseFloat(unpaidSales.toFixed(2)));\n            }\n\n            if (props.columns.expense) {\n                row.push(parseFloat(totalExpense.toFixed(2)));\n            }\n\n            if (props.columns.purchase) {\n                row.push(parseFloat(totalPurchase.toFixed(2)));\n            }\n\n            if (props.columns.salesReturn) {\n                row.push(parseFloat(totalSalesReturn.toFixed(2)));\n            }\n\n            if (props.columns.salesReturnProfit) {\n                row.push(parseFloat(totalSalesReturnProfit.toFixed(2)));\n            }\n\n            if (props.columns.salesReturnLoss) {\n                row.push(parseFloat(totalSalesReturnLoss.toFixed(2)));\n            }\n\n            if (props.columns.purchaseReturn) {\n                row.push(parseFloat(totalPurchaseReturn.toFixed(2)));\n            }\n\n            if (props.columns.loss) {\n                row.push(parseFloat(loss.toFixed(2)));\n            }\n\n            if (row.length > 1) {\n                data.push(row);\n            }\n        }\n\n        dailySales = data;\n        setDailySales(data);\n    }\n\n\n    const [options, setOptions] = useState({\n        title: '',\n        subtitle: '(SAR)',\n        legend: { position: 'right' },\n        hAxis: {\n            title: \"Date\",\n        },\n        vAxis: {\n            title: \"Amount(SAR)\",\n        },\n        series: {\n            // 0: { curveType: \"function\", axis: 'Temps' },\n            // 1: { curveType: \"function\", axis: 'Daylight' },\n        },\n    });\n\n\n    useEffect(() => {\n        // getAllOrders();\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return (\n        <>\n            <div className=\"container-fluid p-0\">\n                <div className=\"row\">\n\n                    <div className=\"col-md-2\">\n                        <label className=\"form-label\">Year</label>\n\n                        <div className=\"input-group mb-3\">\n                            <select\n                                value={dailySalesSelectedYear}\n                                onChange={(e) => {\n                                    if (!e.target.value) {\n                                        return;\n                                    }\n                                    dailySalesSelectedYear = parseInt(e.target.value);\n                                    setDailySalesSelectedYear(parseInt(e.target.value));\n                                    makeDailyData();\n                                }}\n                                className=\"form-control\"\n                            >\n                                {yearOptions.map((option) => (\n                                    <option value={option.value}>{option.label}</option>\n                                ))}\n                            </select>\n                        </div>\n                    </div>\n\n                    <div className=\"col-md-2\">\n                        <label className=\"form-label\">Month</label>\n\n                        <div className=\"input-group mb-3\">\n                            <select\n                                value={dailySalesSelectedMonth}\n                                onChange={(e) => {\n                                    if (!e.target.value) {\n                                        return;\n                                    }\n                                    dailySalesSelectedMonth = parseInt(e.target.value);\n                                    setDailySalesSelectedMonth(parseInt(e.target.value));\n                                    makeDailyData();\n                                }}\n                                className=\"form-control\"\n                            >\n                                {monthOptions.map((option) => (\n                                    <option value={option.value}>{option.label}</option>\n                                ))}\n\n                            </select>\n                        </div>\n                    </div>\n\n                    {dailySales && dailySales.length > 0 ? <Chart\n                        chartType=\"LineChart\"\n                        width=\"100%\"\n                        height=\"400px\"\n                        data={dailySales}\n                        options={options}\n                    /> : \"\"}\n                </div>\n            </div>\n        </>\n    );\n});\n\nexport default DailySales;\n"]},"metadata":{},"sourceType":"module"}