{"ast":null,"code":"/**\n * Use the ImageData from a Canvas and turn the image in a 1-bit black and white image using dithering\n */\nclass CanvasDither {\n  /**\n     * Change the image to grayscale\n     *\n     * @param  {object}   image         The imageData of a Canvas 2d context\n     * @return {object}                 The resulting imageData\n     *\n     */\n  grayscale(image) {\n    for (let i = 0; i < image.data.length; i += 4) {\n      const luminance = image.data[i] * 0.299 + image.data[i + 1] * 0.587 + image.data[i + 2] * 0.114;\n      image.data.fill(luminance, i, i + 3);\n    }\n\n    return image;\n  }\n  /**\n     * Change the image to blank and white using a simple threshold\n     *\n     * @param  {object}   image         The imageData of a Canvas 2d context\n     * @param  {number}   threshold     Threshold value (0-255)\n     * @return {object}                 The resulting imageData\n     *\n     */\n\n\n  threshold(image, threshold) {\n    for (let i = 0; i < image.data.length; i += 4) {\n      const luminance = image.data[i] * 0.299 + image.data[i + 1] * 0.587 + image.data[i + 2] * 0.114;\n      const value = luminance < threshold ? 0 : 255;\n      image.data.fill(value, i, i + 3);\n    }\n\n    return image;\n  }\n  /**\n     * Change the image to blank and white using the Bayer algorithm\n     *\n     * @param  {object}   image         The imageData of a Canvas 2d context\n     * @param  {number}   threshold     Threshold value (0-255)\n     * @return {object}                 The resulting imageData\n     *\n     */\n\n\n  bayer(image, threshold) {\n    const thresholdMap = [[15, 135, 45, 165], [195, 75, 225, 105], [60, 180, 30, 150], [240, 120, 210, 90]];\n\n    for (let i = 0; i < image.data.length; i += 4) {\n      const luminance = image.data[i] * 0.299 + image.data[i + 1] * 0.587 + image.data[i + 2] * 0.114;\n      const x = i / 4 % image.width;\n      const y = Math.floor(i / 4 / image.width);\n      const map = Math.floor((luminance + thresholdMap[x % 4][y % 4]) / 2);\n      const value = map < threshold ? 0 : 255;\n      image.data.fill(value, i, i + 3);\n    }\n\n    return image;\n  }\n  /**\n     * Change the image to blank and white using the Floyd-Steinberg algorithm\n     *\n     * @param  {object}   image         The imageData of a Canvas 2d context\n     * @return {object}                 The resulting imageData\n     *\n     */\n\n\n  floydsteinberg(image) {\n    const width = image.width;\n    const luminance = new Uint8ClampedArray(image.width * image.height);\n\n    for (let l = 0, i = 0; i < image.data.length; l++, i += 4) {\n      luminance[l] = image.data[i] * 0.299 + image.data[i + 1] * 0.587 + image.data[i + 2] * 0.114;\n    }\n\n    for (let l = 0, i = 0; i < image.data.length; l++, i += 4) {\n      const value = luminance[l] < 129 ? 0 : 255;\n      const error = Math.floor((luminance[l] - value) / 16);\n      image.data.fill(value, i, i + 3);\n      luminance[l + 1] += error * 7;\n      luminance[l + width - 1] += error * 3;\n      luminance[l + width] += error * 5;\n      luminance[l + width + 1] += error * 1;\n    }\n\n    return image;\n  }\n  /**\n     * Change the image to blank and white using the Atkinson algorithm\n     *\n     * @param  {object}   image         The imageData of a Canvas 2d context\n     * @return {object}                 The resulting imageData\n     *\n     */\n\n\n  atkinson(image) {\n    const width = image.width;\n    const luminance = new Uint8ClampedArray(image.width * image.height);\n\n    for (let l = 0, i = 0; i < image.data.length; l++, i += 4) {\n      luminance[l] = image.data[i] * 0.299 + image.data[i + 1] * 0.587 + image.data[i + 2] * 0.114;\n    }\n\n    for (let l = 0, i = 0; i < image.data.length; l++, i += 4) {\n      const value = luminance[l] < 129 ? 0 : 255;\n      const error = Math.floor((luminance[l] - value) / 8);\n      image.data.fill(value, i, i + 3);\n      luminance[l + 1] += error;\n      luminance[l + 2] += error;\n      luminance[l + width - 1] += error;\n      luminance[l + width] += error;\n      luminance[l + width + 1] += error;\n      luminance[l + 2 * width] += error;\n    }\n\n    return image;\n  }\n\n}\n\nmodule.exports = new CanvasDither();","map":{"version":3,"sources":["/Users/sirin/go/src/github.com/sirinibin/reactjs-pos/node_modules/canvas-dither/src/canvas-dither.js"],"names":["CanvasDither","grayscale","image","i","data","length","luminance","fill","threshold","value","bayer","thresholdMap","x","width","y","Math","floor","map","floydsteinberg","Uint8ClampedArray","height","l","error","atkinson","module","exports"],"mappings":"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","sourcesContent":["/**\n * Use the ImageData from a Canvas and turn the image in a 1-bit black and white image using dithering\n */\nclass CanvasDither {\n  /**\n     * Change the image to grayscale\n     *\n     * @param  {object}   image         The imageData of a Canvas 2d context\n     * @return {object}                 The resulting imageData\n     *\n     */\n  grayscale(image) {\n    for (let i = 0; i < image.data.length; i += 4) {\n      const luminance = (image.data[i] * 0.299) + (image.data[i + 1] * 0.587) + (image.data[i + 2] * 0.114);\n      image.data.fill(luminance, i, i + 3);\n    }\n\n    return image;\n  }\n\n  /**\n     * Change the image to blank and white using a simple threshold\n     *\n     * @param  {object}   image         The imageData of a Canvas 2d context\n     * @param  {number}   threshold     Threshold value (0-255)\n     * @return {object}                 The resulting imageData\n     *\n     */\n  threshold(image, threshold) {\n    for (let i = 0; i < image.data.length; i += 4) {\n      const luminance = (image.data[i] * 0.299) + (image.data[i + 1] * 0.587) + (image.data[i + 2] * 0.114);\n\n      const value = luminance < threshold ? 0 : 255;\n      image.data.fill(value, i, i + 3);\n    }\n\n    return image;\n  }\n\n  /**\n     * Change the image to blank and white using the Bayer algorithm\n     *\n     * @param  {object}   image         The imageData of a Canvas 2d context\n     * @param  {number}   threshold     Threshold value (0-255)\n     * @return {object}                 The resulting imageData\n     *\n     */\n  bayer(image, threshold) {\n    const thresholdMap = [\n      [15, 135, 45, 165],\n      [195, 75, 225, 105],\n      [60, 180, 30, 150],\n      [240, 120, 210, 90],\n    ];\n\n    for (let i = 0; i < image.data.length; i += 4) {\n      const luminance = (image.data[i] * 0.299) + (image.data[i + 1] * 0.587) + (image.data[i + 2] * 0.114);\n\n      const x = i / 4 % image.width;\n      const y = Math.floor(i / 4 / image.width);\n      const map = Math.floor((luminance + thresholdMap[x % 4][y % 4]) / 2);\n      const value = map < threshold ? 0 : 255;\n      image.data.fill(value, i, i + 3);\n    }\n\n    return image;\n  }\n\n  /**\n     * Change the image to blank and white using the Floyd-Steinberg algorithm\n     *\n     * @param  {object}   image         The imageData of a Canvas 2d context\n     * @return {object}                 The resulting imageData\n     *\n     */\n  floydsteinberg(image) {\n    const width = image.width;\n    const luminance = new Uint8ClampedArray(image.width * image.height);\n\n    for (let l = 0, i = 0; i < image.data.length; l++, i += 4) {\n      luminance[l] = (image.data[i] * 0.299) + (image.data[i + 1] * 0.587) + (image.data[i + 2] * 0.114);\n    }\n\n    for (let l = 0, i = 0; i < image.data.length; l++, i += 4) {\n      const value = luminance[l] < 129 ? 0 : 255;\n      const error = Math.floor((luminance[l] - value) / 16);\n      image.data.fill(value, i, i + 3);\n\n      luminance[l + 1] += error * 7;\n      luminance[l + width - 1] += error * 3;\n      luminance[l + width] += error * 5;\n      luminance[l + width + 1] += error * 1;\n    }\n\n    return image;\n  }\n\n  /**\n     * Change the image to blank and white using the Atkinson algorithm\n     *\n     * @param  {object}   image         The imageData of a Canvas 2d context\n     * @return {object}                 The resulting imageData\n     *\n     */\n  atkinson(image) {\n    const width = image.width;\n    const luminance = new Uint8ClampedArray(image.width * image.height);\n\n    for (let l = 0, i = 0; i < image.data.length; l++, i += 4) {\n      luminance[l] = (image.data[i] * 0.299) + (image.data[i + 1] * 0.587) + (image.data[i + 2] * 0.114);\n    }\n\n    for (let l = 0, i = 0; i < image.data.length; l++, i += 4) {\n      const value = luminance[l] < 129 ? 0 : 255;\n      const error = Math.floor((luminance[l] - value) / 8);\n      image.data.fill(value, i, i + 3);\n\n      luminance[l + 1] += error;\n      luminance[l + 2] += error;\n      luminance[l + width - 1] += error;\n      luminance[l + width] += error;\n      luminance[l + width + 1] += error;\n      luminance[l + 2 * width] += error;\n    }\n\n    return image;\n  }\n}\n\nmodule.exports = new CanvasDither();\n"]},"metadata":{},"sourceType":"script"}