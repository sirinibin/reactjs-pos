{"ast":null,"code":"var _classCallCheck = require(\"/Users/sirin/go/src/github.com/sirinibin/reactjs-pos/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/sirin/go/src/github.com/sirinibin/reactjs-pos/node_modules/@babel/runtime/helpers/createClass\");\n\nvar iconv = require('iconv-lite');\n\nvar linewrap = require('linewrap');\n\nvar _require = require('canvas'),\n    createCanvas = _require.createCanvas;\n\nvar Dither = require('canvas-dither');\n\nvar Flatten = require('canvas-flatten');\n/**\n * Create a byte stream based on commands for ESC/POS printers\n */\n\n\nvar EscPosEncoder = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\n     * Create a new object\n     *\n    */\n  function EscPosEncoder() {\n    _classCallCheck(this, EscPosEncoder);\n\n    this._reset();\n  }\n  /**\n     * Reset the state of the object\n     *\n    */\n\n\n  _createClass(EscPosEncoder, [{\n    key: \"_reset\",\n    value: function _reset() {\n      this._buffer = [];\n      this._codepage = 'ascii';\n      this._state = {\n        'bold': false,\n        'italic': false,\n        'underline': false,\n        'hanzi': false\n      };\n    }\n    /**\n       * Encode a string with the current code page\n       *\n       * @param  {string}   value  String to encode\n       * @return {object}          Encoded string as a ArrayBuffer\n       *\n      */\n\n  }, {\n    key: \"_encode\",\n    value: function _encode(value) {\n      return iconv.encode(value, this._codepage);\n    }\n    /**\n       * Add commands to the buffer\n       *\n       * @param  {array}   value  And array of numbers, arrays, buffers or Uint8Arrays to add to the buffer\n       *\n      */\n\n  }, {\n    key: \"_queue\",\n    value: function _queue(value) {\n      var _this = this;\n\n      value.forEach(function (item) {\n        return _this._buffer.push(item);\n      });\n    }\n    /**\n       * Initialize the printer\n       *\n       * @return {object}          Return the object, for easy chaining commands\n       *\n       */\n\n  }, {\n    key: \"initialize\",\n    value: function initialize() {\n      this._queue([0x1b, 0x40]);\n\n      return this;\n    }\n    /**\n       * Change the code page\n       *\n       * @param  {string}   value  The codepage that we set the printer to\n       * @return {object}          Return the object, for easy chaining commands\n       *\n       */\n\n  }, {\n    key: \"codepage\",\n    value: function codepage(value) {\n      var codepages = {\n        'cp437': [0x00, false],\n        'cp737': [0x40, false],\n        'cp850': [0x02, false],\n        'cp775': [0x5f, false],\n        'cp852': [0x12, false],\n        'cp855': [0x3c, false],\n        'cp857': [0x3d, false],\n        'cp858': [0x13, false],\n        'cp860': [0x03, false],\n        'cp861': [0x38, false],\n        'cp862': [0x3e, false],\n        'cp863': [0x04, false],\n        'cp864': [0x1c, false],\n        'cp865': [0x05, false],\n        'cp866': [0x11, false],\n        'cp869': [0x42, false],\n        'cp936': [0xff, true],\n        'cp949': [0xfd, true],\n        'cp950': [0xfe, true],\n        'cp1252': [0x10, false],\n        'iso88596': [0x16, false],\n        'shiftjis': [0xfc, true],\n        'windows874': [0x1e, false],\n        'windows1250': [0x48, false],\n        'windows1251': [0x49, false],\n        'windows1252': [0x47, false],\n        'windows1253': [0x5a, false],\n        'windows1254': [0x5b, false],\n        'windows1255': [0x20, false],\n        'windows1256': [0x5c, false],\n        'windows1257': [0x19, false],\n        'windows1258': [0x5e, false]\n      };\n      var codepage;\n\n      if (!iconv.encodingExists(value)) {\n        throw new Error('Unknown codepage');\n      }\n\n      if (value in iconv.encodings) {\n        if (typeof iconv.encodings[value] === 'string') {\n          codepage = iconv.encodings[value];\n        } else {\n          codepage = value;\n        }\n      } else {\n        throw new Error('Unknown codepage');\n      }\n\n      if (typeof codepages[codepage] !== 'undefined') {\n        this._codepage = codepage;\n        this._state.hanzi = codepages[codepage][1];\n\n        this._queue([0x1b, 0x74, codepages[codepage][0]]);\n      } else {\n        throw new Error('Codepage not supported by printer');\n      }\n\n      return this;\n    }\n    /**\n       * Print text\n       *\n       * @param  {string}   value  Text that needs to be printed\n       * @param  {number}   wrap   Wrap text after this many positions\n       * @return {object}          Return the object, for easy chaining commands\n       *\n       */\n\n  }, {\n    key: \"text\",\n    value: function text(value, wrap) {\n      if (wrap) {\n        var w = linewrap(wrap, {\n          lineBreak: '\\r\\n'\n        });\n        value = w(value);\n      }\n\n      var bytes = this._encode(value);\n\n      if (this._state.hanzi) {\n        this._queue([0x1c, 0x26, bytes, 0x1c, 0x2e]);\n      } else {\n        this._queue([bytes]);\n      }\n\n      return this;\n    }\n    /**\n       * Print a newline\n       *\n       * @return {object}          Return the object, for easy chaining commands\n       *\n       */\n\n  }, {\n    key: \"newline\",\n    value: function newline() {\n      this._queue([0x0a, 0x0d]);\n\n      return this;\n    }\n    /**\n       * Print text, followed by a newline\n       *\n       * @param  {string}   value  Text that needs to be printed\n       * @param  {number}   wrap   Wrap text after this many positions\n       * @return {object}          Return the object, for easy chaining commands\n       *\n       */\n\n  }, {\n    key: \"line\",\n    value: function line(value, wrap) {\n      this.text(value, wrap);\n      this.newline();\n      return this;\n    }\n    /**\n       * Underline text\n       *\n       * @param  {boolean|number}   value  true to turn on underline, false to turn off, or 2 for double underline\n       * @return {object}                  Return the object, for easy chaining commands\n       *\n       */\n\n  }, {\n    key: \"underline\",\n    value: function underline(value) {\n      if (typeof value === 'undefined') {\n        value = !this._state.underline;\n      }\n\n      this._state.underline = value;\n\n      this._queue([0x1b, 0x2d, Number(value)]);\n\n      return this;\n    }\n    /**\n       * Italic text\n       *\n       * @param  {boolean}          value  true to turn on italic, false to turn off\n       * @return {object}                  Return the object, for easy chaining commands\n       *\n       */\n\n  }, {\n    key: \"italic\",\n    value: function italic(value) {\n      if (typeof value === 'undefined') {\n        value = !this._state.italic;\n      }\n\n      this._state.italic = value;\n\n      this._queue([0x1b, 0x34, Number(value)]);\n\n      return this;\n    }\n    /**\n       * Bold text\n       *\n       * @param  {boolean}          value  true to turn on bold, false to turn off, or 2 for double underline\n       * @return {object}                  Return the object, for easy chaining commands\n       *\n       */\n\n  }, {\n    key: \"bold\",\n    value: function bold(value) {\n      if (typeof value === 'undefined') {\n        value = !this._state.bold;\n      }\n\n      this._state.bold = value;\n\n      this._queue([0x1b, 0x45, Number(value)]);\n\n      return this;\n    }\n    /**\n       * Change text size\n       *\n       * @param  {string}          value   small or normal\n       * @return {object}                  Return the object, for easy chaining commands\n       *\n       */\n\n  }, {\n    key: \"size\",\n    value: function size(value) {\n      if (value === 'small') {\n        value = 0x01;\n      } else {\n        value = 0x00;\n      }\n\n      this._queue([0x1b, 0x4d, value]);\n\n      return this;\n    }\n    /**\n       * Change text alignment\n       *\n       * @param  {string}          value   left, center or right\n       * @return {object}                  Return the object, for easy chaining commands\n       *\n       */\n\n  }, {\n    key: \"align\",\n    value: function align(value) {\n      var alignments = {\n        'left': 0x00,\n        'center': 0x01,\n        'right': 0x02\n      };\n\n      if (value in alignments) {\n        this._queue([0x1b, 0x61, alignments[value]]);\n      } else {\n        throw new Error('Unknown alignment');\n      }\n\n      return this;\n    }\n    /**\n       * Barcode\n       *\n       * @param  {string}           value  the value of the barcode\n       * @param  {string}           symbology  the type of the barcode\n       * @param  {number}           height  height of the barcode\n       * @return {object}                  Return the object, for easy chaining commands\n       *\n       */\n\n  }, {\n    key: \"barcode\",\n    value: function barcode(value, symbology, height) {\n      var symbologies = {\n        'upca': 0x00,\n        'upce': 0x01,\n        'ean13': 0x02,\n        'ean8': 0x03,\n        'code39': 0x04,\n        'coda39': 0x04,\n\n        /* typo, leave here for backwards compatibility */\n        'itf': 0x05,\n        'codabar': 0x06,\n        'code93': 0x48,\n        'code128': 0x49,\n        'gs1-128': 0x50,\n        'gs1-databar-omni': 0x51,\n        'gs1-databar-truncated': 0x52,\n        'gs1-databar-limited': 0x53,\n        'gs1-databar-expanded': 0x54,\n        'code128-auto': 0x55\n      };\n\n      if (symbology in symbologies) {\n        var bytes = iconv.encode(value, 'ascii');\n\n        this._queue([0x1d, 0x68, height, 0x1d, 0x77, symbology === 'code39' ? 0x02 : 0x03]);\n\n        if (symbology == 'code128' && bytes[0] !== 0x7b) {\n          /* Not yet encodeded Code 128, assume data is Code B, which is similar to ASCII without control chars */\n          this._queue([0x1d, 0x6b, symbologies[symbology], bytes.length + 2, 0x7b, 0x42, bytes]);\n        } else if (symbologies[symbology] > 0x40) {\n          /* Function B symbologies */\n          this._queue([0x1d, 0x6b, symbologies[symbology], bytes.length, bytes]);\n        } else {\n          /* Function A symbologies */\n          this._queue([0x1d, 0x6b, symbologies[symbology], bytes, 0x00]);\n        }\n      } else {\n        throw new Error('Symbology not supported by printer');\n      }\n\n      return this;\n    }\n    /**\n       * QR code\n       *\n       * @param  {string}           value  the value of the qr code\n       * @param  {number}           model  model of the qrcode, either 1 or 2\n       * @param  {number}           size   size of the qrcode, a value between 1 and 8\n       * @param  {string}           errorlevel  the amount of error correction used, either 'l', 'm', 'q', 'h'\n       * @return {object}                  Return the object, for easy chaining commands\n       *\n       */\n\n  }, {\n    key: \"qrcode\",\n    value: function qrcode(value, model, size, errorlevel) {\n      /* Force printing the print buffer and moving to a new line */\n      this._queue([0x0a]);\n      /* Model */\n\n\n      var models = {\n        1: 0x31,\n        2: 0x32\n      };\n\n      if (typeof model === 'undefined') {\n        model = 2;\n      }\n\n      if (model in models) {\n        this._queue([0x1d, 0x28, 0x6b, 0x04, 0x00, 0x31, 0x41, models[model], 0x00]);\n      } else {\n        throw new Error('Model must be 1 or 2');\n      }\n      /* Size */\n\n\n      if (typeof size === 'undefined') {\n        size = 6;\n      }\n\n      if (typeof size !== 'number') {\n        throw new Error('Size must be a number');\n      }\n\n      if (size < 1 || size > 8) {\n        throw new Error('Size must be between 1 and 8');\n      }\n\n      this._queue([0x1d, 0x28, 0x6b, 0x03, 0x00, 0x31, 0x43, size]);\n      /* Error level */\n\n\n      var errorlevels = {\n        'l': 0x30,\n        'm': 0x31,\n        'q': 0x32,\n        'h': 0x33\n      };\n\n      if (typeof errorlevel === 'undefined') {\n        errorlevel = 'm';\n      }\n\n      if (errorlevel in errorlevels) {\n        this._queue([0x1d, 0x28, 0x6b, 0x03, 0x00, 0x31, 0x45, errorlevels[errorlevel]]);\n      } else {\n        throw new Error('Error level must be l, m, q or h');\n      }\n      /* Data */\n\n\n      var bytes = iconv.encode(value, 'iso88591');\n      var length = bytes.length + 3;\n\n      this._queue([0x1d, 0x28, 0x6b, length % 0xff, length / 0xff, 0x31, 0x50, 0x30, bytes]);\n      /* Print QR code */\n\n\n      this._queue([0x1d, 0x28, 0x6b, 0x03, 0x00, 0x31, 0x51, 0x30]);\n\n      return this;\n    }\n    /**\n       * Image\n       *\n       * @param  {object}         element  an element, like a canvas or image that needs to be printed\n       * @param  {number}         width  width of the image on the printer\n       * @param  {number}         height  height of the image on the printer\n       * @param  {string}         algorithm  the dithering algorithm for making the image black and white\n       * @param  {number}         threshold  threshold for the dithering algorithm\n       * @return {object}                  Return the object, for easy chaining commands\n       *\n       */\n\n  }, {\n    key: \"image\",\n    value: function image(element, width, height, algorithm, threshold) {\n      if (width % 8 !== 0) {\n        throw new Error('Width must be a multiple of 8');\n      }\n\n      if (height % 8 !== 0) {\n        throw new Error('Height must be a multiple of 8');\n      }\n\n      if (typeof algorithm === 'undefined') {\n        algorithm = 'threshold';\n      }\n\n      if (typeof threshold === 'undefined') {\n        threshold = 128;\n      }\n\n      var canvas = createCanvas(width, height);\n      var context = canvas.getContext('2d');\n      context.drawImage(element, 0, 0, width, height);\n      var image = context.getImageData(0, 0, width, height);\n      image = Flatten.flatten(image, [0xff, 0xff, 0xff]);\n\n      switch (algorithm) {\n        case 'threshold':\n          image = Dither.threshold(image, threshold);\n          break;\n\n        case 'bayer':\n          image = Dither.bayer(image, threshold);\n          break;\n\n        case 'floydsteinberg':\n          image = Dither.floydsteinberg(image);\n          break;\n\n        case 'atkinson':\n          image = Dither.atkinson(image);\n          break;\n      }\n\n      var getPixel = function getPixel(x, y) {\n        return image.data[(width * y + x) * 4] > 0 ? 0 : 1;\n      };\n\n      var bytes = new Uint8Array(width * height >> 3);\n\n      for (var y = 0; y < height; y++) {\n        for (var x = 0; x < width; x = x + 8) {\n          var i = y * (width >> 3) + (x >> 3);\n          bytes[i] = getPixel(x + 0, y) << 7 | getPixel(x + 1, y) << 6 | getPixel(x + 2, y) << 5 | getPixel(x + 3, y) << 4 | getPixel(x + 4, y) << 3 | getPixel(x + 5, y) << 2 | getPixel(x + 6, y) << 1 | getPixel(x + 7, y);\n        }\n      }\n\n      this._queue([0x1d, 0x76, 0x30, 0x00, width >> 3 & 0xff, width >> 3 >> 8 & 0xff, height & 0xff, height >> 8 & 0xff, bytes]);\n\n      return this;\n    }\n    /**\n       * Cut paper\n       *\n       * @param  {string}          value   full or partial. When not specified a full cut will be assumed\n       * @return {object}                  Return the object, for easy chaining commands\n       *\n       */\n\n  }, {\n    key: \"cut\",\n    value: function cut(value) {\n      var data = 0x00;\n\n      if (value == 'partial') {\n        data = 0x01;\n      }\n\n      this._queue([0x1d, 0x56, data]);\n\n      return this;\n    }\n    /**\n       * Add raw printer commands\n       *\n       * @param  {array}           data   raw bytes to be included\n       * @return {object}          Return the object, for easy chaining commands\n       *\n       */\n\n  }, {\n    key: \"raw\",\n    value: function raw(data) {\n      this._queue(data);\n\n      return this;\n    }\n    /**\n       * Encode all previous commands\n       *\n       * @return {Uint8Array}         Return the encoded bytes\n       *\n       */\n\n  }, {\n    key: \"encode\",\n    value: function encode() {\n      var length = 0;\n\n      this._buffer.forEach(function (item) {\n        if (typeof item === 'number') {\n          length++;\n        } else {\n          length += item.length;\n        }\n      });\n\n      var result = new Uint8Array(length);\n      var index = 0;\n\n      this._buffer.forEach(function (item) {\n        if (typeof item === 'number') {\n          result[index] = item;\n          index++;\n        } else {\n          result.set(item, index);\n          index += item.length;\n        }\n      });\n\n      this._reset();\n\n      return result;\n    }\n  }]);\n\n  return EscPosEncoder;\n}();\n\nmodule.exports = EscPosEncoder;","map":{"version":3,"sources":["/Users/sirin/go/src/github.com/sirinibin/reactjs-pos/node_modules/esc-pos-encoder/src/esc-pos-encoder.js"],"names":["iconv","require","linewrap","createCanvas","Dither","Flatten","EscPosEncoder","_reset","_buffer","_codepage","_state","value","encode","forEach","item","push","_queue","codepages","codepage","encodingExists","Error","encodings","hanzi","wrap","w","lineBreak","bytes","_encode","text","newline","underline","Number","italic","bold","alignments","symbology","height","symbologies","length","model","size","errorlevel","models","errorlevels","element","width","algorithm","threshold","canvas","context","getContext","drawImage","image","getImageData","flatten","bayer","floydsteinberg","atkinson","getPixel","x","y","data","Uint8Array","i","result","index","set","module","exports"],"mappings":"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","sourcesContent":["const iconv = require('iconv-lite');\nconst linewrap = require('linewrap');\nconst {createCanvas} = require('canvas');\nconst Dither = require('canvas-dither');\nconst Flatten = require('canvas-flatten');\n\n\n/**\n * Create a byte stream based on commands for ESC/POS printers\n */\nclass EscPosEncoder {\n  /**\n     * Create a new object\n     *\n    */\n  constructor() {\n    this._reset();\n  }\n\n  /**\n     * Reset the state of the object\n     *\n    */\n  _reset() {\n    this._buffer = [];\n    this._codepage = 'ascii';\n\n    this._state = {\n      'bold': false,\n      'italic': false,\n      'underline': false,\n      'hanzi': false,\n    };\n  }\n\n  /**\n     * Encode a string with the current code page\n     *\n     * @param  {string}   value  String to encode\n     * @return {object}          Encoded string as a ArrayBuffer\n     *\n    */\n  _encode(value) {\n    return iconv.encode(value, this._codepage);\n  }\n\n  /**\n     * Add commands to the buffer\n     *\n     * @param  {array}   value  And array of numbers, arrays, buffers or Uint8Arrays to add to the buffer\n     *\n    */\n  _queue(value) {\n    value.forEach((item) => this._buffer.push(item));\n  }\n\n  /**\n     * Initialize the printer\n     *\n     * @return {object}          Return the object, for easy chaining commands\n     *\n     */\n  initialize() {\n    this._queue([\n      0x1b, 0x40,\n    ]);\n\n    return this;\n  }\n\n  /**\n     * Change the code page\n     *\n     * @param  {string}   value  The codepage that we set the printer to\n     * @return {object}          Return the object, for easy chaining commands\n     *\n     */\n  codepage(value) {\n    const codepages = {\n      'cp437': [0x00, false],\n      'cp737': [0x40, false],\n      'cp850': [0x02, false],\n      'cp775': [0x5f, false],\n      'cp852': [0x12, false],\n      'cp855': [0x3c, false],\n      'cp857': [0x3d, false],\n      'cp858': [0x13, false],\n      'cp860': [0x03, false],\n      'cp861': [0x38, false],\n      'cp862': [0x3e, false],\n      'cp863': [0x04, false],\n      'cp864': [0x1c, false],\n      'cp865': [0x05, false],\n      'cp866': [0x11, false],\n      'cp869': [0x42, false],\n      'cp936': [0xff, true],\n      'cp949': [0xfd, true],\n      'cp950': [0xfe, true],\n      'cp1252': [0x10, false],\n      'iso88596': [0x16, false],\n      'shiftjis': [0xfc, true],\n      'windows874': [0x1e, false],\n      'windows1250': [0x48, false],\n      'windows1251': [0x49, false],\n      'windows1252': [0x47, false],\n      'windows1253': [0x5a, false],\n      'windows1254': [0x5b, false],\n      'windows1255': [0x20, false],\n      'windows1256': [0x5c, false],\n      'windows1257': [0x19, false],\n      'windows1258': [0x5e, false],\n    };\n\n    let codepage;\n\n    if (!iconv.encodingExists(value)) {\n      throw new Error('Unknown codepage');\n    }\n\n    if (value in iconv.encodings) {\n      if (typeof iconv.encodings[value] === 'string') {\n        codepage = iconv.encodings[value];\n      } else {\n        codepage = value;\n      }\n    } else {\n      throw new Error('Unknown codepage');\n    }\n\n    if (typeof codepages[codepage] !== 'undefined') {\n      this._codepage = codepage;\n      this._state.hanzi = codepages[codepage][1];\n\n      this._queue([\n        0x1b, 0x74, codepages[codepage][0],\n      ]);\n    } else {\n      throw new Error('Codepage not supported by printer');\n    }\n\n    return this;\n  }\n\n  /**\n     * Print text\n     *\n     * @param  {string}   value  Text that needs to be printed\n     * @param  {number}   wrap   Wrap text after this many positions\n     * @return {object}          Return the object, for easy chaining commands\n     *\n     */\n  text(value, wrap) {\n    if (wrap) {\n      const w = linewrap(wrap, {lineBreak: '\\r\\n'});\n      value = w(value);\n    }\n\n    const bytes = this._encode(value);\n\n    if (this._state.hanzi) {\n      this._queue([\n        0x1c, 0x26, bytes, 0x1c, 0x2e,\n      ]);\n    } else {\n      this._queue([\n        bytes,\n      ]);\n    }\n\n    return this;\n  }\n\n  /**\n     * Print a newline\n     *\n     * @return {object}          Return the object, for easy chaining commands\n     *\n     */\n  newline() {\n    this._queue([\n      0x0a, 0x0d,\n    ]);\n\n    return this;\n  }\n\n  /**\n     * Print text, followed by a newline\n     *\n     * @param  {string}   value  Text that needs to be printed\n     * @param  {number}   wrap   Wrap text after this many positions\n     * @return {object}          Return the object, for easy chaining commands\n     *\n     */\n  line(value, wrap) {\n    this.text(value, wrap);\n    this.newline();\n\n    return this;\n  }\n\n  /**\n     * Underline text\n     *\n     * @param  {boolean|number}   value  true to turn on underline, false to turn off, or 2 for double underline\n     * @return {object}                  Return the object, for easy chaining commands\n     *\n     */\n  underline(value) {\n    if (typeof value === 'undefined') {\n      value = ! this._state.underline;\n    }\n\n    this._state.underline = value;\n\n    this._queue([\n      0x1b, 0x2d, Number(value),\n    ]);\n\n    return this;\n  }\n\n  /**\n     * Italic text\n     *\n     * @param  {boolean}          value  true to turn on italic, false to turn off\n     * @return {object}                  Return the object, for easy chaining commands\n     *\n     */\n  italic(value) {\n    if (typeof value === 'undefined') {\n      value = ! this._state.italic;\n    }\n\n    this._state.italic = value;\n\n    this._queue([\n      0x1b, 0x34, Number(value),\n    ]);\n\n    return this;\n  }\n\n  /**\n     * Bold text\n     *\n     * @param  {boolean}          value  true to turn on bold, false to turn off, or 2 for double underline\n     * @return {object}                  Return the object, for easy chaining commands\n     *\n     */\n  bold(value) {\n    if (typeof value === 'undefined') {\n      value = ! this._state.bold;\n    }\n\n    this._state.bold = value;\n\n    this._queue([\n      0x1b, 0x45, Number(value),\n    ]);\n\n    return this;\n  }\n\n  /**\n     * Change text size\n     *\n     * @param  {string}          value   small or normal\n     * @return {object}                  Return the object, for easy chaining commands\n     *\n     */\n  size(value) {\n    if (value === 'small') {\n      value = 0x01;\n    } else {\n      value = 0x00;\n    }\n\n    this._queue([\n      0x1b, 0x4d, value,\n    ]);\n\n    return this;\n  }\n\n  /**\n     * Change text alignment\n     *\n     * @param  {string}          value   left, center or right\n     * @return {object}                  Return the object, for easy chaining commands\n     *\n     */\n  align(value) {\n    const alignments = {\n      'left': 0x00,\n      'center': 0x01,\n      'right': 0x02,\n    };\n\n    if (value in alignments) {\n      this._queue([\n        0x1b, 0x61, alignments[value],\n      ]);\n    } else {\n      throw new Error('Unknown alignment');\n    }\n\n    return this;\n  }\n\n  /**\n     * Barcode\n     *\n     * @param  {string}           value  the value of the barcode\n     * @param  {string}           symbology  the type of the barcode\n     * @param  {number}           height  height of the barcode\n     * @return {object}                  Return the object, for easy chaining commands\n     *\n     */\n  barcode(value, symbology, height) {\n    const symbologies = {\n      'upca': 0x00,\n      'upce': 0x01,\n      'ean13': 0x02,\n      'ean8': 0x03,\n      'code39': 0x04,\n      'coda39': 0x04, /* typo, leave here for backwards compatibility */\n      'itf': 0x05,\n      'codabar': 0x06,\n      'code93': 0x48,\n      'code128': 0x49,\n      'gs1-128': 0x50,\n      'gs1-databar-omni': 0x51,\n      'gs1-databar-truncated': 0x52,\n      'gs1-databar-limited': 0x53,\n      'gs1-databar-expanded': 0x54,\n      'code128-auto': 0x55,\n    };\n\n    if (symbology in symbologies) {\n      const bytes = iconv.encode(value, 'ascii');\n\n      this._queue([\n        0x1d, 0x68, height,\n        0x1d, 0x77, symbology === 'code39' ? 0x02 : 0x03,\n      ]);\n\n      if (symbology == 'code128' && bytes[0] !== 0x7b) {\n        /* Not yet encodeded Code 128, assume data is Code B, which is similar to ASCII without control chars */\n\n        this._queue([\n          0x1d, 0x6b, symbologies[symbology],\n          bytes.length + 2,\n          0x7b, 0x42,\n          bytes,\n        ]);\n      } else if (symbologies[symbology] > 0x40) {\n        /* Function B symbologies */\n\n        this._queue([\n          0x1d, 0x6b, symbologies[symbology],\n          bytes.length,\n          bytes,\n        ]);\n      } else {\n        /* Function A symbologies */\n\n        this._queue([\n          0x1d, 0x6b, symbologies[symbology],\n          bytes,\n          0x00,\n        ]);\n      }\n    } else {\n      throw new Error('Symbology not supported by printer');\n    }\n\n    return this;\n  }\n\n  /**\n     * QR code\n     *\n     * @param  {string}           value  the value of the qr code\n     * @param  {number}           model  model of the qrcode, either 1 or 2\n     * @param  {number}           size   size of the qrcode, a value between 1 and 8\n     * @param  {string}           errorlevel  the amount of error correction used, either 'l', 'm', 'q', 'h'\n     * @return {object}                  Return the object, for easy chaining commands\n     *\n     */\n  qrcode(value, model, size, errorlevel) {\n    /* Force printing the print buffer and moving to a new line */\n\n    this._queue([\n      0x0a,\n    ]);\n\n    /* Model */\n\n    const models = {\n      1: 0x31,\n      2: 0x32,\n    };\n\n    if (typeof model === 'undefined') {\n      model = 2;\n    }\n\n    if (model in models) {\n      this._queue([\n        0x1d, 0x28, 0x6b, 0x04, 0x00, 0x31, 0x41, models[model], 0x00,\n      ]);\n    } else {\n      throw new Error('Model must be 1 or 2');\n    }\n\n    /* Size */\n\n    if (typeof size === 'undefined') {\n      size = 6;\n    }\n\n    if (typeof size !== 'number') {\n      throw new Error('Size must be a number');\n    }\n\n    if (size < 1 || size > 8) {\n      throw new Error('Size must be between 1 and 8');\n    }\n\n    this._queue([\n      0x1d, 0x28, 0x6b, 0x03, 0x00, 0x31, 0x43, size,\n    ]);\n\n    /* Error level */\n\n    const errorlevels = {\n      'l': 0x30,\n      'm': 0x31,\n      'q': 0x32,\n      'h': 0x33,\n    };\n\n    if (typeof errorlevel === 'undefined') {\n      errorlevel = 'm';\n    }\n\n    if (errorlevel in errorlevels) {\n      this._queue([\n        0x1d, 0x28, 0x6b, 0x03, 0x00, 0x31, 0x45, errorlevels[errorlevel],\n      ]);\n    } else {\n      throw new Error('Error level must be l, m, q or h');\n    }\n\n    /* Data */\n\n    const bytes = iconv.encode(value, 'iso88591');\n    const length = bytes.length + 3;\n\n    this._queue([\n      0x1d, 0x28, 0x6b, length % 0xff, length / 0xff, 0x31, 0x50, 0x30, bytes,\n    ]);\n\n    /* Print QR code */\n\n    this._queue([\n      0x1d, 0x28, 0x6b, 0x03, 0x00, 0x31, 0x51, 0x30,\n    ]);\n\n    return this;\n  }\n\n  /**\n     * Image\n     *\n     * @param  {object}         element  an element, like a canvas or image that needs to be printed\n     * @param  {number}         width  width of the image on the printer\n     * @param  {number}         height  height of the image on the printer\n     * @param  {string}         algorithm  the dithering algorithm for making the image black and white\n     * @param  {number}         threshold  threshold for the dithering algorithm\n     * @return {object}                  Return the object, for easy chaining commands\n     *\n     */\n  image(element, width, height, algorithm, threshold) {\n    if (width % 8 !== 0) {\n      throw new Error('Width must be a multiple of 8');\n    }\n\n    if (height % 8 !== 0) {\n      throw new Error('Height must be a multiple of 8');\n    }\n\n    if (typeof algorithm === 'undefined') {\n      algorithm = 'threshold';\n    }\n\n    if (typeof threshold === 'undefined') {\n      threshold = 128;\n    }\n\n    const canvas = createCanvas(width, height);\n    const context = canvas.getContext('2d');\n    context.drawImage(element, 0, 0, width, height);\n    let image = context.getImageData(0, 0, width, height);\n\n    image = Flatten.flatten(image, [0xff, 0xff, 0xff]);\n\n    switch (algorithm) {\n      case 'threshold': image = Dither.threshold(image, threshold); break;\n      case 'bayer': image = Dither.bayer(image, threshold); break;\n      case 'floydsteinberg': image = Dither.floydsteinberg(image); break;\n      case 'atkinson': image = Dither.atkinson(image); break;\n    }\n\n    const getPixel = (x, y) => image.data[((width * y) + x) * 4] > 0 ? 0 : 1;\n\n    const bytes = new Uint8Array((width * height) >> 3);\n\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x = x + 8) {\n        const i = (y * (width >> 3)) + (x >> 3);\n        bytes[i] =\n                    getPixel(x + 0, y) << 7 |\n                    getPixel(x + 1, y) << 6 |\n                    getPixel(x + 2, y) << 5 |\n                    getPixel(x + 3, y) << 4 |\n                    getPixel(x + 4, y) << 3 |\n                    getPixel(x + 5, y) << 2 |\n                    getPixel(x + 6, y) << 1 |\n                    getPixel(x + 7, y);\n      }\n    }\n\n    this._queue([\n      0x1d, 0x76, 0x30, 0x00,\n      (width >> 3) & 0xff, (((width >> 3) >> 8) & 0xff),\n      height & 0xff, ((height >> 8) & 0xff),\n      bytes,\n    ]);\n\n    return this;\n  }\n\n  /**\n     * Cut paper\n     *\n     * @param  {string}          value   full or partial. When not specified a full cut will be assumed\n     * @return {object}                  Return the object, for easy chaining commands\n     *\n     */\n  cut(value) {\n    let data = 0x00;\n\n    if (value == 'partial') {\n      data = 0x01;\n    }\n\n    this._queue([\n      0x1d, 0x56, data,\n    ]);\n\n    return this;\n  }\n\n  /**\n     * Add raw printer commands\n     *\n     * @param  {array}           data   raw bytes to be included\n     * @return {object}          Return the object, for easy chaining commands\n     *\n     */\n  raw(data) {\n    this._queue(data);\n\n    return this;\n  }\n\n  /**\n     * Encode all previous commands\n     *\n     * @return {Uint8Array}         Return the encoded bytes\n     *\n     */\n  encode() {\n    let length = 0;\n\n    this._buffer.forEach((item) => {\n      if (typeof item === 'number') {\n        length++;\n      } else {\n        length += item.length;\n      }\n    });\n\n    const result = new Uint8Array(length);\n\n    let index = 0;\n\n    this._buffer.forEach((item) => {\n      if (typeof item === 'number') {\n        result[index] = item;\n        index++;\n      } else {\n        result.set(item, index);\n        index += item.length;\n      }\n    });\n\n    this._reset();\n\n    return result;\n  }\n}\n\nmodule.exports = EscPosEncoder;\n"]},"metadata":{},"sourceType":"script"}