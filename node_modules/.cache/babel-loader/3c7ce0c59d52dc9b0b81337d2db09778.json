{"ast":null,"code":"var _jsxFileName = \"/Users/sirin/go/src/github.com/sirinibin/reactjs-pos/src/analytics/sales/hourlySales.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, forwardRef, useImperativeHandle } from \"react\";\nimport Cookies from \"universal-cookie\";\nimport { Chart } from \"react-google-charts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst HourlySales = /*#__PURE__*/forwardRef(_c = _s((props, ref) => {\n  _s();\n\n  const cookies = new Cookies();\n  useImperativeHandle(ref, () => ({\n    init() {\n      makeDateOptions();\n\n      if (props.allOrders.length > 0) {\n        makeHourlySalesData();\n      }\n    }\n\n  }));\n  const [yearOptions, setYearOptions] = useState([{\n    label: \"2023\",\n    value: 2023\n  }, {\n    label: \"2022\",\n    value: 2022\n  }, {\n    label: \"2021\",\n    value: 2021\n  }, {\n    label: \"2020\",\n    value: 2020\n  }]);\n  const [monthOptions, setMonthOptions] = useState([{\n    label: \"JAN\",\n    value: 1\n  }, {\n    label: \"FEB\",\n    value: 2\n  }, {\n    label: \"MAR\",\n    value: 3\n  }, {\n    label: \"APR\",\n    value: 4\n  }, {\n    label: \"MAY\",\n    value: 5\n  }, {\n    label: \"JUN\",\n    value: 6\n  }, {\n    label: \"JULY\",\n    value: 7\n  }, {\n    label: \"AUG\",\n    value: 8\n  }, {\n    label: \"SEP\",\n    value: 9\n  }, {\n    label: \"OCT\",\n    value: 10\n  }, {\n    label: \"NOV\",\n    value: 11\n  }, {\n    label: \"DEC\",\n    value: 12\n  }]);\n  let [dateOptions, setDateOptions] = useState([]);\n  let [hourlySales, setHourlySales] = useState([]);\n  let [hourlySalesSelectedDate, setHourlySalesSelectedDate] = useState(new Date().getDate());\n  let [hourlySalesSelectedMonth, setHourlySalesSelectedMonth] = useState(new Date().getMonth() + 1);\n  let [hourlySalesSelectedYear, setHourlySalesSelectedYear] = useState(new Date().getFullYear());\n\n  function daysInMonth(month, year) {\n    return new Date(year, month, 0).getDate();\n  }\n\n  function makeDateOptions() {\n    let days = daysInMonth(hourlySalesSelectedMonth, hourlySalesSelectedYear);\n    let options = [];\n\n    for (let i = 1; i <= days; i++) {\n      options.push({\n        label: i,\n        value: i\n      });\n    }\n\n    dateOptions = options;\n    setDateOptions(options);\n  }\n\n  function makeHourlySalesData() {\n    let columns = [{\n      type: \"datetime\",\n      label: \"Time\"\n    }];\n\n    if (props.columns.sales) {\n      columns.push({\n        type: \"number\",\n        label: \"Sales\"\n      });\n    }\n\n    if (props.columns.salesProfit) {\n      columns.push({\n        type: \"number\",\n        label: \"Sales Profit\"\n      });\n    }\n\n    if (props.columns.paidSales) {\n      columns.push({\n        type: \"number\",\n        label: \"Paid Sales\"\n      });\n    }\n\n    if (props.columns.unpaidSales) {\n      columns.push({\n        type: \"number\",\n        label: \"UnPaid Sales\"\n      });\n    }\n\n    if (props.columns.expense) {\n      columns.push({\n        type: \"number\",\n        label: \"Expense\"\n      });\n    }\n\n    if (props.columns.purchase) {\n      columns.push({\n        type: \"number\",\n        label: \"Purchase\"\n      });\n    }\n\n    if (props.columns.salesReturn) {\n      columns.push({\n        type: \"number\",\n        label: \"Sales Return\"\n      });\n    }\n\n    if (props.columns.salesReturnProfit) {\n      columns.push({\n        type: \"number\",\n        label: \"Sales Return profit\"\n      });\n    }\n\n    if (props.columns.salesReturnLoss) {\n      columns.push({\n        type: \"number\",\n        label: \"Sales Return Loss\"\n      });\n    }\n\n    if (props.columns.purchaseReturn) {\n      columns.push({\n        type: \"number\",\n        label: \"Purchase Return\"\n      });\n    }\n\n    if (props.columns.loss) {\n      columns.push({\n        type: \"number\",\n        label: \"Sales Loss\"\n      });\n    }\n\n    let data = [];\n\n    if (columns.length > 1) {\n      data.push(columns);\n    }\n\n    if (props.columns.sales || props.columns.salesProfit || props.columns.loss || props.columns.paidSales || props.columns.unpaidSales) {\n      for (const sale of props.allOrders) {\n        // console.log(\"Sale Month:\", new Date(sale.date).getMonth() + 1);\n        // console.log(\"Sale Year:\", new Date(sale.date).getFullYear());\n        if (new Date(sale.date).getMonth() + 1 == hourlySalesSelectedMonth && new Date(sale.date).getFullYear() == hourlySalesSelectedYear && new Date(sale.date).getDate() == hourlySalesSelectedDate // && new Date(sale.date).getHours() == hour\n        ) {\n          let row = [new Date(sale.date)];\n\n          if (props.columns.sales) {\n            row.push(parseFloat(sale.net_total.toFixed(2)));\n          }\n\n          if (props.columns.salesProfit) {\n            row.push(parseFloat(sale.net_profit.toFixed(2)));\n          }\n\n          if (props.columns.paidSales) {\n            if (sale.payment_status == \"paid\") {\n              row.push(parseFloat(sale.net_total.toFixed(2)));\n            } else {\n              row.push(0.00);\n            }\n          }\n\n          if (props.columns.unpaidSales) {\n            if (sale.payment_status == \"not_paid\") {\n              row.push(parseFloat(sale.net_total.toFixed(2)));\n            } else {\n              row.push(0.00);\n            }\n          }\n\n          if (props.columns.expense) {\n            row.push(undefined);\n          }\n\n          if (props.columns.purchase) {\n            row.push(undefined);\n          }\n\n          if (props.columns.salesReturn) {\n            row.push(undefined);\n          }\n\n          if (props.columns.salesReturnProfit) {\n            row.push(undefined);\n          }\n\n          if (props.columns.salesReturnLoss) {\n            row.push(undefined);\n          }\n\n          if (props.columns.purchaseReturn) {\n            row.push(undefined);\n          }\n\n          if (props.columns.loss) {\n            row.push(parseFloat(sale.loss.toFixed(2)));\n          }\n\n          data.push(row);\n        }\n      }\n    }\n\n    if (props.columns.expense) {\n      for (const expense of props.allExpenses) {\n        if (new Date(expense.date).getMonth() + 1 == hourlySalesSelectedMonth && new Date(expense.date).getFullYear() == hourlySalesSelectedYear && new Date(expense.date).getDate() == hourlySalesSelectedDate) {\n          let row = [new Date(expense.date)];\n\n          if (props.columns.sales) {\n            row.push(undefined);\n          }\n\n          if (props.columns.salesProfit) {\n            row.push(undefined);\n          }\n\n          if (props.columns.sales) {\n            row.push(undefined);\n          }\n\n          if (props.columns.salesProfit) {\n            row.push(undefined);\n          }\n\n          if (props.columns.expense) {\n            row.push(parseFloat(expense.amount.toFixed(2)));\n          }\n\n          if (props.columns.purchase) {\n            row.push(undefined);\n          }\n\n          if (props.columns.salesReturn) {\n            row.push(undefined);\n          }\n\n          if (props.columns.salesReturnProfit) {\n            row.push(undefined);\n          }\n\n          if (props.columns.salesReturnLoss) {\n            row.push(undefined);\n          }\n\n          if (props.columns.purchaseReturn) {\n            row.push(undefined);\n          }\n\n          if (props.columns.loss) {\n            row.push(undefined);\n          }\n\n          data.push(row);\n        }\n      }\n    }\n\n    if (props.columns.purchase) {\n      for (const purchase of props.allPurchases) {\n        if (new Date(purchase.date).getMonth() + 1 == hourlySalesSelectedMonth && new Date(purchase.date).getFullYear() == hourlySalesSelectedYear && new Date(purchase.date).getDate() == hourlySalesSelectedDate) {\n          let row = [new Date(purchase.date)];\n\n          if (props.columns.sales) {\n            row.push(undefined);\n          }\n\n          if (props.columns.salesProfit) {\n            row.push(undefined);\n          }\n\n          if (props.columns.sales) {\n            row.push(undefined);\n          }\n\n          if (props.columns.salesProfit) {\n            row.push(undefined);\n          }\n\n          if (props.columns.expense) {\n            row.push(undefined);\n          }\n\n          if (props.columns.purchase) {\n            row.push(parseFloat(purchase.net_total.toFixed(2)));\n          }\n\n          if (props.columns.salesReturn) {\n            row.push(undefined);\n          }\n\n          if (props.columns.salesReturnProfit) {\n            row.push(undefined);\n          }\n\n          if (props.columns.salesReturnLoss) {\n            row.push(undefined);\n          }\n\n          if (props.columns.purchaseReturn) {\n            row.push(undefined);\n          }\n\n          if (props.columns.loss) {\n            row.push(undefined);\n          }\n\n          data.push(row);\n        }\n      }\n    }\n\n    if (props.columns.salesReturn || props.columns.salesReturnProfit || props.columns.salesReturnLoss) {\n      for (const salesReturn of props.allSalesReturns) {\n        if (new Date(salesReturn.date).getMonth() + 1 == hourlySalesSelectedMonth && new Date(salesReturn.date).getFullYear() == hourlySalesSelectedYear && new Date(salesReturn.date).getDate() == hourlySalesSelectedDate) {\n          let row = [new Date(salesReturn.date)];\n\n          if (props.columns.sales) {\n            row.push(undefined);\n          }\n\n          if (props.columns.salesProfit) {\n            row.push(undefined);\n          }\n\n          if (props.columns.sales) {\n            row.push(undefined);\n          }\n\n          if (props.columns.salesProfit) {\n            row.push(undefined);\n          }\n\n          if (props.columns.expense) {\n            row.push(undefined);\n          }\n\n          if (props.columns.purchase) {\n            row.push(undefined);\n          }\n\n          if (props.columns.salesReturn) {\n            row.push(parseFloat(salesReturn.net_total.toFixed(2)));\n          }\n\n          if (props.columns.salesReturnProfit) {\n            row.push(parseFloat(salesReturn.net_profit.toFixed(2)));\n          }\n\n          if (props.columns.salesReturnLoss) {\n            row.push(parseFloat(salesReturn.loss.toFixed(2)));\n          }\n\n          if (props.columns.purchaseReturn) {\n            row.push(undefined);\n          }\n\n          if (props.columns.loss) {\n            row.push(undefined);\n          }\n\n          data.push(row);\n        }\n      }\n    }\n\n    if (props.columns.purchaseReturn) {\n      for (const purchaseReturn of props.allPurchaseReturns) {\n        if (new Date(purchaseReturn.date).getMonth() + 1 == hourlySalesSelectedMonth && new Date(purchaseReturn.date).getFullYear() == hourlySalesSelectedYear && new Date(purchaseReturn.date).getDate() == hourlySalesSelectedDate) {\n          let row = [new Date(purchaseReturn.date)];\n\n          if (props.columns.sales) {\n            row.push(undefined);\n          }\n\n          if (props.columns.salesProfit) {\n            row.push(undefined);\n          }\n\n          if (props.columns.sales) {\n            row.push(undefined);\n          }\n\n          if (props.columns.salesProfit) {\n            row.push(undefined);\n          }\n\n          if (props.columns.expense) {\n            row.push(undefined);\n          }\n\n          if (props.columns.purchase) {\n            row.push(undefined);\n          }\n\n          if (props.columns.salesReturn) {\n            row.push(undefined);\n          }\n\n          if (props.columns.salesReturnProfit) {\n            row.push(undefined);\n          }\n\n          if (props.columns.salesReturnLoss) {\n            row.push(undefined);\n          }\n\n          if (props.columns.purchaseReturn) {\n            row.push(parseFloat(purchaseReturn.net_total.toFixed(2)));\n          }\n\n          if (props.columns.loss) {\n            row.push(undefined);\n          }\n\n          data.push(row);\n        }\n      }\n    }\n\n    hourlySales = data;\n    setHourlySales(data);\n  }\n\n  const [options, setOptions] = useState({\n    title: '',\n    subtitle: '(SAR)',\n    legend: {\n      position: 'right'\n    },\n    hAxis: {\n      title: \"Time\"\n    },\n    vAxis: {\n      title: \"Amount(SAR)\"\n    },\n    series: {// 0: { curveType: \"function\", axis: 'Temps' },\n      // 1: { curveType: \"function\", axis: 'Daylight' },\n    }\n  });\n  useEffect(() => {// getAllOrders();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-fluid p-0\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label\",\n            children: \"Year\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 510,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group mb-3\",\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              value: hourlySalesSelectedYear,\n              onChange: e => {\n                if (!e.target.value) {\n                  return;\n                }\n\n                hourlySalesSelectedYear = parseInt(e.target.value);\n                setHourlySalesSelectedYear(parseInt(e.target.value));\n                makeHourlySalesData();\n              },\n              className: \"form-control\",\n              children: yearOptions.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: option.value,\n                children: option.label\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 526,\n                columnNumber: 37\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 513,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 512,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 509,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label\",\n            children: \"Month\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 533,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group mb-3\",\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              value: hourlySalesSelectedMonth,\n              onChange: e => {\n                if (!e.target.value) {\n                  return;\n                }\n\n                hourlySalesSelectedMonth = parseInt(e.target.value);\n                setHourlySalesSelectedMonth(parseInt(e.target.value));\n                makeDateOptions();\n                makeHourlySalesData();\n              },\n              className: \"form-control\",\n              children: monthOptions.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: option.value,\n                children: option.label\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 551,\n                columnNumber: 37\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 536,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 535,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 532,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label\",\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 559,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group mb-3\",\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              value: hourlySalesSelectedDate,\n              onChange: e => {\n                if (!e.target.value) {\n                  return;\n                }\n\n                hourlySalesSelectedDate = parseInt(e.target.value);\n                setHourlySalesSelectedDate(parseInt(e.target.value));\n                makeHourlySalesData();\n              },\n              className: \"form-control\",\n              children: dateOptions.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: option.value,\n                children: option.label\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 575,\n                columnNumber: 37\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 562,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 561,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 558,\n          columnNumber: 21\n        }, this), hourlySales && hourlySales.length > 0 ? /*#__PURE__*/_jsxDEV(Chart, {\n          chartType: \"LineChart\",\n          width: \"100%\",\n          height: \"400px\",\n          data: hourlySales,\n          options: options\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 582,\n          columnNumber: 62\n        }, this) : \"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 507,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 506,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}, \"pG3YAHwcE1sFi6jqqNWKB9eb5TQ=\", false, function () {\n  return [useImperativeHandle];\n}));\n_c2 = HourlySales;\nexport default HourlySales;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"HourlySales$forwardRef\");\n$RefreshReg$(_c2, \"HourlySales\");","map":{"version":3,"sources":["/Users/sirin/go/src/github.com/sirinibin/reactjs-pos/src/analytics/sales/hourlySales.js"],"names":["React","useState","useEffect","useRef","forwardRef","useImperativeHandle","Cookies","Chart","HourlySales","props","ref","cookies","init","makeDateOptions","allOrders","length","makeHourlySalesData","yearOptions","setYearOptions","label","value","monthOptions","setMonthOptions","dateOptions","setDateOptions","hourlySales","setHourlySales","hourlySalesSelectedDate","setHourlySalesSelectedDate","Date","getDate","hourlySalesSelectedMonth","setHourlySalesSelectedMonth","getMonth","hourlySalesSelectedYear","setHourlySalesSelectedYear","getFullYear","daysInMonth","month","year","days","options","i","push","columns","type","sales","salesProfit","paidSales","unpaidSales","expense","purchase","salesReturn","salesReturnProfit","salesReturnLoss","purchaseReturn","loss","data","sale","date","row","parseFloat","net_total","toFixed","net_profit","payment_status","undefined","allExpenses","amount","allPurchases","allSalesReturns","allPurchaseReturns","setOptions","title","subtitle","legend","position","hAxis","vAxis","series","e","target","parseInt","map","option"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, forwardRef, useImperativeHandle } from \"react\";\nimport Cookies from \"universal-cookie\";\nimport { Chart } from \"react-google-charts\";\n\n\n\nconst HourlySales = forwardRef((props, ref) => {\n    const cookies = new Cookies();\n    useImperativeHandle(ref, () => ({\n        init() {\n            makeDateOptions();\n            if (props.allOrders.length > 0) {\n                makeHourlySalesData();\n            }\n        }\n    }));\n\n    const [yearOptions, setYearOptions] = useState([\n        {\n            label: \"2023\",\n            value: 2023,\n        },\n        {\n            label: \"2022\",\n            value: 2022,\n        },\n        {\n            label: \"2021\",\n            value: 2021,\n        },\n        {\n            label: \"2020\",\n            value: 2020,\n        }\n    ]);\n    const [monthOptions, setMonthOptions] = useState([\n        {\n            label: \"JAN\",\n            value: 1,\n        },\n        {\n            label: \"FEB\",\n            value: 2,\n        },\n        {\n            label: \"MAR\",\n            value: 3,\n        },\n        {\n            label: \"APR\",\n            value: 4,\n        },\n        {\n            label: \"MAY\",\n            value: 5,\n        },\n        {\n            label: \"JUN\",\n            value: 6,\n        },\n        {\n            label: \"JULY\",\n            value: 7,\n        },\n        {\n            label: \"AUG\",\n            value: 8,\n        },\n        {\n            label: \"SEP\",\n            value: 9,\n        },\n        {\n            label: \"OCT\",\n            value: 10,\n        },\n        {\n            label: \"NOV\",\n            value: 11,\n        },\n        {\n            label: \"DEC\",\n            value: 12,\n        },\n    ]);\n\n    let [dateOptions, setDateOptions] = useState([]);\n\n\n\n    let [hourlySales, setHourlySales] = useState([]);\n    let [hourlySalesSelectedDate, setHourlySalesSelectedDate] = useState(new Date().getDate());\n    let [hourlySalesSelectedMonth, setHourlySalesSelectedMonth] = useState(new Date().getMonth() + 1);\n    let [hourlySalesSelectedYear, setHourlySalesSelectedYear] = useState(new Date().getFullYear());\n\n\n    function daysInMonth(month, year) {\n        return new Date(year, month, 0).getDate();\n    }\n\n    function makeDateOptions() {\n        let days = daysInMonth(hourlySalesSelectedMonth, hourlySalesSelectedYear);\n        let options = [];\n        for (let i = 1; i <= days; i++) {\n            options.push({\n                label: i,\n                value: i,\n            });\n        }\n\n        dateOptions = options;\n        setDateOptions(options);\n    }\n\n    function makeHourlySalesData() {\n        let columns = [\n            { type: \"datetime\", label: \"Time\" }\n        ];\n        if (props.columns.sales) {\n            columns.push({ type: \"number\", label: \"Sales\" });\n        }\n\n        if (props.columns.salesProfit) {\n            columns.push({ type: \"number\", label: \"Sales Profit\" });\n        }\n\n        if (props.columns.paidSales) {\n            columns.push({ type: \"number\", label: \"Paid Sales\" });\n        }\n\n        if (props.columns.unpaidSales) {\n            columns.push({ type: \"number\", label: \"UnPaid Sales\" });\n        }\n\n        if (props.columns.expense) {\n            columns.push({ type: \"number\", label: \"Expense\" });\n        }\n\n        if (props.columns.purchase) {\n            columns.push({ type: \"number\", label: \"Purchase\" });\n        }\n\n        if (props.columns.salesReturn) {\n            columns.push({ type: \"number\", label: \"Sales Return\" });\n        }\n\n        if (props.columns.salesReturnProfit) {\n            columns.push({ type: \"number\", label: \"Sales Return profit\" });\n        }\n\n        if (props.columns.salesReturnLoss) {\n            columns.push({ type: \"number\", label: \"Sales Return Loss\" });\n        }\n\n        if (props.columns.purchaseReturn) {\n            columns.push({ type: \"number\", label: \"Purchase Return\" });\n        }\n\n        if (props.columns.loss) {\n            columns.push({ type: \"number\", label: \"Sales Loss\" });\n        }\n\n        let data = [];\n\n\n        if (columns.length > 1) {\n            data.push(columns)\n        }\n\n\n\n        if (props.columns.sales || props.columns.salesProfit || props.columns.loss||props.columns.paidSales||props.columns.unpaidSales) {\n            for (const sale of props.allOrders) {\n                // console.log(\"Sale Month:\", new Date(sale.date).getMonth() + 1);\n                // console.log(\"Sale Year:\", new Date(sale.date).getFullYear());\n                if ((new Date(sale.date).getMonth() + 1) == hourlySalesSelectedMonth\n                    && new Date(sale.date).getFullYear() == hourlySalesSelectedYear\n                    && new Date(sale.date).getDate() == hourlySalesSelectedDate\n                    // && new Date(sale.date).getHours() == hour\n                ) {\n\n\n                    let row = [new Date(sale.date)];\n\n                    if (props.columns.sales) {\n                        row.push(parseFloat(sale.net_total.toFixed(2)));\n                    }\n\n                    if (props.columns.salesProfit) {\n                        row.push(parseFloat(sale.net_profit.toFixed(2)));\n                    }\n\n                    if (props.columns.paidSales) {\n                        if(sale.payment_status==\"paid\"){\n                            row.push(parseFloat(sale.net_total.toFixed(2)));\n                        }else {\n                            row.push(0.00);\n                        }\n                    }\n\n                    if (props.columns.unpaidSales) {\n                        if(sale.payment_status==\"not_paid\"){\n                            row.push(parseFloat(sale.net_total.toFixed(2)));\n                        }else {\n                            row.push(0.00);\n                        }\n                    }    \n\n                    if (props.columns.expense) {\n                        row.push(undefined);\n                    }\n\n                    if (props.columns.purchase) {\n                        row.push(undefined);\n                    }\n\n                    if (props.columns.salesReturn) {\n                        row.push(undefined);\n                    }\n\n                    if (props.columns.salesReturnProfit) {\n                        row.push(undefined);\n                    }\n\n                    if (props.columns.salesReturnLoss) {\n                        row.push(undefined);\n                    }\n\n                    if (props.columns.purchaseReturn) {\n                        row.push(undefined);\n                    }\n\n                    if (props.columns.loss) {\n                        row.push(parseFloat(sale.loss.toFixed(2)));\n                    }\n\n                    data.push(row);\n                }\n            }\n        }\n\n        if (props.columns.expense) {\n            for (const expense of props.allExpenses) {\n                if ((new Date(expense.date).getMonth() + 1) == hourlySalesSelectedMonth\n                    && new Date(expense.date).getFullYear() == hourlySalesSelectedYear\n                    && new Date(expense.date).getDate() == hourlySalesSelectedDate\n                ) {\n\n                    let row = [new Date(expense.date)];\n\n                    if (props.columns.sales) {\n                        row.push(undefined);\n                    }\n\n                    if (props.columns.salesProfit) {\n                        row.push(undefined);\n                    }\n\n                    if (props.columns.sales) {\n                        row.push(undefined);\n                    }\n\n                    if (props.columns.salesProfit) {\n                        row.push(undefined);\n                    }\n                    \n                    if (props.columns.expense) {\n                        row.push(parseFloat(expense.amount.toFixed(2)));\n                    }\n\n                    if (props.columns.purchase) {\n                        row.push(undefined);\n                    }\n\n                    if (props.columns.salesReturn) {\n                        row.push(undefined);\n                    }\n\n                    if (props.columns.salesReturnProfit) {\n                        row.push(undefined);\n                    }\n\n                    if (props.columns.salesReturnLoss) {\n                        row.push(undefined);\n                    }\n\n                    if (props.columns.purchaseReturn) {\n                        row.push(undefined);\n                    }\n\n                    if (props.columns.loss) {\n                        row.push(undefined);\n                    }\n\n                    data.push(row);\n                }\n            }\n        }\n\n        if (props.columns.purchase) {\n            for (const purchase of props.allPurchases) {\n                if ((new Date(purchase.date).getMonth() + 1) == hourlySalesSelectedMonth\n                    && new Date(purchase.date).getFullYear() == hourlySalesSelectedYear\n                    && new Date(purchase.date).getDate() == hourlySalesSelectedDate\n                ) {\n                    let row = [new Date(purchase.date)];\n\n                    if (props.columns.sales) {\n                        row.push(undefined);\n                    }\n\n                    if (props.columns.salesProfit) {\n                        row.push(undefined);\n                    }\n\n                    if (props.columns.sales) {\n                        row.push(undefined);\n                    }\n\n                    if (props.columns.salesProfit) {\n                        row.push(undefined);\n                    }\n\n                    if (props.columns.expense) {\n                        row.push(undefined);\n                    }\n\n                    if (props.columns.purchase) {\n                        row.push(parseFloat(purchase.net_total.toFixed(2)));\n                    }\n\n                    if (props.columns.salesReturn) {\n                        row.push(undefined);\n                    }\n\n                    if (props.columns.salesReturnProfit) {\n                        row.push(undefined);\n                    }\n\n                    if (props.columns.salesReturnLoss) {\n                        row.push(undefined);\n                    }\n\n                    if (props.columns.purchaseReturn) {\n                        row.push(undefined);\n                    }\n\n                    if (props.columns.loss) {\n                        row.push(undefined);\n                    }\n\n                    data.push(row);\n                }\n            }\n        }\n\n        if (props.columns.salesReturn || props.columns.salesReturnProfit || props.columns.salesReturnLoss) {\n            for (const salesReturn of props.allSalesReturns) {\n                if ((new Date(salesReturn.date).getMonth() + 1) == hourlySalesSelectedMonth\n                    && new Date(salesReturn.date).getFullYear() == hourlySalesSelectedYear\n                    && new Date(salesReturn.date).getDate() == hourlySalesSelectedDate\n                ) {\n\n                    let row = [new Date(salesReturn.date)];\n\n                    if (props.columns.sales) {\n                        row.push(undefined);\n                    }\n\n                    if (props.columns.salesProfit) {\n                        row.push(undefined);\n                    }\n\n                    if (props.columns.sales) {\n                        row.push(undefined);\n                    }\n\n                    if (props.columns.salesProfit) {\n                        row.push(undefined);\n                    }\n\n                    if (props.columns.expense) {\n                        row.push(undefined);\n                    }\n\n                    if (props.columns.purchase) {\n                        row.push(undefined);\n                    }\n\n                    if (props.columns.salesReturn) {\n                        row.push(parseFloat(salesReturn.net_total.toFixed(2)));\n                    }\n\n                    if (props.columns.salesReturnProfit) {\n                        row.push(parseFloat(salesReturn.net_profit.toFixed(2)));\n                    }\n\n                    if (props.columns.salesReturnLoss) {\n                        row.push(parseFloat(salesReturn.loss.toFixed(2)));\n                    }\n\n                    if (props.columns.purchaseReturn) {\n                        row.push(undefined);\n                    }\n\n                    if (props.columns.loss) {\n                        row.push(undefined);\n                    }\n\n                    data.push(row);\n                }\n            }\n        }\n\n        if (props.columns.purchaseReturn) {\n            for (const purchaseReturn of props.allPurchaseReturns) {\n                if ((new Date(purchaseReturn.date).getMonth() + 1) == hourlySalesSelectedMonth\n                    && new Date(purchaseReturn.date).getFullYear() == hourlySalesSelectedYear\n                    && new Date(purchaseReturn.date).getDate() == hourlySalesSelectedDate\n                ) {\n\n                    let row = [new Date(purchaseReturn.date)];\n\n                    if (props.columns.sales) {\n                        row.push(undefined);\n                    }\n\n                    if (props.columns.salesProfit) {\n                        row.push(undefined);\n                    }\n\n                    if (props.columns.sales) {\n                        row.push(undefined);\n                    }\n\n                    if (props.columns.salesProfit) {\n                        row.push(undefined);\n                    }\n\n                    if (props.columns.expense) {\n                        row.push(undefined);\n                    }\n\n                    if (props.columns.purchase) {\n                        row.push(undefined);\n                    }\n\n                    if (props.columns.salesReturn) {\n                        row.push(undefined);\n                    }\n\n                    if (props.columns.salesReturnProfit) {\n                        row.push(undefined);\n                    }\n\n                    if (props.columns.salesReturnLoss) {\n                        row.push(undefined);\n                    }\n\n                    if (props.columns.purchaseReturn) {\n                        row.push(parseFloat(purchaseReturn.net_total.toFixed(2)));\n                    }\n\n                    if (props.columns.loss) {\n                        row.push(undefined);\n                    }\n\n                    data.push(row);\n                }\n            }\n        }\n\n\n        hourlySales = data;\n        setHourlySales(data);\n    }\n\n    const [options, setOptions] = useState({\n        title: '',\n        subtitle: '(SAR)',\n        legend: { position: 'right' },\n        hAxis: {\n            title: \"Time\",\n        },\n        vAxis: {\n            title: \"Amount(SAR)\",\n        },\n        series: {\n            // 0: { curveType: \"function\", axis: 'Temps' },\n            // 1: { curveType: \"function\", axis: 'Daylight' },\n        },\n    });\n\n\n\n\n\n    useEffect(() => {\n        // getAllOrders();\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return (\n        <>\n            <div className=\"container-fluid p-0\">\n                <div className=\"row\">\n\n                    <div className=\"col-md-2\">\n                        <label className=\"form-label\">Year</label>\n\n                        <div className=\"input-group mb-3\">\n                            <select\n                                value={hourlySalesSelectedYear}\n                                onChange={(e) => {\n                                    if (!e.target.value) {\n                                        return;\n                                    }\n                                    hourlySalesSelectedYear = parseInt(e.target.value);\n                                    setHourlySalesSelectedYear(parseInt(e.target.value));\n                                    makeHourlySalesData();\n                                }}\n                                className=\"form-control\"\n                            >\n                                {yearOptions.map((option) => (\n                                    <option value={option.value}>{option.label}</option>\n                                ))}\n                            </select>\n                        </div>\n                    </div>\n\n                    <div className=\"col-md-2\">\n                        <label className=\"form-label\">Month</label>\n\n                        <div className=\"input-group mb-3\">\n                            <select\n                                value={hourlySalesSelectedMonth}\n                                onChange={(e) => {\n                                    if (!e.target.value) {\n                                        return;\n                                    }\n\n                                    hourlySalesSelectedMonth = parseInt(e.target.value);\n                                    setHourlySalesSelectedMonth(parseInt(e.target.value));\n                                    makeDateOptions();\n                                    makeHourlySalesData();\n                                }}\n                                className=\"form-control\"\n                            >\n                                {monthOptions.map((option) => (\n                                    <option value={option.value}>{option.label}</option>\n                                ))}\n\n                            </select>\n                        </div>\n                    </div>\n\n                    <div className=\"col-md-2\">\n                        <label className=\"form-label\">Date</label>\n\n                        <div className=\"input-group mb-3\">\n                            <select\n                                value={hourlySalesSelectedDate}\n                                onChange={(e) => {\n                                    if (!e.target.value) {\n                                        return;\n                                    }\n                                    hourlySalesSelectedDate = parseInt(e.target.value);\n                                    setHourlySalesSelectedDate(parseInt(e.target.value));\n                                    makeHourlySalesData();\n                                }}\n                                className=\"form-control\"\n                            >\n                                {dateOptions.map((option) => (\n                                    <option value={option.value}>{option.label}</option>\n                                ))}\n\n                            </select>\n                        </div>\n                    </div>\n\n                    {hourlySales && hourlySales.length > 0 ? <Chart\n                        chartType=\"LineChart\"\n                        width=\"100%\"\n                        height=\"400px\"\n                        data={hourlySales}\n                        options={options}\n                    /> : \"\"}\n                </div>\n            </div>\n        </>\n    );\n});\n\nexport default HourlySales;\n"]},"metadata":{},"sourceType":"module"}