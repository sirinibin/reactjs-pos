{"ast":null,"code":"var _jsxFileName = \"/Users/sirin/go/src/github.com/sirinibin/reactjs-pos/src/analytics/sales/monthlySales.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, forwardRef, useImperativeHandle } from \"react\";\nimport Cookies from \"universal-cookie\";\nimport { Chart } from \"react-google-charts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MonthlySales = /*#__PURE__*/forwardRef(_c = _s((props, ref) => {\n  _s();\n\n  const cookies = new Cookies();\n  useImperativeHandle(ref, () => ({\n    init() {\n      if (props.allOrders.length > 0) {\n        makeMonthlySalesData();\n      }\n    }\n\n  }));\n  const [yearOptions, setYearOptions] = useState([{\n    label: \"2023\",\n    value: 2023\n  }, {\n    label: \"2022\",\n    value: 2022\n  }, {\n    label: \"2021\",\n    value: 2021\n  }, {\n    label: \"2020\",\n    value: 2020\n  }]);\n  const [monthOptions, setMonthOptions] = useState([{\n    label: \"JAN\",\n    value: 1\n  }, {\n    label: \"FEB\",\n    value: 2\n  }, {\n    label: \"MAR\",\n    value: 3\n  }, {\n    label: \"APR\",\n    value: 4\n  }, {\n    label: \"MAY\",\n    value: 5\n  }, {\n    label: \"JUN\",\n    value: 6\n  }, {\n    label: \"JULY\",\n    value: 7\n  }, {\n    label: \"AUG\",\n    value: 8\n  }, {\n    label: \"SEP\",\n    value: 9\n  }, {\n    label: \"OCT\",\n    value: 10\n  }, {\n    label: \"NOV\",\n    value: 11\n  }, {\n    label: \"DEC\",\n    value: 12\n  }]);\n\n  function getMonthNameByNumber(number) {\n    for (const month of monthOptions) {\n      if (month.value == number) {\n        return month.label;\n      }\n    }\n  }\n\n  let [monthlySales, setMonthlySales] = useState([]);\n  let [monthlySalesSelectedYear, setMonthlySalesSelectedYear] = useState(new Date().getFullYear());\n\n  function makeMonthlySalesData() {\n    let columns = [{\n      type: \"string\",\n      label: \"Month\"\n    }];\n\n    if (props.columns.sales) {\n      columns.push({\n        type: \"number\",\n        label: \"Sales\"\n      });\n    }\n\n    if (props.columns.salesProfit) {\n      columns.push({\n        type: \"number\",\n        label: \"Sales Profit\"\n      });\n    }\n\n    if (props.columns.paidSales) {\n      columns.push({\n        type: \"number\",\n        label: \"Paid Sales\"\n      });\n    }\n\n    if (props.columns.unpaidSales) {\n      columns.push({\n        type: \"number\",\n        label: \"UnPaid Sales\"\n      });\n    }\n\n    if (props.columns.expense) {\n      columns.push({\n        type: \"number\",\n        label: \"Expense\"\n      });\n    }\n\n    if (props.columns.purchase) {\n      columns.push({\n        type: \"number\",\n        label: \"Purchase\"\n      });\n    }\n\n    if (props.columns.salesReturn) {\n      columns.push({\n        type: \"number\",\n        label: \"Sales Return\"\n      });\n    }\n\n    if (props.columns.salesReturnProfit) {\n      columns.push({\n        type: \"number\",\n        label: \"Sales Return Profit\"\n      });\n    }\n\n    if (props.columns.salesReturnLoss) {\n      columns.push({\n        type: \"number\",\n        label: \"Sales Return Loss\"\n      });\n    }\n\n    if (props.columns.purchaseReturn) {\n      columns.push({\n        type: \"number\",\n        label: \"Purchase Return\"\n      });\n    }\n\n    if (props.columns.loss) {\n      columns.push({\n        type: \"number\",\n        label: \"Loss\"\n      });\n    }\n\n    let data = [];\n\n    if (columns.length > 1) {\n      data.push(columns);\n    }\n\n    console.log(\"selectedYear:\", monthlySalesSelectedYear);\n    let lastMonth = 12;\n\n    for (let month = 1; month <= lastMonth; month++) {\n      let sales = 0.00;\n      let profit = 0.00;\n      let paidSales = 0.00;\n      let unpaidSales = 0.00;\n      let loss = 0.00;\n\n      if (props.columns.sales || props.columns.salesProfit || props.columns.loss || props.columns.paidSales || props.columns.unpaidSales) {\n        for (const sale of props.allOrders) {\n          // console.log(\"Sale Month:\", new Date(sale.date).getMonth() + 1);\n          // console.log(\"Sale Year:\", new Date(sale.date).getFullYear());\n          if (new Date(sale.date).getMonth() + 1 == month && new Date(sale.date).getFullYear() == monthlySalesSelectedYear) {\n            sales += parseFloat(sale.net_total);\n            profit += parseFloat(sale.net_profit);\n            paidSales += parseFloat(sale.total_payment_received);\n            unpaidSales += parseFloat(sale.balance_amount);\n            /*\n            if(sale.payment_status==\"paid\"){\n                paidSales += parseFloat(sale.net_total);\n            }else if(sale.payment_status==\"not_paid\"){\n                unpaidSales += parseFloat(sale.net_total);\n            }\n            */\n\n            loss += parseFloat(sale.loss);\n          }\n        }\n      }\n\n      let totalExpense = 0.00;\n\n      if (props.columns.expense) {\n        for (const expense of props.allExpenses) {\n          // console.log(\"Sale Month:\", new Date(sale.date).getMonth() + 1);\n          // console.log(\"Sale Year:\", new Date(sale.date).getFullYear());\n          if (new Date(expense.date).getMonth() + 1 == month && new Date(expense.date).getFullYear() == monthlySalesSelectedYear) {\n            totalExpense += parseFloat(expense.amount);\n          }\n        }\n      }\n\n      let totalPurchase = 0.00;\n\n      if (props.columns.purchase) {\n        for (const purchase of props.allPurchases) {\n          if (new Date(purchase.date).getMonth() + 1 == month && new Date(purchase.date).getFullYear() == monthlySalesSelectedYear) {\n            totalPurchase += parseFloat(purchase.net_total);\n          }\n        }\n      }\n\n      let totalSalesReturn = 0.00;\n      let totalSalesReturnProfit = 0.00;\n      let totalSalesReturnLoss = 0.00;\n\n      if (props.columns.salesReturn || props.columns.salesReturnProfit || props.columns.salesReturnLoss) {\n        for (const salesReturn of props.allSalesReturns) {\n          if (new Date(salesReturn.date).getMonth() + 1 == month && new Date(salesReturn.date).getFullYear() == monthlySalesSelectedYear) {\n            totalSalesReturn += parseFloat(salesReturn.net_total);\n            totalSalesReturnProfit += parseFloat(salesReturn.net_profit);\n            totalSalesReturnLoss += parseFloat(salesReturn.loss);\n          }\n        }\n      }\n\n      let totalPurchaseReturn = 0.00;\n\n      if (props.columns.purchaseReturn) {\n        for (const purchaseReturn of props.allPurchaseReturns) {\n          if (new Date(purchaseReturn.date).getMonth() + 1 == month && new Date(purchaseReturn.date).getFullYear() == monthlySalesSelectedYear) {\n            totalPurchaseReturn += parseFloat(purchaseReturn.net_total);\n          }\n        }\n      }\n\n      let row = [getMonthNameByNumber(month)];\n\n      if (props.columns.sales) {\n        row.push(parseFloat(sales.toFixed(2)));\n      }\n\n      if (props.columns.salesProfit) {\n        row.push(parseFloat(profit.toFixed(2)));\n      }\n\n      if (props.columns.paidSales) {\n        row.push(parseFloat(paidSales.toFixed(2)));\n      }\n\n      if (props.columns.unpaidSales) {\n        row.push(parseFloat(unpaidSales.toFixed(2)));\n      }\n\n      if (props.columns.expense) {\n        row.push(parseFloat(totalExpense.toFixed(2)));\n      }\n\n      if (props.columns.purchase) {\n        row.push(parseFloat(totalPurchase.toFixed(2)));\n      }\n\n      if (props.columns.salesReturn) {\n        row.push(parseFloat(totalSalesReturn.toFixed(2)));\n      }\n\n      if (props.columns.salesReturnProfit) {\n        row.push(parseFloat(totalSalesReturnProfit.toFixed(2)));\n      }\n\n      if (props.columns.salesReturnLoss) {\n        row.push(parseFloat(totalSalesReturnLoss.toFixed(2)));\n      }\n\n      if (props.columns.purchaseReturn) {\n        row.push(parseFloat(totalPurchaseReturn.toFixed(2)));\n      }\n\n      if (props.columns.loss) {\n        row.push(parseFloat(loss.toFixed(2)));\n      }\n\n      if (row.length > 1) {\n        data.push(row);\n      }\n    }\n\n    monthlySales = data;\n    setMonthlySales(data); //setMonthlySales(data);\n  }\n\n  const [options, setOptions] = useState({\n    title: 'Sales',\n    subtitle: '(SAR)',\n    legend: {\n      position: 'right'\n    },\n    hAxis: {\n      title: \"Month\"\n    },\n    vAxis: {\n      title: \"Amount(SAR)\"\n    },\n    series: {// 0: { curveType: \"function\", axis: 'Temps' },\n      // 1: { curveType: \"function\", axis: 'Daylight' },\n    }\n  });\n  useEffect(() => {// getAllOrders();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-fluid p-0\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label\",\n            children: \"Year\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group mb-3\",\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              value: monthlySalesSelectedYear,\n              onChange: e => {\n                if (!e.target.value) {\n                  return;\n                }\n\n                monthlySalesSelectedYear = parseInt(e.target.value);\n                setMonthlySalesSelectedYear(parseInt(e.target.value));\n                makeMonthlySalesData();\n              },\n              className: \"form-control\",\n              children: yearOptions.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: option.value,\n                children: option.label\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 340,\n                columnNumber: 37\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 327,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 21\n        }, this), monthlySales && monthlySales.length > 0 ? /*#__PURE__*/_jsxDEV(Chart, {\n          chartType: \"LineChart\",\n          width: \"100%\",\n          height: \"400px\",\n          data: monthlySales,\n          options: options\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 64\n        }, this) : \"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}, \"BmOQ55IFzcpWPy8Bbh+br0VyLKM=\", false, function () {\n  return [useImperativeHandle];\n}));\n_c2 = MonthlySales;\nexport default MonthlySales;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MonthlySales$forwardRef\");\n$RefreshReg$(_c2, \"MonthlySales\");","map":{"version":3,"sources":["/Users/sirin/go/src/github.com/sirinibin/reactjs-pos/src/analytics/sales/monthlySales.js"],"names":["React","useState","useEffect","useRef","forwardRef","useImperativeHandle","Cookies","Chart","MonthlySales","props","ref","cookies","init","allOrders","length","makeMonthlySalesData","yearOptions","setYearOptions","label","value","monthOptions","setMonthOptions","getMonthNameByNumber","number","month","monthlySales","setMonthlySales","monthlySalesSelectedYear","setMonthlySalesSelectedYear","Date","getFullYear","columns","type","sales","push","salesProfit","paidSales","unpaidSales","expense","purchase","salesReturn","salesReturnProfit","salesReturnLoss","purchaseReturn","loss","data","console","log","lastMonth","profit","sale","date","getMonth","parseFloat","net_total","net_profit","total_payment_received","balance_amount","totalExpense","allExpenses","amount","totalPurchase","allPurchases","totalSalesReturn","totalSalesReturnProfit","totalSalesReturnLoss","allSalesReturns","totalPurchaseReturn","allPurchaseReturns","row","toFixed","options","setOptions","title","subtitle","legend","position","hAxis","vAxis","series","e","target","parseInt","map","option"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, forwardRef, useImperativeHandle } from \"react\";\nimport Cookies from \"universal-cookie\";\nimport { Chart } from \"react-google-charts\";\n\n\n\nconst MonthlySales = forwardRef((props, ref) => {\n    const cookies = new Cookies();\n    useImperativeHandle(ref, () => ({\n        init() {\n            if (props.allOrders.length > 0) {\n                makeMonthlySalesData();\n            }\n        }\n    }));\n\n    const [yearOptions, setYearOptions] = useState([\n        {\n            label: \"2023\",\n            value: 2023,\n        },\n        {\n            label: \"2022\",\n            value: 2022,\n        },\n        {\n            label: \"2021\",\n            value: 2021,\n        },\n        {\n            label: \"2020\",\n            value: 2020,\n        }\n    ]);\n\n    const [monthOptions, setMonthOptions] = useState([\n        {\n            label: \"JAN\",\n            value: 1,\n        },\n        {\n            label: \"FEB\",\n            value: 2,\n        },\n        {\n            label: \"MAR\",\n            value: 3,\n        },\n        {\n            label: \"APR\",\n            value: 4,\n        },\n        {\n            label: \"MAY\",\n            value: 5,\n        },\n        {\n            label: \"JUN\",\n            value: 6,\n        },\n        {\n            label: \"JULY\",\n            value: 7,\n        },\n        {\n            label: \"AUG\",\n            value: 8,\n        },\n        {\n            label: \"SEP\",\n            value: 9,\n        },\n        {\n            label: \"OCT\",\n            value: 10,\n        },\n        {\n            label: \"NOV\",\n            value: 11,\n        },\n        {\n            label: \"DEC\",\n            value: 12,\n        },\n    ]);\n\n    function getMonthNameByNumber(number) {\n        for (const month of monthOptions) {\n            if (month.value == number) {\n                return month.label;\n            }\n        }\n    }\n\n\n\n    let [monthlySales, setMonthlySales] = useState([]);\n    let [monthlySalesSelectedYear, setMonthlySalesSelectedYear] = useState(new Date().getFullYear());\n\n\n    function makeMonthlySalesData() {\n        let columns = [\n            { type: \"string\", label: \"Month\" }\n        ];\n        if (props.columns.sales) {\n            columns.push({ type: \"number\", label: \"Sales\" });\n        }\n\n        if (props.columns.salesProfit) {\n            columns.push({ type: \"number\", label: \"Sales Profit\" });\n        }\n\n        if (props.columns.paidSales) {\n            columns.push({ type: \"number\", label: \"Paid Sales\" });\n        }\n\n        if (props.columns.unpaidSales) {\n            columns.push({ type: \"number\", label: \"UnPaid Sales\" });\n        }\n\n        if (props.columns.expense) {\n            columns.push({ type: \"number\", label: \"Expense\" });\n        }\n\n        if (props.columns.purchase) {\n            columns.push({ type: \"number\", label: \"Purchase\" });\n        }\n\n        if (props.columns.salesReturn) {\n            columns.push({ type: \"number\", label: \"Sales Return\" });\n        }\n\n        if (props.columns.salesReturnProfit) {\n            columns.push({ type: \"number\", label: \"Sales Return Profit\" });\n        }\n\n        if (props.columns.salesReturnLoss) {\n            columns.push({ type: \"number\", label: \"Sales Return Loss\" });\n        }\n\n        if (props.columns.purchaseReturn) {\n            columns.push({ type: \"number\", label: \"Purchase Return\" });\n        }\n\n        if (props.columns.loss) {\n            columns.push({ type: \"number\", label: \"Loss\" });\n        }\n\n        let data = [];\n\n\n        if (columns.length > 1) {\n            data.push(columns)\n        }\n\n        console.log(\"selectedYear:\", monthlySalesSelectedYear);\n        let lastMonth = 12;\n\n        for (let month = 1; month <= lastMonth; month++) {\n\n            let sales = 0.00;\n            let profit = 0.00;\n            let paidSales = 0.00;\n            let unpaidSales = 0.00;\n            let loss = 0.00;\n            if (props.columns.sales || props.columns.salesProfit || props.columns.loss||props.columns.paidSales||props.columns.unpaidSales) {\n                for (const sale of props.allOrders) {\n                    // console.log(\"Sale Month:\", new Date(sale.date).getMonth() + 1);\n                    // console.log(\"Sale Year:\", new Date(sale.date).getFullYear());\n                    if ((new Date(sale.date).getMonth() + 1) == month && new Date(sale.date).getFullYear() == monthlySalesSelectedYear) {\n                        sales += parseFloat(sale.net_total);\n                        profit += parseFloat(sale.net_profit);\n\n                        paidSales += parseFloat(sale.total_payment_received);\n                        unpaidSales += parseFloat(sale.balance_amount);\n                        /*\n                        if(sale.payment_status==\"paid\"){\n                            paidSales += parseFloat(sale.net_total);\n                        }else if(sale.payment_status==\"not_paid\"){\n                            unpaidSales += parseFloat(sale.net_total);\n                        }\n                        */\n\n                        loss += parseFloat(sale.loss);\n                    }\n                }\n            }\n\n            let totalExpense = 0.00;\n            if (props.columns.expense) {\n                for (const expense of props.allExpenses) {\n                    // console.log(\"Sale Month:\", new Date(sale.date).getMonth() + 1);\n                    // console.log(\"Sale Year:\", new Date(sale.date).getFullYear());\n                    if ((new Date(expense.date).getMonth() + 1) == month &&\n                        new Date(expense.date).getFullYear() == monthlySalesSelectedYear) {\n                        totalExpense += parseFloat(expense.amount);\n                    }\n                }\n            }\n\n            let totalPurchase = 0.00;\n            if (props.columns.purchase) {\n                for (const purchase of props.allPurchases) {\n                    if ((new Date(purchase.date).getMonth() + 1) == month &&\n                        new Date(purchase.date).getFullYear() == monthlySalesSelectedYear) {\n                        totalPurchase += parseFloat(purchase.net_total);\n                    }\n                }\n            }\n\n            let totalSalesReturn = 0.00;\n            let totalSalesReturnProfit = 0.00;\n            let totalSalesReturnLoss = 0.00;\n            if (props.columns.salesReturn||props.columns.salesReturnProfit||props.columns.salesReturnLoss) {\n                for (const salesReturn of props.allSalesReturns) {\n                    if ((new Date(salesReturn.date).getMonth() + 1) == month &&\n                        new Date(salesReturn.date).getFullYear() == monthlySalesSelectedYear) {\n                        totalSalesReturn += parseFloat(salesReturn.net_total);\n                        totalSalesReturnProfit += parseFloat(salesReturn.net_profit);\n                        totalSalesReturnLoss += parseFloat(salesReturn.loss);\n                    }\n                }\n            }\n\n            let totalPurchaseReturn = 0.00;\n            if (props.columns.purchaseReturn) {\n                for (const purchaseReturn of props.allPurchaseReturns) {\n                    if ((new Date(purchaseReturn.date).getMonth() + 1) == month &&\n                        new Date(purchaseReturn.date).getFullYear() == monthlySalesSelectedYear) {\n                        totalPurchaseReturn += parseFloat(purchaseReturn.net_total);\n                    }\n                }\n            }\n\n\n            let row = [getMonthNameByNumber(month)];\n\n            if (props.columns.sales) {\n                row.push(parseFloat(sales.toFixed(2)));\n            }\n\n            if (props.columns.salesProfit) {\n                row.push(parseFloat(profit.toFixed(2)));\n            }\n\n            if (props.columns.paidSales) {\n                row.push(parseFloat(paidSales.toFixed(2)));\n            }\n\n            if (props.columns.unpaidSales) {\n                row.push(parseFloat(unpaidSales.toFixed(2)));\n            }\n\n            if (props.columns.expense) {\n                row.push(parseFloat(totalExpense.toFixed(2)));\n            }\n\n            if (props.columns.purchase) {\n                row.push(parseFloat(totalPurchase.toFixed(2)));\n            }\n\n            if (props.columns.salesReturn) {\n                row.push(parseFloat(totalSalesReturn.toFixed(2)));\n            }\n\n            if (props.columns.salesReturnProfit) {\n                row.push(parseFloat(totalSalesReturnProfit.toFixed(2)));\n            }\n\n            if (props.columns.salesReturnLoss) {\n                row.push(parseFloat(totalSalesReturnLoss.toFixed(2)));\n            }\n\n            if (props.columns.purchaseReturn) {\n                row.push(parseFloat(totalPurchaseReturn.toFixed(2)));\n            }\n\n            if (props.columns.loss) {\n                row.push(parseFloat(loss.toFixed(2)));\n            }\n\n            if (row.length > 1) {\n                data.push(row);\n            }\n\n        }\n        monthlySales = data;\n        setMonthlySales(data);\n        //setMonthlySales(data);\n    }\n\n\n    const [options, setOptions] = useState({\n        title: 'Sales',\n        subtitle: '(SAR)',\n        legend: { position: 'right' },\n        hAxis: {\n            title: \"Month\",\n        },\n        vAxis: {\n            title: \"Amount(SAR)\",\n        },\n        series: {\n            // 0: { curveType: \"function\", axis: 'Temps' },\n            // 1: { curveType: \"function\", axis: 'Daylight' },\n        },\n    });\n\n\n\n\n\n    useEffect(() => {\n        // getAllOrders();\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return (\n        <>\n            <div className=\"container-fluid p-0\">\n                <div className=\"row\">\n                    <div className=\"col-md-2\">\n                        <label className=\"form-label\">Year</label>\n\n                        <div className=\"input-group mb-3\">\n                            <select\n                                value={monthlySalesSelectedYear}\n                                onChange={(e) => {\n                                    if (!e.target.value) {\n                                        return;\n                                    }\n                                    monthlySalesSelectedYear = parseInt(e.target.value);\n                                    setMonthlySalesSelectedYear(parseInt(e.target.value));\n                                    makeMonthlySalesData();\n                                }}\n                                className=\"form-control\"\n                            >\n                                {yearOptions.map((option) => (\n                                    <option value={option.value}>{option.label}</option>\n                                ))}\n                            </select>\n                        </div>\n                    </div>\n\n\n                    {monthlySales && monthlySales.length > 0 ? <Chart\n                        chartType=\"LineChart\"\n                        width=\"100%\"\n                        height=\"400px\"\n                        data={monthlySales}\n                        options={options}\n                    /> : \"\"}\n                </div>\n            </div>\n        </>\n    );\n});\n\nexport default MonthlySales;\n"]},"metadata":{},"sourceType":"module"}