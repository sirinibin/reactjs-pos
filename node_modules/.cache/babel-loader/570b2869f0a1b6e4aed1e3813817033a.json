{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _constants = require('./constants'); // Match Set functions\n\n\nvar matchSetALength = function matchSetALength(string) {\n  return string.match(new RegExp('^' + _constants.A_CHARS + '*'))[0].length;\n};\n\nvar matchSetBLength = function matchSetBLength(string) {\n  return string.match(new RegExp('^' + _constants.B_CHARS + '*'))[0].length;\n};\n\nvar matchSetC = function matchSetC(string) {\n  return string.match(new RegExp('^' + _constants.C_CHARS + '*'))[0];\n}; // CODE128A or CODE128B\n\n\nfunction autoSelectFromAB(string, isA) {\n  var ranges = isA ? _constants.A_CHARS : _constants.B_CHARS;\n  var untilC = string.match(new RegExp('^(' + ranges + '+?)(([0-9]{2}){2,})([^0-9]|$)'));\n\n  if (untilC) {\n    return untilC[1] + String.fromCharCode(204) + autoSelectFromC(string.substring(untilC[1].length));\n  }\n\n  var chars = string.match(new RegExp('^' + ranges + '+'))[0];\n\n  if (chars.length === string.length) {\n    return string;\n  }\n\n  return chars + String.fromCharCode(isA ? 205 : 206) + autoSelectFromAB(string.substring(chars.length), !isA);\n} // CODE128C\n\n\nfunction autoSelectFromC(string) {\n  var cMatch = matchSetC(string);\n  var length = cMatch.length;\n\n  if (length === string.length) {\n    return string;\n  }\n\n  string = string.substring(length); // Select A/B depending on the longest match\n\n  var isA = matchSetALength(string) >= matchSetBLength(string);\n  return cMatch + String.fromCharCode(isA ? 206 : 205) + autoSelectFromAB(string, isA);\n} // Detect Code Set (A, B or C) and format the string\n\n\nexports.default = function (string) {\n  var newString = void 0;\n  var cLength = matchSetC(string).length; // Select 128C if the string start with enough digits\n\n  if (cLength >= 2) {\n    newString = _constants.C_START_CHAR + autoSelectFromC(string);\n  } else {\n    // Select A/B depending on the longest match\n    var isA = matchSetALength(string) > matchSetBLength(string);\n    newString = (isA ? _constants.A_START_CHAR : _constants.B_START_CHAR) + autoSelectFromAB(string, isA);\n  }\n\n  return newString.replace(/[\\xCD\\xCE]([^])[\\xCD\\xCE]/, // Any sequence between 205 and 206 characters\n  function (match, char) {\n    return String.fromCharCode(203) + char;\n  });\n};","map":{"version":3,"sources":["/Users/sirin/go/src/github.com/sirinibin/reactjs-pos/node_modules/jsbarcode/bin/barcodes/CODE128/auto.js"],"names":["Object","defineProperty","exports","value","_constants","require","matchSetALength","string","match","RegExp","A_CHARS","length","matchSetBLength","B_CHARS","matchSetC","C_CHARS","autoSelectFromAB","isA","ranges","untilC","String","fromCharCode","autoSelectFromC","substring","chars","cMatch","default","newString","cLength","C_START_CHAR","A_START_CHAR","B_START_CHAR","replace","char"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _constants = require('./constants');\n\n// Match Set functions\nvar matchSetALength = function matchSetALength(string) {\n\treturn string.match(new RegExp('^' + _constants.A_CHARS + '*'))[0].length;\n};\nvar matchSetBLength = function matchSetBLength(string) {\n\treturn string.match(new RegExp('^' + _constants.B_CHARS + '*'))[0].length;\n};\nvar matchSetC = function matchSetC(string) {\n\treturn string.match(new RegExp('^' + _constants.C_CHARS + '*'))[0];\n};\n\n// CODE128A or CODE128B\nfunction autoSelectFromAB(string, isA) {\n\tvar ranges = isA ? _constants.A_CHARS : _constants.B_CHARS;\n\tvar untilC = string.match(new RegExp('^(' + ranges + '+?)(([0-9]{2}){2,})([^0-9]|$)'));\n\n\tif (untilC) {\n\t\treturn untilC[1] + String.fromCharCode(204) + autoSelectFromC(string.substring(untilC[1].length));\n\t}\n\n\tvar chars = string.match(new RegExp('^' + ranges + '+'))[0];\n\n\tif (chars.length === string.length) {\n\t\treturn string;\n\t}\n\n\treturn chars + String.fromCharCode(isA ? 205 : 206) + autoSelectFromAB(string.substring(chars.length), !isA);\n}\n\n// CODE128C\nfunction autoSelectFromC(string) {\n\tvar cMatch = matchSetC(string);\n\tvar length = cMatch.length;\n\n\tif (length === string.length) {\n\t\treturn string;\n\t}\n\n\tstring = string.substring(length);\n\n\t// Select A/B depending on the longest match\n\tvar isA = matchSetALength(string) >= matchSetBLength(string);\n\treturn cMatch + String.fromCharCode(isA ? 206 : 205) + autoSelectFromAB(string, isA);\n}\n\n// Detect Code Set (A, B or C) and format the string\n\nexports.default = function (string) {\n\tvar newString = void 0;\n\tvar cLength = matchSetC(string).length;\n\n\t// Select 128C if the string start with enough digits\n\tif (cLength >= 2) {\n\t\tnewString = _constants.C_START_CHAR + autoSelectFromC(string);\n\t} else {\n\t\t// Select A/B depending on the longest match\n\t\tvar isA = matchSetALength(string) > matchSetBLength(string);\n\t\tnewString = (isA ? _constants.A_START_CHAR : _constants.B_START_CHAR) + autoSelectFromAB(string, isA);\n\t}\n\n\treturn newString.replace(/[\\xCD\\xCE]([^])[\\xCD\\xCE]/, // Any sequence between 205 and 206 characters\n\tfunction (match, char) {\n\t\treturn String.fromCharCode(203) + char;\n\t});\n};"]},"metadata":{},"sourceType":"script"}