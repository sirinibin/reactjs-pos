{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = optionsFromStrings; // Convert string to integers/booleans where it should be\n\nfunction optionsFromStrings(options) {\n  var intOptions = [\"width\", \"height\", \"textMargin\", \"fontSize\", \"margin\", \"marginTop\", \"marginBottom\", \"marginLeft\", \"marginRight\"];\n\n  for (var intOption in intOptions) {\n    if (intOptions.hasOwnProperty(intOption)) {\n      intOption = intOptions[intOption];\n\n      if (typeof options[intOption] === \"string\") {\n        options[intOption] = parseInt(options[intOption], 10);\n      }\n    }\n  }\n\n  if (typeof options[\"displayValue\"] === \"string\") {\n    options[\"displayValue\"] = options[\"displayValue\"] != \"false\";\n  }\n\n  return options;\n}","map":{"version":3,"sources":["/Users/sirin/go/src/github.com/sirinibin/reactjs-pos/node_modules/jsbarcode/bin/help/optionsFromStrings.js"],"names":["Object","defineProperty","exports","value","default","optionsFromStrings","options","intOptions","intOption","hasOwnProperty","parseInt"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC5CC,EAAAA,KAAK,EAAE;AADqC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,kBAAlB,C,CAEA;;AAEA,SAASA,kBAAT,CAA4BC,OAA5B,EAAqC;AACpC,MAAIC,UAAU,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,YAApB,EAAkC,UAAlC,EAA8C,QAA9C,EAAwD,WAAxD,EAAqE,cAArE,EAAqF,YAArF,EAAmG,aAAnG,CAAjB;;AAEA,OAAK,IAAIC,SAAT,IAAsBD,UAAtB,EAAkC;AACjC,QAAIA,UAAU,CAACE,cAAX,CAA0BD,SAA1B,CAAJ,EAA0C;AACzCA,MAAAA,SAAS,GAAGD,UAAU,CAACC,SAAD,CAAtB;;AACA,UAAI,OAAOF,OAAO,CAACE,SAAD,CAAd,KAA8B,QAAlC,EAA4C;AAC3CF,QAAAA,OAAO,CAACE,SAAD,CAAP,GAAqBE,QAAQ,CAACJ,OAAO,CAACE,SAAD,CAAR,EAAqB,EAArB,CAA7B;AACA;AACD;AACD;;AAED,MAAI,OAAOF,OAAO,CAAC,cAAD,CAAd,KAAmC,QAAvC,EAAiD;AAChDA,IAAAA,OAAO,CAAC,cAAD,CAAP,GAA0BA,OAAO,CAAC,cAAD,CAAP,IAA2B,OAArD;AACA;;AAED,SAAOA,OAAP;AACA","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = optionsFromStrings;\n\n// Convert string to integers/booleans where it should be\n\nfunction optionsFromStrings(options) {\n\tvar intOptions = [\"width\", \"height\", \"textMargin\", \"fontSize\", \"margin\", \"marginTop\", \"marginBottom\", \"marginLeft\", \"marginRight\"];\n\n\tfor (var intOption in intOptions) {\n\t\tif (intOptions.hasOwnProperty(intOption)) {\n\t\t\tintOption = intOptions[intOption];\n\t\t\tif (typeof options[intOption] === \"string\") {\n\t\t\t\toptions[intOption] = parseInt(options[intOption], 10);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof options[\"displayValue\"] === \"string\") {\n\t\toptions[\"displayValue\"] = options[\"displayValue\"] != \"false\";\n\t}\n\n\treturn options;\n}"]},"metadata":{},"sourceType":"script"}