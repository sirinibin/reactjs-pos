{"ast":null,"code":"var _classCallCheck = require(\"/Users/sirin/go/src/github.com/sirinibin/reactjs-pos/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar EscPosEncoder = require('esc-pos-encoder');\n\nvar StarPrntEncoder = require('star-prnt-encoder');\n/**\n * Create a byte stream based on commands for ESC/POS or StarPRNT printers\n */\n\n\nvar ThermalPrinterEncoder =\n/**\n   * Create a new object\n   *\n   * @param  {object}   options   Object containing configuration options\n   */\nfunction ThermalPrinterEncoder(options) {\n  \"use strict\";\n\n  var _this = this;\n\n  _classCallCheck(this, ThermalPrinterEncoder);\n\n  var languages = {\n    'esc-pos': EscPosEncoder,\n    'star-prnt': StarPrntEncoder\n  };\n\n  if (typeof options === 'undefined' || typeof options.language === 'undefined') {\n    throw new Error('You need to specify the language of the thermal printer');\n  }\n\n  if (typeof languages[options.language] === 'undefined') {\n    throw new Error('Language not supported by this library');\n  }\n\n  this.language = options.language;\n  var source = languages[this.language].prototype;\n  var props = Object.getOwnPropertyNames(source);\n  props.forEach(function (prop) {\n    _this[prop] = source[prop];\n  });\n\n  this._reset(options);\n};\n\nmodule.exports = ThermalPrinterEncoder;","map":{"version":3,"sources":["/Users/sirin/go/src/github.com/sirinibin/reactjs-pos/node_modules/thermal-printer-encoder/src/thermal-printer-encoder.js"],"names":["EscPosEncoder","require","StarPrntEncoder","ThermalPrinterEncoder","options","languages","language","Error","source","prototype","props","Object","getOwnPropertyNames","forEach","prop","_reset","module","exports"],"mappings":";;AAAA,IAAMA,aAAa,GAAGC,OAAO,CAAC,iBAAD,CAA7B;;AACA,IAAMC,eAAe,GAAGD,OAAO,CAAC,mBAAD,CAA/B;AAEA;AACA;AACA;;;IACME,qB;AACJ;AACF;AACA;AACA;AACA;AACE,+BAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AAAA;;AACnB,MAAMC,SAAS,GAAG;AAChB,eAAWL,aADK;AAEhB,iBAAaE;AAFG,GAAlB;;AAKA,MAAI,OAAOE,OAAP,KAAmB,WAAnB,IAAkC,OAAOA,OAAO,CAACE,QAAf,KAA4B,WAAlE,EAA+E;AAC7E,UAAM,IAAIC,KAAJ,CAAU,yDAAV,CAAN;AACD;;AAED,MAAI,OAAOF,SAAS,CAACD,OAAO,CAACE,QAAT,CAAhB,KAAuC,WAA3C,EAAwD;AACtD,UAAM,IAAIC,KAAJ,CAAU,wCAAV,CAAN;AACD;;AAED,OAAKD,QAAL,GAAgBF,OAAO,CAACE,QAAxB;AAEA,MAAME,MAAM,GAAGH,SAAS,CAAC,KAAKC,QAAN,CAAT,CAAyBG,SAAxC;AACA,MAAMC,KAAK,GAAGC,MAAM,CAACC,mBAAP,CAA2BJ,MAA3B,CAAd;AACAE,EAAAA,KAAK,CAACG,OAAN,CAAc,UAACC,IAAD,EAAU;AACtB,IAAA,KAAI,CAACA,IAAD,CAAJ,GAAaN,MAAM,CAACM,IAAD,CAAnB;AACD,GAFD;;AAIA,OAAKC,MAAL,CAAYX,OAAZ;AACD,C;;AAIHY,MAAM,CAACC,OAAP,GAAiBd,qBAAjB","sourcesContent":["const EscPosEncoder = require('esc-pos-encoder');\nconst StarPrntEncoder = require('star-prnt-encoder');\n\n/**\n * Create a byte stream based on commands for ESC/POS or StarPRNT printers\n */\nclass ThermalPrinterEncoder {\n  /**\n     * Create a new object\n     *\n     * @param  {object}   options   Object containing configuration options\n     */\n  constructor(options) {\n    const languages = {\n      'esc-pos': EscPosEncoder,\n      'star-prnt': StarPrntEncoder,\n    };\n\n    if (typeof options === 'undefined' || typeof options.language === 'undefined') {\n      throw new Error('You need to specify the language of the thermal printer');\n    }\n\n    if (typeof languages[options.language] === 'undefined') {\n      throw new Error('Language not supported by this library');\n    }\n\n    this.language = options.language;\n\n    const source = languages[this.language].prototype;\n    const props = Object.getOwnPropertyNames(source);\n    props.forEach((prop) => {\n      this[prop] = source[prop];\n    });\n\n    this._reset(options);\n  }\n}\n\n\nmodule.exports = ThermalPrinterEncoder;\n"]},"metadata":{},"sourceType":"script"}