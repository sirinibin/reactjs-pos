{"ast":null,"code":"var _jsxFileName = \"/Users/sirin/go/src/github.com/sirinibin/reactjs-pos/src/analytics/sales/allSales.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, forwardRef, useImperativeHandle, memo } from \"react\";\nimport { Chart } from \"react-google-charts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AllSales = /*#__PURE__*/forwardRef(_c = _s((props, ref) => {\n  _s();\n\n  useImperativeHandle(ref, () => ({\n    init() {\n      if (props.allOrders.length > 0) {\n        makeAllData();\n      }\n    }\n\n  }));\n  let [allSales, setAllSales] = useState([]);\n\n  function makeAllData() {\n    let columns = [{\n      type: \"datetime\",\n      label: \"Time\"\n    }];\n\n    if (props.columns.sales) {\n      columns.push({\n        type: \"number\",\n        label: \"Sales\"\n      });\n    }\n\n    if (props.columns.salesProfit) {\n      columns.push({\n        type: \"number\",\n        label: \"Sales Profit\"\n      });\n    }\n\n    if (props.columns.paidSales) {\n      columns.push({\n        type: \"number\",\n        label: \"Paid Sales\"\n      });\n    }\n\n    if (props.columns.unpaidSales) {\n      columns.push({\n        type: \"number\",\n        label: \"UnPaid Sales\"\n      });\n    }\n\n    if (props.columns.expense) {\n      columns.push({\n        type: \"number\",\n        label: \"Expense\"\n      });\n    }\n\n    if (props.columns.purchase) {\n      columns.push({\n        type: \"number\",\n        label: \"Purchase\"\n      });\n    }\n\n    if (props.columns.salesReturn) {\n      columns.push({\n        type: \"number\",\n        label: \"Sales Return\"\n      });\n    }\n\n    if (props.columns.salesReturnProfit) {\n      columns.push({\n        type: \"number\",\n        label: \"Sales Return Profit\"\n      });\n    }\n\n    if (props.columns.salesReturnLoss) {\n      columns.push({\n        type: \"number\",\n        label: \"Sales Return Loss\"\n      });\n    }\n\n    if (props.columns.purchaseReturn) {\n      columns.push({\n        type: \"number\",\n        label: \"Purchase Return\"\n      });\n    }\n\n    if (props.columns.loss) {\n      columns.push({\n        type: \"number\",\n        label: \"Sales Loss\"\n      });\n    }\n\n    let data = [];\n\n    if (columns.length > 1) {\n      data.push(columns);\n    }\n\n    if (props.columns.sales || props.columns.salesProfit || props.columns.loss || props.columns.paidSales || props.columns.unpaidSales) {\n      for (const sale of props.allOrders) {\n        let row = [new Date(sale.date)];\n\n        if (props.columns.sales) {\n          row.push(parseFloat(sale.net_total.toFixed(2)));\n        }\n\n        if (props.columns.salesProfit) {\n          row.push(parseFloat(sale.net_profit.toFixed(2)));\n        }\n\n        if (props.columns.paidSales) {\n          if (sale.payment_status == \"paid\") {\n            row.push(parseFloat(sale.net_total.toFixed(2)));\n          } else {\n            row.push(0.00);\n          }\n        }\n\n        if (props.columns.unpaidSales) {\n          if (sale.payment_status == \"not_paid\") {\n            row.push(parseFloat(sale.net_total.toFixed(2)));\n          } else {\n            row.push(0.00);\n          }\n        }\n\n        if (props.columns.expense) {\n          row.push(undefined);\n        }\n\n        if (props.columns.purchase) {\n          row.push(undefined);\n        }\n\n        if (props.columns.salesReturn) {\n          row.push(undefined);\n        }\n\n        if (props.columns.salesReturnProfit) {\n          row.push(undefined);\n        }\n\n        if (props.columns.salesReturnLoss) {\n          row.push(undefined);\n        }\n\n        if (props.columns.purchaseReturn) {\n          row.push(undefined);\n        }\n\n        if (props.columns.loss) {\n          row.push(parseFloat(sale.loss.toFixed(2)));\n        }\n\n        data.push(row);\n      }\n    }\n\n    if (props.columns.expense) {\n      for (const expense of props.allExpenses) {\n        let row = [new Date(expense.date)];\n\n        if (props.columns.sales) {\n          row.push(undefined);\n        }\n\n        if (props.columns.salesProfit) {\n          row.push(undefined);\n        }\n\n        if (props.columns.expense) {\n          row.push(parseFloat(expense.amount.toFixed(2)));\n        }\n\n        if (props.columns.purchase) {\n          row.push(undefined);\n        }\n\n        if (props.columns.salesReturn) {\n          row.push(undefined);\n        }\n\n        if (props.columns.salesReturnProfit) {\n          row.push(undefined);\n        }\n\n        if (props.columns.salesReturnLoss) {\n          row.push(undefined);\n        }\n\n        if (props.columns.purchaseReturn) {\n          row.push(undefined);\n        }\n\n        if (props.columns.loss) {\n          row.push(undefined);\n        }\n\n        data.push(row);\n      }\n    }\n\n    if (props.columns.purchase) {\n      for (const purchase of props.allPurchases) {\n        let row = [new Date(purchase.date)];\n\n        if (props.columns.sales) {\n          row.push(undefined);\n        }\n\n        if (props.columns.salesProfit) {\n          row.push(undefined);\n        }\n\n        if (props.columns.expense) {\n          row.push(undefined);\n        }\n\n        if (props.columns.purchase) {\n          row.push(parseFloat(purchase.net_total.toFixed(2)));\n        }\n\n        if (props.columns.salesReturn) {\n          row.push(undefined);\n        }\n\n        if (props.columns.salesReturnProfit) {\n          row.push(undefined);\n        }\n\n        if (props.columns.salesReturnLoss) {\n          row.push(undefined);\n        }\n\n        if (props.columns.purchaseReturn) {\n          row.push(undefined);\n        }\n\n        if (props.columns.loss) {\n          row.push(undefined);\n        }\n\n        data.push(row);\n      }\n    }\n\n    if (props.columns.salesReturn) {\n      for (const salesReturn of props.allSalesReturns) {\n        let row = [new Date(salesReturn.date)];\n\n        if (props.columns.sales) {\n          row.push(undefined);\n        }\n\n        if (props.columns.salesProfit) {\n          row.push(undefined);\n        }\n\n        if (props.columns.expense) {\n          row.push(undefined);\n        }\n\n        if (props.columns.purchase) {\n          row.push(undefined);\n        }\n\n        if (props.columns.salesReturn) {\n          row.push(parseFloat(salesReturn.net_total.toFixed(2)));\n        }\n\n        if (props.columns.salesReturnProfit) {\n          row.push(undefined);\n        }\n\n        if (props.columns.salesReturnLoss) {\n          row.push(undefined);\n        }\n\n        if (props.columns.purchaseReturn) {\n          row.push(undefined);\n        }\n\n        if (props.columns.loss) {\n          row.push(undefined);\n        }\n\n        data.push(row);\n      }\n    }\n\n    if (props.columns.salesReturnProfit) {\n      for (const salesReturn of props.allSalesReturns) {\n        let row = [new Date(salesReturn.date)];\n\n        if (props.columns.sales) {\n          row.push(undefined);\n        }\n\n        if (props.columns.salesProfit) {\n          row.push(undefined);\n        }\n\n        if (props.columns.expense) {\n          row.push(undefined);\n        }\n\n        if (props.columns.purchase) {\n          row.push(undefined);\n        }\n\n        if (props.columns.salesReturn) {\n          row.push(undefined);\n        }\n\n        if (props.columns.salesReturnProfit) {\n          row.push(parseFloat(salesReturn.net_profit.toFixed(2)));\n        }\n\n        if (props.columns.salesReturnLoss) {\n          row.push(undefined);\n        }\n\n        if (props.columns.purchaseReturn) {\n          row.push(undefined);\n        }\n\n        if (props.columns.loss) {\n          row.push(undefined);\n        }\n\n        data.push(row);\n      }\n    }\n\n    if (props.columns.salesReturnLoss) {\n      for (const salesReturn of props.allSalesReturns) {\n        let row = [new Date(salesReturn.date)];\n\n        if (props.columns.sales) {\n          row.push(undefined);\n        }\n\n        if (props.columns.salesProfit) {\n          row.push(undefined);\n        }\n\n        if (props.columns.expense) {\n          row.push(undefined);\n        }\n\n        if (props.columns.purchase) {\n          row.push(undefined);\n        }\n\n        if (props.columns.salesReturn) {\n          row.push(undefined);\n        }\n\n        if (props.columns.salesReturnProfit) {\n          row.push(undefined);\n        }\n\n        if (props.columns.salesReturnLoss) {\n          row.push(parseFloat(salesReturn.loss.toFixed(2)));\n        }\n\n        if (props.columns.purchaseReturn) {\n          row.push(undefined);\n        }\n\n        if (props.columns.loss) {\n          row.push(undefined);\n        }\n\n        data.push(row);\n      }\n    }\n\n    if (props.columns.purchaseReturn) {\n      for (const purchaseReturn of props.allPurchaseReturns) {\n        let row = [new Date(purchaseReturn.date)];\n\n        if (props.columns.sales) {\n          row.push(undefined);\n        }\n\n        if (props.columns.salesProfit) {\n          row.push(undefined);\n        }\n\n        if (props.columns.expense) {\n          row.push(undefined);\n        }\n\n        if (props.columns.purchase) {\n          row.push(undefined);\n        }\n\n        if (props.columns.salesReturn) {\n          row.push(undefined);\n        }\n\n        if (props.columns.salesReturnProfit) {\n          row.push(undefined);\n        }\n\n        if (props.columns.salesReturnLoss) {\n          row.push(undefined);\n        }\n\n        if (props.columns.purchaseReturn) {\n          row.push(parseFloat(purchaseReturn.net_total.toFixed(2)));\n        }\n\n        if (props.columns.loss) {\n          row.push(undefined);\n        }\n\n        data.push(row);\n      }\n    }\n\n    allSales = data;\n    setAllSales(data);\n  }\n\n  const [salesOptions, setSalesOptions] = useState({\n    title: 'Sales',\n    displayExactValues: true,\n    // displayAnnotationsFilter: true,\n    subtitle: '(SAR)',\n    legend: {\n      position: 'bottom'\n    },\n    hAxis: {\n      title: \"Time\"\n    },\n    vAxis: {\n      title: \"Amount(SAR)\"\n    },\n    series: {// 0: { curveType: \"function\", axis: 'Temps' },\n      // 1: { curveType: \"function\", axis: 'Daylight' },\n    }\n  });\n  useEffect(() => {\n    console.log(\"Inside useEffect\"); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const AllSalesRef = useRef();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-fluid p-0\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: allSales && allSales.length > 0 ? /*#__PURE__*/_jsxDEV(Chart, {\n          chartType: \"AnnotationChart\",\n          width: \"100%\",\n          height: \"400px\",\n          data: allSales,\n          options: salesOptions,\n          chartEvents: [{\n            eventName: \"ready\",\n            callback: ({\n              chartWrapper,\n              google\n            }) => {\n              const chart = chartWrapper.getChart();\n              /*\n              google.visualization.events.addListener(chart, \"onmouseover\", e => {\n                  const { row, column } = e;\n                  console.warn(\"MOUSE OVER \", { row, column });\n              });\n              google.visualization.events.addListener(chart, \"onmouseout\", e => {\n                  const { row, column } = e;\n                  console.warn(\"MOUSE OUT \", { row, column });\n              });\n              */\n\n              google.visualization.events.addListener(chart, \"select\", e => {\n                console.log(e);\n                let selection = chart.getSelection();\n                console.log(\"selection:\", selection);\n              });\n              /*\n              google.visualization.events.addListener(chart, \"click\", e => {\n                  console.log(e);\n                  //  let selection = chart.getSelection();\n                  // console.log(\"selection:\", selection);\n              });\n              */\n            }\n          }]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 56\n        }, this) : \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}, \"txXP3yFKXtVm7HfdGanxNmLJ/gs=\", false, function () {\n  return [useImperativeHandle];\n}));\n_c2 = AllSales;\nexport default _c3 = /*#__PURE__*/memo(AllSales);\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"AllSales$forwardRef\");\n$RefreshReg$(_c2, \"AllSales\");\n$RefreshReg$(_c3, \"%default%\");","map":{"version":3,"sources":["/Users/sirin/go/src/github.com/sirinibin/reactjs-pos/src/analytics/sales/allSales.js"],"names":["React","useState","useEffect","useRef","forwardRef","useImperativeHandle","memo","Chart","AllSales","props","ref","init","allOrders","length","makeAllData","allSales","setAllSales","columns","type","label","sales","push","salesProfit","paidSales","unpaidSales","expense","purchase","salesReturn","salesReturnProfit","salesReturnLoss","purchaseReturn","loss","data","sale","row","Date","date","parseFloat","net_total","toFixed","net_profit","payment_status","undefined","allExpenses","amount","allPurchases","allSalesReturns","allPurchaseReturns","salesOptions","setSalesOptions","title","displayExactValues","subtitle","legend","position","hAxis","vAxis","series","console","log","AllSalesRef","eventName","callback","chartWrapper","google","chart","getChart","visualization","events","addListener","e","selection","getSelection"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, forwardRef, useImperativeHandle, memo } from \"react\";\nimport { Chart } from \"react-google-charts\";\n\n\n\nconst AllSales = forwardRef((props, ref) => {\n    useImperativeHandle(ref, () => ({\n        init() {\n            if (props.allOrders.length > 0) {\n                makeAllData();\n            }\n        }\n    }));\n\n\n    let [allSales, setAllSales] = useState([]);\n\n\n    function makeAllData() {\n        let columns = [\n            { type: \"datetime\", label: \"Time\" }\n        ];\n        if (props.columns.sales) {\n            columns.push({ type: \"number\", label: \"Sales\" });\n        }\n\n        if (props.columns.salesProfit) {\n            columns.push({ type: \"number\", label: \"Sales Profit\" });\n        }\n\n        if (props.columns.paidSales) {\n            columns.push({ type: \"number\", label: \"Paid Sales\" });\n        }\n\n        if (props.columns.unpaidSales) {\n            columns.push({ type: \"number\", label: \"UnPaid Sales\" });\n        }\n\n\n        if (props.columns.expense) {\n            columns.push({ type: \"number\", label: \"Expense\" });\n        }\n\n        if (props.columns.purchase) {\n            columns.push({ type: \"number\", label: \"Purchase\" });\n        }\n\n        if (props.columns.salesReturn) {\n            columns.push({ type: \"number\", label: \"Sales Return\" });\n        }\n\n        if (props.columns.salesReturnProfit) {\n            columns.push({ type: \"number\", label: \"Sales Return Profit\" });\n        }\n\n        if (props.columns.salesReturnLoss) {\n            columns.push({ type: \"number\", label: \"Sales Return Loss\" });\n        }\n\n        if (props.columns.purchaseReturn) {\n            columns.push({ type: \"number\", label: \"Purchase Return\" });\n        }\n\n        if (props.columns.loss) {\n            columns.push({ type: \"number\", label: \"Sales Loss\" });\n        }\n\n        let data = [];\n\n\n        if (columns.length > 1) {\n            data.push(columns)\n        }\n\n\n        if (props.columns.sales || \n            props.columns.salesProfit || \n            props.columns.loss||\n            props.columns.paidSales||\n            props.columns.unpaidSales\n            ) {\n            for (const sale of props.allOrders) {\n                let row = [new Date(sale.date)];\n\n                if (props.columns.sales) {\n                    row.push(parseFloat(sale.net_total.toFixed(2)));\n                }\n\n                if (props.columns.salesProfit) {\n                    row.push(parseFloat(sale.net_profit.toFixed(2)));\n                }\n\n                if (props.columns.paidSales) {\n                    if(sale.payment_status==\"paid\"){\n                        row.push(parseFloat(sale.net_total.toFixed(2)));\n                    }else {\n                        row.push(0.00);\n                    }\n                }\n\n                if (props.columns.unpaidSales) {\n                    if(sale.payment_status==\"not_paid\"){\n                        row.push(parseFloat(sale.net_total.toFixed(2)));\n                    }else {\n                        row.push(0.00);\n                    }\n                }\n\n                if (props.columns.expense) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.purchase) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.salesReturn) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.salesReturnProfit) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.salesReturnLoss) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.purchaseReturn) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.loss) {\n                    row.push(parseFloat(sale.loss.toFixed(2)));\n                }\n\n                data.push(row);\n            }\n        }\n\n        if (props.columns.expense) {\n            for (const expense of props.allExpenses) {\n                let row = [new Date(expense.date)];\n\n                if (props.columns.sales) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.salesProfit) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.expense) {\n                    row.push(parseFloat(expense.amount.toFixed(2)));\n                }\n\n                if (props.columns.purchase) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.salesReturn) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.salesReturnProfit) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.salesReturnLoss) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.purchaseReturn) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.loss) {\n                    row.push(undefined);\n                }\n\n                data.push(row);\n            }\n        }\n\n        if (props.columns.purchase) {\n            for (const purchase of props.allPurchases) {\n                let row = [new Date(purchase.date)];\n\n                if (props.columns.sales) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.salesProfit) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.expense) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.purchase) {\n                    row.push(parseFloat(purchase.net_total.toFixed(2)));\n                }\n\n                if (props.columns.salesReturn) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.salesReturnProfit) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.salesReturnLoss) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.purchaseReturn) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.loss) {\n                    row.push(undefined);\n                }\n\n                data.push(row);\n            }\n        }\n\n\n        if (props.columns.salesReturn) {\n            for (const salesReturn of props.allSalesReturns) {\n\n                let row = [new Date(salesReturn.date)];\n\n                if (props.columns.sales) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.salesProfit) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.expense) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.purchase) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.salesReturn) {\n                    row.push(parseFloat(salesReturn.net_total.toFixed(2)));\n                }\n\n                if (props.columns.salesReturnProfit) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.salesReturnLoss) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.purchaseReturn) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.loss) {\n                    row.push(undefined);\n                }\n\n                data.push(row);\n            }\n        }\n\n        if (props.columns.salesReturnProfit) {\n            for (const salesReturn of props.allSalesReturns) {\n\n                let row = [new Date(salesReturn.date)];\n\n                if (props.columns.sales) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.salesProfit) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.expense) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.purchase) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.salesReturn) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.salesReturnProfit) {\n                    row.push(parseFloat(salesReturn.net_profit.toFixed(2)));\n                }\n\n                if (props.columns.salesReturnLoss) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.purchaseReturn) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.loss) {\n                    row.push(undefined);\n                }\n\n                data.push(row);\n            }\n        }\n\n        if (props.columns.salesReturnLoss) {\n            for (const salesReturn of props.allSalesReturns) {\n\n                let row = [new Date(salesReturn.date)];\n\n                if (props.columns.sales) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.salesProfit) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.expense) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.purchase) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.salesReturn) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.salesReturnProfit) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.salesReturnLoss) {\n                    row.push(parseFloat(salesReturn.loss.toFixed(2)));\n                }\n\n                if (props.columns.purchaseReturn) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.loss) {\n                    row.push(undefined);\n                }\n\n                data.push(row);\n            }\n        }\n\n\n        if (props.columns.purchaseReturn) {\n            for (const purchaseReturn of props.allPurchaseReturns) {\n                let row = [new Date(purchaseReturn.date)];\n\n                if (props.columns.sales) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.salesProfit) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.expense) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.purchase) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.salesReturn) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.salesReturnProfit) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.salesReturnLoss) {\n                    row.push(undefined);\n                }\n\n                if (props.columns.purchaseReturn) {\n                    row.push(parseFloat(purchaseReturn.net_total.toFixed(2)));\n                }\n\n                if (props.columns.loss) {\n                    row.push(undefined);\n                }\n\n                data.push(row);\n            }\n        }\n\n        allSales = data;\n        setAllSales(data);\n    }\n\n\n    const [salesOptions, setSalesOptions] = useState({\n        title: 'Sales',\n        displayExactValues: true,\n        // displayAnnotationsFilter: true,\n        subtitle: '(SAR)',\n        legend: { position: 'bottom' },\n        hAxis: {\n            title: \"Time\",\n        },\n        vAxis: {\n            title: \"Amount(SAR)\",\n        },\n        series: {\n            // 0: { curveType: \"function\", axis: 'Temps' },\n            // 1: { curveType: \"function\", axis: 'Daylight' },\n        },\n    });\n\n    useEffect(() => {\n        console.log(\"Inside useEffect\");\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n\n    const AllSalesRef = useRef();\n\n    return (\n        <>\n            <div className=\"container-fluid p-0\">\n                <div className=\"row\">\n                    {allSales && allSales.length > 0 ? <Chart\n                        chartType=\"AnnotationChart\"\n                        width=\"100%\"\n                        height=\"400px\"\n                        data={allSales}\n                        options={salesOptions}\n                        chartEvents={[\n                            {\n                                eventName: \"ready\",\n                                callback: ({ chartWrapper, google }) => {\n                                    const chart = chartWrapper.getChart();\n                                    /*\n                                    google.visualization.events.addListener(chart, \"onmouseover\", e => {\n                                        const { row, column } = e;\n                                        console.warn(\"MOUSE OVER \", { row, column });\n                                    });\n                                    google.visualization.events.addListener(chart, \"onmouseout\", e => {\n                                        const { row, column } = e;\n                                        console.warn(\"MOUSE OUT \", { row, column });\n                                    });\n                                    */\n                                    google.visualization.events.addListener(chart, \"select\", e => {\n                                        console.log(e);\n                                        let selection = chart.getSelection();\n                                        console.log(\"selection:\", selection);\n                                    });\n                                    /*\n                                    google.visualization.events.addListener(chart, \"click\", e => {\n                                        console.log(e);\n                                        //  let selection = chart.getSelection();\n                                        // console.log(\"selection:\", selection);\n                                    });\n                                    */\n                                }\n                            },\n                        ]}\n\n                    /> : \"\"}\n                </div>\n                <br /><br />\n\n            </div>\n        </>\n    );\n});\n\nexport default memo(AllSales);\n"]},"metadata":{},"sourceType":"module"}