{"ast":null,"code":"'use strict';\n\nvar _barcodes = require('./barcodes/');\n\nvar _barcodes2 = _interopRequireDefault(_barcodes);\n\nvar _merge = require('./help/merge.js');\n\nvar _merge2 = _interopRequireDefault(_merge);\n\nvar _linearizeEncodings = require('./help/linearizeEncodings.js');\n\nvar _linearizeEncodings2 = _interopRequireDefault(_linearizeEncodings);\n\nvar _fixOptions = require('./help/fixOptions.js');\n\nvar _fixOptions2 = _interopRequireDefault(_fixOptions);\n\nvar _getRenderProperties = require('./help/getRenderProperties.js');\n\nvar _getRenderProperties2 = _interopRequireDefault(_getRenderProperties);\n\nvar _optionsFromStrings = require('./help/optionsFromStrings.js');\n\nvar _optionsFromStrings2 = _interopRequireDefault(_optionsFromStrings);\n\nvar _ErrorHandler = require('./exceptions/ErrorHandler.js');\n\nvar _ErrorHandler2 = _interopRequireDefault(_ErrorHandler);\n\nvar _exceptions = require('./exceptions/exceptions.js');\n\nvar _defaults = require('./options/defaults.js');\n\nvar _defaults2 = _interopRequireDefault(_defaults);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // The protype of the object returned from the JsBarcode() call\n// Help functions\n\n\nvar API = function API() {}; // The first call of the library API\n// Will return an object with all barcodes calls and the data that is used\n// by the renderers\n// Default values\n// Exceptions\n// Import all the barcodes\n\n\nvar JsBarcode = function JsBarcode(element, text, options) {\n  var api = new API();\n\n  if (typeof element === \"undefined\") {\n    throw Error(\"No element to render on was provided.\");\n  } // Variables that will be pased through the API calls\n\n\n  api._renderProperties = (0, _getRenderProperties2.default)(element);\n  api._encodings = [];\n  api._options = _defaults2.default;\n  api._errorHandler = new _ErrorHandler2.default(api); // If text is set, use the simple syntax (render the barcode directly)\n\n  if (typeof text !== \"undefined\") {\n    options = options || {};\n\n    if (!options.format) {\n      options.format = autoSelectBarcode();\n    }\n\n    api.options(options)[options.format](text, options).render();\n  }\n\n  return api;\n}; // To make tests work TODO: remove\n\n\nJsBarcode.getModule = function (name) {\n  return _barcodes2.default[name];\n}; // Register all barcodes\n\n\nfor (var name in _barcodes2.default) {\n  if (_barcodes2.default.hasOwnProperty(name)) {\n    // Security check if the propery is a prototype property\n    registerBarcode(_barcodes2.default, name);\n  }\n}\n\nfunction registerBarcode(barcodes, name) {\n  API.prototype[name] = API.prototype[name.toUpperCase()] = API.prototype[name.toLowerCase()] = function (text, options) {\n    var api = this;\n    return api._errorHandler.wrapBarcodeCall(function () {\n      // Ensure text is options.text\n      options.text = typeof options.text === 'undefined' ? undefined : '' + options.text;\n      var newOptions = (0, _merge2.default)(api._options, options);\n      newOptions = (0, _optionsFromStrings2.default)(newOptions);\n      var Encoder = barcodes[name];\n      var encoded = encode(text, Encoder, newOptions);\n\n      api._encodings.push(encoded);\n\n      return api;\n    });\n  };\n} // encode() handles the Encoder call and builds the binary string to be rendered\n\n\nfunction encode(text, Encoder, options) {\n  // Ensure that text is a string\n  text = \"\" + text;\n  var encoder = new Encoder(text, options); // If the input is not valid for the encoder, throw error.\n  // If the valid callback option is set, call it instead of throwing error\n\n  if (!encoder.valid()) {\n    throw new _exceptions.InvalidInputException(encoder.constructor.name, text);\n  } // Make a request for the binary data (and other infromation) that should be rendered\n\n\n  var encoded = encoder.encode(); // Encodings can be nestled like [[1-1, 1-2], 2, [3-1, 3-2]\n  // Convert to [1-1, 1-2, 2, 3-1, 3-2]\n\n  encoded = (0, _linearizeEncodings2.default)(encoded); // Merge\n\n  for (var i = 0; i < encoded.length; i++) {\n    encoded[i].options = (0, _merge2.default)(options, encoded[i].options);\n  }\n\n  return encoded;\n}\n\nfunction autoSelectBarcode() {\n  // If CODE128 exists. Use it\n  if (_barcodes2.default[\"CODE128\"]) {\n    return \"CODE128\";\n  } // Else, take the first (probably only) barcode\n\n\n  return Object.keys(_barcodes2.default)[0];\n} // Sets global encoder options\n// Added to the api by the JsBarcode function\n\n\nAPI.prototype.options = function (options) {\n  this._options = (0, _merge2.default)(this._options, options);\n  return this;\n}; // Will create a blank space (usually in between barcodes)\n\n\nAPI.prototype.blank = function (size) {\n  var zeroes = new Array(size + 1).join(\"0\");\n\n  this._encodings.push({\n    data: zeroes\n  });\n\n  return this;\n}; // Initialize JsBarcode on all HTML elements defined.\n\n\nAPI.prototype.init = function () {\n  // Should do nothing if no elements where found\n  if (!this._renderProperties) {\n    return;\n  } // Make sure renderProperies is an array\n\n\n  if (!Array.isArray(this._renderProperties)) {\n    this._renderProperties = [this._renderProperties];\n  }\n\n  var renderProperty;\n\n  for (var i in this._renderProperties) {\n    renderProperty = this._renderProperties[i];\n    var options = (0, _merge2.default)(this._options, renderProperty.options);\n\n    if (options.format == \"auto\") {\n      options.format = autoSelectBarcode();\n    }\n\n    this._errorHandler.wrapBarcodeCall(function () {\n      var text = options.value;\n\n      var Encoder = _barcodes2.default[options.format.toUpperCase()];\n\n      var encoded = encode(text, Encoder, options);\n      render(renderProperty, encoded, options);\n    });\n  }\n}; // The render API call. Calls the real render function.\n\n\nAPI.prototype.render = function () {\n  if (!this._renderProperties) {\n    throw new _exceptions.NoElementException();\n  }\n\n  if (Array.isArray(this._renderProperties)) {\n    for (var i = 0; i < this._renderProperties.length; i++) {\n      render(this._renderProperties[i], this._encodings, this._options);\n    }\n  } else {\n    render(this._renderProperties, this._encodings, this._options);\n  }\n\n  return this;\n};\n\nAPI.prototype._defaults = _defaults2.default; // Prepares the encodings and calls the renderer\n\nfunction render(renderProperties, encodings, options) {\n  encodings = (0, _linearizeEncodings2.default)(encodings);\n\n  for (var i = 0; i < encodings.length; i++) {\n    encodings[i].options = (0, _merge2.default)(options, encodings[i].options);\n    (0, _fixOptions2.default)(encodings[i].options);\n  }\n\n  (0, _fixOptions2.default)(options);\n  var Renderer = renderProperties.renderer;\n  var renderer = new Renderer(renderProperties.element, encodings, options);\n  renderer.render();\n\n  if (renderProperties.afterRender) {\n    renderProperties.afterRender();\n  }\n} // Export to browser\n\n\nif (typeof window !== \"undefined\") {\n  window.JsBarcode = JsBarcode;\n} // Export to jQuery\n\n/*global jQuery */\n\n\nif (typeof jQuery !== 'undefined') {\n  jQuery.fn.JsBarcode = function (content, options) {\n    var elementArray = [];\n    jQuery(this).each(function () {\n      elementArray.push(this);\n    });\n    return JsBarcode(elementArray, content, options);\n  };\n} // Export to commonJS\n\n\nmodule.exports = JsBarcode;","map":{"version":3,"sources":["/Users/sirin/go/src/github.com/sirinibin/reactjs-pos/node_modules/jsbarcode/bin/JsBarcode.js"],"names":["_barcodes","require","_barcodes2","_interopRequireDefault","_merge","_merge2","_linearizeEncodings","_linearizeEncodings2","_fixOptions","_fixOptions2","_getRenderProperties","_getRenderProperties2","_optionsFromStrings","_optionsFromStrings2","_ErrorHandler","_ErrorHandler2","_exceptions","_defaults","_defaults2","obj","__esModule","default","API","JsBarcode","element","text","options","api","Error","_renderProperties","_encodings","_options","_errorHandler","format","autoSelectBarcode","render","getModule","name","hasOwnProperty","registerBarcode","barcodes","prototype","toUpperCase","toLowerCase","wrapBarcodeCall","undefined","newOptions","Encoder","encoded","encode","push","encoder","valid","InvalidInputException","constructor","i","length","Object","keys","blank","size","zeroes","Array","join","data","init","isArray","renderProperty","value","NoElementException","renderProperties","encodings","Renderer","renderer","afterRender","window","jQuery","fn","content","elementArray","each","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAvB;;AAEA,IAAIC,UAAU,GAAGC,sBAAsB,CAACH,SAAD,CAAvC;;AAEA,IAAII,MAAM,GAAGH,OAAO,CAAC,iBAAD,CAApB;;AAEA,IAAII,OAAO,GAAGF,sBAAsB,CAACC,MAAD,CAApC;;AAEA,IAAIE,mBAAmB,GAAGL,OAAO,CAAC,8BAAD,CAAjC;;AAEA,IAAIM,oBAAoB,GAAGJ,sBAAsB,CAACG,mBAAD,CAAjD;;AAEA,IAAIE,WAAW,GAAGP,OAAO,CAAC,sBAAD,CAAzB;;AAEA,IAAIQ,YAAY,GAAGN,sBAAsB,CAACK,WAAD,CAAzC;;AAEA,IAAIE,oBAAoB,GAAGT,OAAO,CAAC,+BAAD,CAAlC;;AAEA,IAAIU,qBAAqB,GAAGR,sBAAsB,CAACO,oBAAD,CAAlD;;AAEA,IAAIE,mBAAmB,GAAGX,OAAO,CAAC,8BAAD,CAAjC;;AAEA,IAAIY,oBAAoB,GAAGV,sBAAsB,CAACS,mBAAD,CAAjD;;AAEA,IAAIE,aAAa,GAAGb,OAAO,CAAC,8BAAD,CAA3B;;AAEA,IAAIc,cAAc,GAAGZ,sBAAsB,CAACW,aAAD,CAA3C;;AAEA,IAAIE,WAAW,GAAGf,OAAO,CAAC,4BAAD,CAAzB;;AAEA,IAAIgB,SAAS,GAAGhB,OAAO,CAAC,uBAAD,CAAvB;;AAEA,IAAIiB,UAAU,GAAGf,sBAAsB,CAACc,SAAD,CAAvC;;AAEA,SAASd,sBAAT,CAAgCgB,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEE,IAAAA,OAAO,EAAEF;AAAX,GAArC;AAAwD,C,CAE/F;AAGA;;;AACA,IAAIG,GAAG,GAAG,SAASA,GAAT,GAAe,CAAE,CAA3B,C,CAEA;AACA;AACA;AAGA;AAGA;AACA;;;AACA,IAAIC,SAAS,GAAG,SAASA,SAAT,CAAmBC,OAAnB,EAA4BC,IAA5B,EAAkCC,OAAlC,EAA2C;AAC1D,MAAIC,GAAG,GAAG,IAAIL,GAAJ,EAAV;;AAEA,MAAI,OAAOE,OAAP,KAAmB,WAAvB,EAAoC;AACnC,UAAMI,KAAK,CAAC,uCAAD,CAAX;AACA,GALyD,CAO1D;;;AACAD,EAAAA,GAAG,CAACE,iBAAJ,GAAwB,CAAC,GAAGlB,qBAAqB,CAACU,OAA1B,EAAmCG,OAAnC,CAAxB;AACAG,EAAAA,GAAG,CAACG,UAAJ,GAAiB,EAAjB;AACAH,EAAAA,GAAG,CAACI,QAAJ,GAAeb,UAAU,CAACG,OAA1B;AACAM,EAAAA,GAAG,CAACK,aAAJ,GAAoB,IAAIjB,cAAc,CAACM,OAAnB,CAA2BM,GAA3B,CAApB,CAX0D,CAa1D;;AACA,MAAI,OAAOF,IAAP,KAAgB,WAApB,EAAiC;AAChCC,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AAEA,QAAI,CAACA,OAAO,CAACO,MAAb,EAAqB;AACpBP,MAAAA,OAAO,CAACO,MAAR,GAAiBC,iBAAiB,EAAlC;AACA;;AAEDP,IAAAA,GAAG,CAACD,OAAJ,CAAYA,OAAZ,EAAqBA,OAAO,CAACO,MAA7B,EAAqCR,IAArC,EAA2CC,OAA3C,EAAoDS,MAApD;AACA;;AAED,SAAOR,GAAP;AACA,CAzBD,C,CA2BA;;;AACAJ,SAAS,CAACa,SAAV,GAAsB,UAAUC,IAAV,EAAgB;AACrC,SAAOnC,UAAU,CAACmB,OAAX,CAAmBgB,IAAnB,CAAP;AACA,CAFD,C,CAIA;;;AACA,KAAK,IAAIA,IAAT,IAAiBnC,UAAU,CAACmB,OAA5B,EAAqC;AACpC,MAAInB,UAAU,CAACmB,OAAX,CAAmBiB,cAAnB,CAAkCD,IAAlC,CAAJ,EAA6C;AAC5C;AACAE,IAAAA,eAAe,CAACrC,UAAU,CAACmB,OAAZ,EAAqBgB,IAArB,CAAf;AACA;AACD;;AACD,SAASE,eAAT,CAAyBC,QAAzB,EAAmCH,IAAnC,EAAyC;AACxCf,EAAAA,GAAG,CAACmB,SAAJ,CAAcJ,IAAd,IAAsBf,GAAG,CAACmB,SAAJ,CAAcJ,IAAI,CAACK,WAAL,EAAd,IAAoCpB,GAAG,CAACmB,SAAJ,CAAcJ,IAAI,CAACM,WAAL,EAAd,IAAoC,UAAUlB,IAAV,EAAgBC,OAAhB,EAAyB;AACtH,QAAIC,GAAG,GAAG,IAAV;AACA,WAAOA,GAAG,CAACK,aAAJ,CAAkBY,eAAlB,CAAkC,YAAY;AACpD;AACAlB,MAAAA,OAAO,CAACD,IAAR,GAAe,OAAOC,OAAO,CAACD,IAAf,KAAwB,WAAxB,GAAsCoB,SAAtC,GAAkD,KAAKnB,OAAO,CAACD,IAA9E;AAEA,UAAIqB,UAAU,GAAG,CAAC,GAAGzC,OAAO,CAACgB,OAAZ,EAAqBM,GAAG,CAACI,QAAzB,EAAmCL,OAAnC,CAAjB;AACAoB,MAAAA,UAAU,GAAG,CAAC,GAAGjC,oBAAoB,CAACQ,OAAzB,EAAkCyB,UAAlC,CAAb;AACA,UAAIC,OAAO,GAAGP,QAAQ,CAACH,IAAD,CAAtB;AACA,UAAIW,OAAO,GAAGC,MAAM,CAACxB,IAAD,EAAOsB,OAAP,EAAgBD,UAAhB,CAApB;;AACAnB,MAAAA,GAAG,CAACG,UAAJ,CAAeoB,IAAf,CAAoBF,OAApB;;AAEA,aAAOrB,GAAP;AACA,KAXM,CAAP;AAYA,GAdD;AAeA,C,CAED;;;AACA,SAASsB,MAAT,CAAgBxB,IAAhB,EAAsBsB,OAAtB,EAA+BrB,OAA/B,EAAwC;AACvC;AACAD,EAAAA,IAAI,GAAG,KAAKA,IAAZ;AAEA,MAAI0B,OAAO,GAAG,IAAIJ,OAAJ,CAAYtB,IAAZ,EAAkBC,OAAlB,CAAd,CAJuC,CAMvC;AACA;;AACA,MAAI,CAACyB,OAAO,CAACC,KAAR,EAAL,EAAsB;AACrB,UAAM,IAAIpC,WAAW,CAACqC,qBAAhB,CAAsCF,OAAO,CAACG,WAAR,CAAoBjB,IAA1D,EAAgEZ,IAAhE,CAAN;AACA,GAVsC,CAYvC;;;AACA,MAAIuB,OAAO,GAAGG,OAAO,CAACF,MAAR,EAAd,CAbuC,CAevC;AACA;;AACAD,EAAAA,OAAO,GAAG,CAAC,GAAGzC,oBAAoB,CAACc,OAAzB,EAAkC2B,OAAlC,CAAV,CAjBuC,CAmBvC;;AACA,OAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,OAAO,CAACQ,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACxCP,IAAAA,OAAO,CAACO,CAAD,CAAP,CAAW7B,OAAX,GAAqB,CAAC,GAAGrB,OAAO,CAACgB,OAAZ,EAAqBK,OAArB,EAA8BsB,OAAO,CAACO,CAAD,CAAP,CAAW7B,OAAzC,CAArB;AACA;;AAED,SAAOsB,OAAP;AACA;;AAED,SAASd,iBAAT,GAA6B;AAC5B;AACA,MAAIhC,UAAU,CAACmB,OAAX,CAAmB,SAAnB,CAAJ,EAAmC;AAClC,WAAO,SAAP;AACA,GAJ2B,CAM5B;;;AACA,SAAOoC,MAAM,CAACC,IAAP,CAAYxD,UAAU,CAACmB,OAAvB,EAAgC,CAAhC,CAAP;AACA,C,CAED;AACA;;;AACAC,GAAG,CAACmB,SAAJ,CAAcf,OAAd,GAAwB,UAAUA,OAAV,EAAmB;AAC1C,OAAKK,QAAL,GAAgB,CAAC,GAAG1B,OAAO,CAACgB,OAAZ,EAAqB,KAAKU,QAA1B,EAAoCL,OAApC,CAAhB;AACA,SAAO,IAAP;AACA,CAHD,C,CAKA;;;AACAJ,GAAG,CAACmB,SAAJ,CAAckB,KAAd,GAAsB,UAAUC,IAAV,EAAgB;AACrC,MAAIC,MAAM,GAAG,IAAIC,KAAJ,CAAUF,IAAI,GAAG,CAAjB,EAAoBG,IAApB,CAAyB,GAAzB,CAAb;;AACA,OAAKjC,UAAL,CAAgBoB,IAAhB,CAAqB;AAAEc,IAAAA,IAAI,EAAEH;AAAR,GAArB;;AACA,SAAO,IAAP;AACA,CAJD,C,CAMA;;;AACAvC,GAAG,CAACmB,SAAJ,CAAcwB,IAAd,GAAqB,YAAY;AAChC;AACA,MAAI,CAAC,KAAKpC,iBAAV,EAA6B;AAC5B;AACA,GAJ+B,CAMhC;;;AACA,MAAI,CAACiC,KAAK,CAACI,OAAN,CAAc,KAAKrC,iBAAnB,CAAL,EAA4C;AAC3C,SAAKA,iBAAL,GAAyB,CAAC,KAAKA,iBAAN,CAAzB;AACA;;AAED,MAAIsC,cAAJ;;AACA,OAAK,IAAIZ,CAAT,IAAc,KAAK1B,iBAAnB,EAAsC;AACrCsC,IAAAA,cAAc,GAAG,KAAKtC,iBAAL,CAAuB0B,CAAvB,CAAjB;AACA,QAAI7B,OAAO,GAAG,CAAC,GAAGrB,OAAO,CAACgB,OAAZ,EAAqB,KAAKU,QAA1B,EAAoCoC,cAAc,CAACzC,OAAnD,CAAd;;AAEA,QAAIA,OAAO,CAACO,MAAR,IAAkB,MAAtB,EAA8B;AAC7BP,MAAAA,OAAO,CAACO,MAAR,GAAiBC,iBAAiB,EAAlC;AACA;;AAED,SAAKF,aAAL,CAAmBY,eAAnB,CAAmC,YAAY;AAC9C,UAAInB,IAAI,GAAGC,OAAO,CAAC0C,KAAnB;;AACA,UAAIrB,OAAO,GAAG7C,UAAU,CAACmB,OAAX,CAAmBK,OAAO,CAACO,MAAR,CAAeS,WAAf,EAAnB,CAAd;;AACA,UAAIM,OAAO,GAAGC,MAAM,CAACxB,IAAD,EAAOsB,OAAP,EAAgBrB,OAAhB,CAApB;AAEAS,MAAAA,MAAM,CAACgC,cAAD,EAAiBnB,OAAjB,EAA0BtB,OAA1B,CAAN;AACA,KAND;AAOA;AACD,CA5BD,C,CA8BA;;;AACAJ,GAAG,CAACmB,SAAJ,CAAcN,MAAd,GAAuB,YAAY;AAClC,MAAI,CAAC,KAAKN,iBAAV,EAA6B;AAC5B,UAAM,IAAIb,WAAW,CAACqD,kBAAhB,EAAN;AACA;;AAED,MAAIP,KAAK,CAACI,OAAN,CAAc,KAAKrC,iBAAnB,CAAJ,EAA2C;AAC1C,SAAK,IAAI0B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK1B,iBAAL,CAAuB2B,MAA3C,EAAmDD,CAAC,EAApD,EAAwD;AACvDpB,MAAAA,MAAM,CAAC,KAAKN,iBAAL,CAAuB0B,CAAvB,CAAD,EAA4B,KAAKzB,UAAjC,EAA6C,KAAKC,QAAlD,CAAN;AACA;AACD,GAJD,MAIO;AACNI,IAAAA,MAAM,CAAC,KAAKN,iBAAN,EAAyB,KAAKC,UAA9B,EAA0C,KAAKC,QAA/C,CAAN;AACA;;AAED,SAAO,IAAP;AACA,CAdD;;AAgBAT,GAAG,CAACmB,SAAJ,CAAcxB,SAAd,GAA0BC,UAAU,CAACG,OAArC,C,CAEA;;AACA,SAASc,MAAT,CAAgBmC,gBAAhB,EAAkCC,SAAlC,EAA6C7C,OAA7C,EAAsD;AACrD6C,EAAAA,SAAS,GAAG,CAAC,GAAGhE,oBAAoB,CAACc,OAAzB,EAAkCkD,SAAlC,CAAZ;;AAEA,OAAK,IAAIhB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgB,SAAS,CAACf,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AAC1CgB,IAAAA,SAAS,CAAChB,CAAD,CAAT,CAAa7B,OAAb,GAAuB,CAAC,GAAGrB,OAAO,CAACgB,OAAZ,EAAqBK,OAArB,EAA8B6C,SAAS,CAAChB,CAAD,CAAT,CAAa7B,OAA3C,CAAvB;AACA,KAAC,GAAGjB,YAAY,CAACY,OAAjB,EAA0BkD,SAAS,CAAChB,CAAD,CAAT,CAAa7B,OAAvC;AACA;;AAED,GAAC,GAAGjB,YAAY,CAACY,OAAjB,EAA0BK,OAA1B;AAEA,MAAI8C,QAAQ,GAAGF,gBAAgB,CAACG,QAAhC;AACA,MAAIA,QAAQ,GAAG,IAAID,QAAJ,CAAaF,gBAAgB,CAAC9C,OAA9B,EAAuC+C,SAAvC,EAAkD7C,OAAlD,CAAf;AACA+C,EAAAA,QAAQ,CAACtC,MAAT;;AAEA,MAAImC,gBAAgB,CAACI,WAArB,EAAkC;AACjCJ,IAAAA,gBAAgB,CAACI,WAAjB;AACA;AACD,C,CAED;;;AACA,IAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AAClCA,EAAAA,MAAM,CAACpD,SAAP,GAAmBA,SAAnB;AACA,C,CAED;;AACA;;;AACA,IAAI,OAAOqD,MAAP,KAAkB,WAAtB,EAAmC;AAClCA,EAAAA,MAAM,CAACC,EAAP,CAAUtD,SAAV,GAAsB,UAAUuD,OAAV,EAAmBpD,OAAnB,EAA4B;AACjD,QAAIqD,YAAY,GAAG,EAAnB;AACAH,IAAAA,MAAM,CAAC,IAAD,CAAN,CAAaI,IAAb,CAAkB,YAAY;AAC7BD,MAAAA,YAAY,CAAC7B,IAAb,CAAkB,IAAlB;AACA,KAFD;AAGA,WAAO3B,SAAS,CAACwD,YAAD,EAAeD,OAAf,EAAwBpD,OAAxB,CAAhB;AACA,GAND;AAOA,C,CAED;;;AACAuD,MAAM,CAACC,OAAP,GAAiB3D,SAAjB","sourcesContent":["'use strict';\n\nvar _barcodes = require('./barcodes/');\n\nvar _barcodes2 = _interopRequireDefault(_barcodes);\n\nvar _merge = require('./help/merge.js');\n\nvar _merge2 = _interopRequireDefault(_merge);\n\nvar _linearizeEncodings = require('./help/linearizeEncodings.js');\n\nvar _linearizeEncodings2 = _interopRequireDefault(_linearizeEncodings);\n\nvar _fixOptions = require('./help/fixOptions.js');\n\nvar _fixOptions2 = _interopRequireDefault(_fixOptions);\n\nvar _getRenderProperties = require('./help/getRenderProperties.js');\n\nvar _getRenderProperties2 = _interopRequireDefault(_getRenderProperties);\n\nvar _optionsFromStrings = require('./help/optionsFromStrings.js');\n\nvar _optionsFromStrings2 = _interopRequireDefault(_optionsFromStrings);\n\nvar _ErrorHandler = require('./exceptions/ErrorHandler.js');\n\nvar _ErrorHandler2 = _interopRequireDefault(_ErrorHandler);\n\nvar _exceptions = require('./exceptions/exceptions.js');\n\nvar _defaults = require('./options/defaults.js');\n\nvar _defaults2 = _interopRequireDefault(_defaults);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// The protype of the object returned from the JsBarcode() call\n\n\n// Help functions\nvar API = function API() {};\n\n// The first call of the library API\n// Will return an object with all barcodes calls and the data that is used\n// by the renderers\n\n\n// Default values\n\n\n// Exceptions\n// Import all the barcodes\nvar JsBarcode = function JsBarcode(element, text, options) {\n\tvar api = new API();\n\n\tif (typeof element === \"undefined\") {\n\t\tthrow Error(\"No element to render on was provided.\");\n\t}\n\n\t// Variables that will be pased through the API calls\n\tapi._renderProperties = (0, _getRenderProperties2.default)(element);\n\tapi._encodings = [];\n\tapi._options = _defaults2.default;\n\tapi._errorHandler = new _ErrorHandler2.default(api);\n\n\t// If text is set, use the simple syntax (render the barcode directly)\n\tif (typeof text !== \"undefined\") {\n\t\toptions = options || {};\n\n\t\tif (!options.format) {\n\t\t\toptions.format = autoSelectBarcode();\n\t\t}\n\n\t\tapi.options(options)[options.format](text, options).render();\n\t}\n\n\treturn api;\n};\n\n// To make tests work TODO: remove\nJsBarcode.getModule = function (name) {\n\treturn _barcodes2.default[name];\n};\n\n// Register all barcodes\nfor (var name in _barcodes2.default) {\n\tif (_barcodes2.default.hasOwnProperty(name)) {\n\t\t// Security check if the propery is a prototype property\n\t\tregisterBarcode(_barcodes2.default, name);\n\t}\n}\nfunction registerBarcode(barcodes, name) {\n\tAPI.prototype[name] = API.prototype[name.toUpperCase()] = API.prototype[name.toLowerCase()] = function (text, options) {\n\t\tvar api = this;\n\t\treturn api._errorHandler.wrapBarcodeCall(function () {\n\t\t\t// Ensure text is options.text\n\t\t\toptions.text = typeof options.text === 'undefined' ? undefined : '' + options.text;\n\n\t\t\tvar newOptions = (0, _merge2.default)(api._options, options);\n\t\t\tnewOptions = (0, _optionsFromStrings2.default)(newOptions);\n\t\t\tvar Encoder = barcodes[name];\n\t\t\tvar encoded = encode(text, Encoder, newOptions);\n\t\t\tapi._encodings.push(encoded);\n\n\t\t\treturn api;\n\t\t});\n\t};\n}\n\n// encode() handles the Encoder call and builds the binary string to be rendered\nfunction encode(text, Encoder, options) {\n\t// Ensure that text is a string\n\ttext = \"\" + text;\n\n\tvar encoder = new Encoder(text, options);\n\n\t// If the input is not valid for the encoder, throw error.\n\t// If the valid callback option is set, call it instead of throwing error\n\tif (!encoder.valid()) {\n\t\tthrow new _exceptions.InvalidInputException(encoder.constructor.name, text);\n\t}\n\n\t// Make a request for the binary data (and other infromation) that should be rendered\n\tvar encoded = encoder.encode();\n\n\t// Encodings can be nestled like [[1-1, 1-2], 2, [3-1, 3-2]\n\t// Convert to [1-1, 1-2, 2, 3-1, 3-2]\n\tencoded = (0, _linearizeEncodings2.default)(encoded);\n\n\t// Merge\n\tfor (var i = 0; i < encoded.length; i++) {\n\t\tencoded[i].options = (0, _merge2.default)(options, encoded[i].options);\n\t}\n\n\treturn encoded;\n}\n\nfunction autoSelectBarcode() {\n\t// If CODE128 exists. Use it\n\tif (_barcodes2.default[\"CODE128\"]) {\n\t\treturn \"CODE128\";\n\t}\n\n\t// Else, take the first (probably only) barcode\n\treturn Object.keys(_barcodes2.default)[0];\n}\n\n// Sets global encoder options\n// Added to the api by the JsBarcode function\nAPI.prototype.options = function (options) {\n\tthis._options = (0, _merge2.default)(this._options, options);\n\treturn this;\n};\n\n// Will create a blank space (usually in between barcodes)\nAPI.prototype.blank = function (size) {\n\tvar zeroes = new Array(size + 1).join(\"0\");\n\tthis._encodings.push({ data: zeroes });\n\treturn this;\n};\n\n// Initialize JsBarcode on all HTML elements defined.\nAPI.prototype.init = function () {\n\t// Should do nothing if no elements where found\n\tif (!this._renderProperties) {\n\t\treturn;\n\t}\n\n\t// Make sure renderProperies is an array\n\tif (!Array.isArray(this._renderProperties)) {\n\t\tthis._renderProperties = [this._renderProperties];\n\t}\n\n\tvar renderProperty;\n\tfor (var i in this._renderProperties) {\n\t\trenderProperty = this._renderProperties[i];\n\t\tvar options = (0, _merge2.default)(this._options, renderProperty.options);\n\n\t\tif (options.format == \"auto\") {\n\t\t\toptions.format = autoSelectBarcode();\n\t\t}\n\n\t\tthis._errorHandler.wrapBarcodeCall(function () {\n\t\t\tvar text = options.value;\n\t\t\tvar Encoder = _barcodes2.default[options.format.toUpperCase()];\n\t\t\tvar encoded = encode(text, Encoder, options);\n\n\t\t\trender(renderProperty, encoded, options);\n\t\t});\n\t}\n};\n\n// The render API call. Calls the real render function.\nAPI.prototype.render = function () {\n\tif (!this._renderProperties) {\n\t\tthrow new _exceptions.NoElementException();\n\t}\n\n\tif (Array.isArray(this._renderProperties)) {\n\t\tfor (var i = 0; i < this._renderProperties.length; i++) {\n\t\t\trender(this._renderProperties[i], this._encodings, this._options);\n\t\t}\n\t} else {\n\t\trender(this._renderProperties, this._encodings, this._options);\n\t}\n\n\treturn this;\n};\n\nAPI.prototype._defaults = _defaults2.default;\n\n// Prepares the encodings and calls the renderer\nfunction render(renderProperties, encodings, options) {\n\tencodings = (0, _linearizeEncodings2.default)(encodings);\n\n\tfor (var i = 0; i < encodings.length; i++) {\n\t\tencodings[i].options = (0, _merge2.default)(options, encodings[i].options);\n\t\t(0, _fixOptions2.default)(encodings[i].options);\n\t}\n\n\t(0, _fixOptions2.default)(options);\n\n\tvar Renderer = renderProperties.renderer;\n\tvar renderer = new Renderer(renderProperties.element, encodings, options);\n\trenderer.render();\n\n\tif (renderProperties.afterRender) {\n\t\trenderProperties.afterRender();\n\t}\n}\n\n// Export to browser\nif (typeof window !== \"undefined\") {\n\twindow.JsBarcode = JsBarcode;\n}\n\n// Export to jQuery\n/*global jQuery */\nif (typeof jQuery !== 'undefined') {\n\tjQuery.fn.JsBarcode = function (content, options) {\n\t\tvar elementArray = [];\n\t\tjQuery(this).each(function () {\n\t\t\telementArray.push(this);\n\t\t});\n\t\treturn JsBarcode(elementArray, content, options);\n\t};\n}\n\n// Export to commonJS\nmodule.exports = JsBarcode;"]},"metadata":{},"sourceType":"script"}