{"ast":null,"code":"var _jsxFileName = \"/Users/sirin/go/src/github.com/sirinibin/reactjs-pos/src/analytics/sales/dailySales.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, forwardRef, useImperativeHandle } from \"react\";\nimport Cookies from \"universal-cookie\";\nimport { Chart } from \"react-google-charts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DailySales = /*#__PURE__*/forwardRef(_c = _s((props, ref) => {\n  _s();\n\n  const cookies = new Cookies();\n  useImperativeHandle(ref, () => ({\n    init() {\n      makeDailyData();\n    }\n\n  }));\n  const [yearOptions, setYearOptions] = useState([{\n    label: \"2024\",\n    value: 2024\n  }, {\n    label: \"2023\",\n    value: 2023\n  }, {\n    label: \"2022\",\n    value: 2022\n  }, {\n    label: \"2021\",\n    value: 2021\n  }, {\n    label: \"2020\",\n    value: 2020\n  }]);\n  const [monthOptions, setMonthOptions] = useState([{\n    label: \"JAN\",\n    value: 1\n  }, {\n    label: \"FEB\",\n    value: 2\n  }, {\n    label: \"MAR\",\n    value: 3\n  }, {\n    label: \"APR\",\n    value: 4\n  }, {\n    label: \"MAY\",\n    value: 5\n  }, {\n    label: \"JUN\",\n    value: 6\n  }, {\n    label: \"JULY\",\n    value: 7\n  }, {\n    label: \"AUG\",\n    value: 8\n  }, {\n    label: \"SEP\",\n    value: 9\n  }, {\n    label: \"OCT\",\n    value: 10\n  }, {\n    label: \"NOV\",\n    value: 11\n  }, {\n    label: \"DEC\",\n    value: 12\n  }]);\n  let [dailySales, setDailySales] = useState([]);\n  let [dailySalesSelectedMonth, setDailySalesSelectedMonth] = useState(new Date().getMonth() + 1);\n  let [dailySalesSelectedYear, setDailySalesSelectedYear] = useState(new Date().getFullYear());\n\n  function daysInMonth(month, year) {\n    return new Date(year, month, 0).getDate();\n  }\n\n  function makeDailyData() {\n    let columns = [{\n      type: \"date\",\n      label: \"Date\"\n    }];\n\n    if (props.columns.sales) {\n      columns.push({\n        type: \"number\",\n        label: \"Sales\"\n      });\n    }\n\n    if (props.columns.salesProfit) {\n      columns.push({\n        type: \"number\",\n        label: \"Sales Profit\"\n      });\n    }\n\n    if (props.columns.paidSales) {\n      columns.push({\n        type: \"number\",\n        label: \"Paid Sales\"\n      });\n    }\n\n    if (props.columns.unpaidSales) {\n      columns.push({\n        type: \"number\",\n        label: \"Credit Sales\"\n      });\n    }\n\n    if (props.columns.expense) {\n      columns.push({\n        type: \"number\",\n        label: \"Expense\"\n      });\n    }\n\n    if (props.columns.purchase) {\n      columns.push({\n        type: \"number\",\n        label: \"Purchase\"\n      });\n    }\n\n    if (props.columns.salesReturn) {\n      columns.push({\n        type: \"number\",\n        label: \"Sales Return\"\n      });\n    }\n\n    if (props.columns.salesReturnProfit) {\n      columns.push({\n        type: \"number\",\n        label: \"Sales Return Profit\"\n      });\n    }\n\n    if (props.columns.salesReturnLoss) {\n      columns.push({\n        type: \"number\",\n        label: \"Sales Return Loss\"\n      });\n    }\n\n    if (props.columns.purchaseReturn) {\n      columns.push({\n        type: \"number\",\n        label: \"Purchase Return\"\n      });\n    }\n\n    if (props.columns.loss) {\n      columns.push({\n        type: \"number\",\n        label: \"Sales Loss\"\n      });\n    }\n\n    let data = [];\n\n    if (columns.length > 1) {\n      data.push(columns);\n    }\n\n    console.log(\"selectedMonth:\", dailySalesSelectedMonth);\n    console.log(\"selectedYear:\", dailySalesSelectedYear);\n    let lastDay = daysInMonth(dailySalesSelectedMonth, dailySalesSelectedYear);\n    console.log(\"lastDay:\", lastDay);\n\n    for (let day = 1; day <= lastDay; day++) {\n      let sales = 0.00;\n      let paidSales = 0.00;\n      let unpaidSales = 0.00;\n      let profit = 0.00;\n      let loss = 0.00;\n\n      if (props.columns.sales || props.columns.salesProfit || props.columns.loss || props.columns.paidSales || props.columns.unpaidSales) {\n        for (const sale of props.allOrders) {\n          // console.log(\"Sale Month:\", new Date(sale.date).getMonth() + 1);\n          // console.log(\"Sale Year:\", new Date(sale.date).getFullYear());\n          if (new Date(sale.date).getMonth() + 1 == dailySalesSelectedMonth && new Date(sale.date).getFullYear() == dailySalesSelectedYear && new Date(sale.date).getDate() == day) {\n            sales += parseFloat(sale.net_total);\n            profit += parseFloat(sale.net_profit);\n            paidSales += parseFloat(sale.total_payment_received);\n            unpaidSales += parseFloat(sale.balance_amount);\n            /*\n            if(sale.payment_status==\"paid\"){\n                paidSales += parseFloat(sale.net_total);\n            }else if(sale.payment_status==\"not_paid\"){\n                unpaidSales += parseFloat(sale.net_total);\n            }\n            */\n\n            loss += parseFloat(sale.loss);\n          }\n        }\n      }\n\n      let totalExpense = 0.00;\n\n      if (props.columns.expense) {\n        for (const expense of props.allExpenses) {\n          if (new Date(expense.date).getMonth() + 1 == dailySalesSelectedMonth && new Date(expense.date).getFullYear() == dailySalesSelectedYear && new Date(expense.date).getDate() == day) {\n            totalExpense += parseFloat(expense.amount);\n          }\n        }\n      }\n\n      let totalPurchase = 0.00;\n\n      if (props.columns.purchase) {\n        for (const purchase of props.allPurchases) {\n          if (new Date(purchase.date).getMonth() + 1 == dailySalesSelectedMonth && new Date(purchase.date).getFullYear() == dailySalesSelectedYear && new Date(purchase.date).getDate() == day) {\n            totalPurchase += parseFloat(purchase.net_total);\n          }\n        }\n      }\n\n      let totalSalesReturn = 0.00;\n      let totalSalesReturnProfit = 0.00;\n      let totalSalesReturnLoss = 0.00;\n\n      if (props.columns.salesReturn || props.columns.salesReturnProfit || props.columns.salesReturnLoss) {\n        for (const salesReturn of props.allSalesReturns) {\n          if (new Date(salesReturn.date).getMonth() + 1 == dailySalesSelectedMonth && new Date(salesReturn.date).getFullYear() == dailySalesSelectedYear && new Date(salesReturn.date).getDate() == day) {\n            totalSalesReturn += parseFloat(salesReturn.net_total);\n            totalSalesReturnProfit += parseFloat(salesReturn.net_profit);\n            totalSalesReturnLoss += parseFloat(salesReturn.loss);\n          }\n        }\n      }\n\n      let totalPurchaseReturn = 0.00;\n\n      if (props.columns.purchaseReturn) {\n        for (const purchaseReturn of props.allPurchaseReturns) {\n          if (new Date(purchaseReturn.date).getMonth() + 1 == dailySalesSelectedMonth && new Date(purchaseReturn.date).getFullYear() == dailySalesSelectedYear && new Date(purchaseReturn.date).getDate() == day) {\n            totalPurchaseReturn += parseFloat(purchaseReturn.net_total);\n          }\n        }\n      }\n\n      let row = [new Date(dailySalesSelectedYear, dailySalesSelectedMonth - 1, day)];\n\n      if (props.columns.sales) {\n        row.push(parseFloat(sales.toFixed(2)));\n      }\n\n      if (props.columns.salesProfit) {\n        row.push(parseFloat(profit.toFixed(2)));\n      }\n\n      if (props.columns.paidSales) {\n        row.push(parseFloat(paidSales.toFixed(2)));\n      }\n\n      if (props.columns.unpaidSales) {\n        row.push(parseFloat(unpaidSales.toFixed(2)));\n      }\n\n      if (props.columns.expense) {\n        row.push(parseFloat(totalExpense.toFixed(2)));\n      }\n\n      if (props.columns.purchase) {\n        row.push(parseFloat(totalPurchase.toFixed(2)));\n      }\n\n      if (props.columns.salesReturn) {\n        row.push(parseFloat(totalSalesReturn.toFixed(2)));\n      }\n\n      if (props.columns.salesReturnProfit) {\n        row.push(parseFloat(totalSalesReturnProfit.toFixed(2)));\n      }\n\n      if (props.columns.salesReturnLoss) {\n        row.push(parseFloat(totalSalesReturnLoss.toFixed(2)));\n      }\n\n      if (props.columns.purchaseReturn) {\n        row.push(parseFloat(totalPurchaseReturn.toFixed(2)));\n      }\n\n      if (props.columns.loss) {\n        row.push(parseFloat(loss.toFixed(2)));\n      }\n\n      if (row.length > 1) {\n        data.push(row);\n      }\n    }\n\n    dailySales = data;\n    setDailySales(data);\n  }\n\n  const [options, setOptions] = useState({\n    title: '',\n    subtitle: '(SAR)',\n    legend: {\n      position: 'right'\n    },\n    hAxis: {\n      title: \"Date\"\n    },\n    vAxis: {\n      title: \"Amount(SAR)\"\n    },\n    series: {// 0: { curveType: \"function\", axis: 'Temps' },\n      // 1: { curveType: \"function\", axis: 'Daylight' },\n    }\n  });\n  useEffect(() => {// getAllOrders();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-fluid p-0\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label\",\n            children: \"Year\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group mb-3\",\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              value: dailySalesSelectedYear,\n              onChange: e => {\n                if (!e.target.value) {\n                  return;\n                }\n\n                dailySalesSelectedYear = parseInt(e.target.value);\n                setDailySalesSelectedYear(parseInt(e.target.value));\n                makeDailyData();\n              },\n              className: \"form-control\",\n              children: yearOptions.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: option.value,\n                children: option.label\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 335,\n                columnNumber: 37\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label\",\n            children: \"Month\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group mb-3\",\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              value: dailySalesSelectedMonth,\n              onChange: e => {\n                if (!e.target.value) {\n                  return;\n                }\n\n                dailySalesSelectedMonth = parseInt(e.target.value);\n                setDailySalesSelectedMonth(parseInt(e.target.value));\n                makeDailyData();\n              },\n              className: \"form-control\",\n              children: monthOptions.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: option.value,\n                children: option.label\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 358,\n                columnNumber: 37\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 21\n        }, this), dailySales && dailySales.length > 0 ? /*#__PURE__*/_jsxDEV(Chart, {\n          chartType: \"LineChart\",\n          width: \"100%\",\n          height: \"400px\",\n          data: dailySales,\n          options: options\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 60\n        }, this) : \"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}, \"9f2IHs5YxTMeynD6p2WpX7wAXL0=\", false, function () {\n  return [useImperativeHandle];\n}));\n_c2 = DailySales;\nexport default DailySales;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"DailySales$forwardRef\");\n$RefreshReg$(_c2, \"DailySales\");","map":{"version":3,"sources":["/Users/sirin/go/src/github.com/sirinibin/reactjs-pos/src/analytics/sales/dailySales.js"],"names":["React","useState","useEffect","useRef","forwardRef","useImperativeHandle","Cookies","Chart","DailySales","props","ref","cookies","init","makeDailyData","yearOptions","setYearOptions","label","value","monthOptions","setMonthOptions","dailySales","setDailySales","dailySalesSelectedMonth","setDailySalesSelectedMonth","Date","getMonth","dailySalesSelectedYear","setDailySalesSelectedYear","getFullYear","daysInMonth","month","year","getDate","columns","type","sales","push","salesProfit","paidSales","unpaidSales","expense","purchase","salesReturn","salesReturnProfit","salesReturnLoss","purchaseReturn","loss","data","length","console","log","lastDay","day","profit","sale","allOrders","date","parseFloat","net_total","net_profit","total_payment_received","balance_amount","totalExpense","allExpenses","amount","totalPurchase","allPurchases","totalSalesReturn","totalSalesReturnProfit","totalSalesReturnLoss","allSalesReturns","totalPurchaseReturn","allPurchaseReturns","row","toFixed","options","setOptions","title","subtitle","legend","position","hAxis","vAxis","series","e","target","parseInt","map","option"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, forwardRef, useImperativeHandle } from \"react\";\nimport Cookies from \"universal-cookie\";\nimport { Chart } from \"react-google-charts\";\n\n\n\nconst DailySales = forwardRef((props, ref) => {\n    const cookies = new Cookies();\n    useImperativeHandle(ref, () => ({\n        init() {\n            makeDailyData();\n        }\n    }));\n\n    const [yearOptions, setYearOptions] = useState([\n        {\n            label: \"2024\",\n            value: 2024,\n        },\n        {\n            label: \"2023\",\n            value: 2023,\n        },\n        {\n            label: \"2022\",\n            value: 2022,\n        },\n        {\n            label: \"2021\",\n            value: 2021,\n        },\n        {\n            label: \"2020\",\n            value: 2020,\n        }\n    ]);\n    const [monthOptions, setMonthOptions] = useState([\n        {\n            label: \"JAN\",\n            value: 1,\n        },\n        {\n            label: \"FEB\",\n            value: 2,\n        },\n        {\n            label: \"MAR\",\n            value: 3,\n        },\n        {\n            label: \"APR\",\n            value: 4,\n        },\n        {\n            label: \"MAY\",\n            value: 5,\n        },\n        {\n            label: \"JUN\",\n            value: 6,\n        },\n        {\n            label: \"JULY\",\n            value: 7,\n        },\n        {\n            label: \"AUG\",\n            value: 8,\n        },\n        {\n            label: \"SEP\",\n            value: 9,\n        },\n        {\n            label: \"OCT\",\n            value: 10,\n        },\n        {\n            label: \"NOV\",\n            value: 11,\n        },\n        {\n            label: \"DEC\",\n            value: 12,\n        },\n    ]);\n\n\n    let [dailySales, setDailySales] = useState([]);\n    let [dailySalesSelectedMonth, setDailySalesSelectedMonth] = useState(new Date().getMonth() + 1);\n    let [dailySalesSelectedYear, setDailySalesSelectedYear] = useState(new Date().getFullYear());\n\n\n    function daysInMonth(month, year) {\n        return new Date(year, month, 0).getDate();\n    }\n\n    function makeDailyData() {\n        let columns = [\n            { type: \"date\", label: \"Date\" }\n        ];\n        if (props.columns.sales) {\n            columns.push({ type: \"number\", label: \"Sales\" });\n        }\n\n        if (props.columns.salesProfit) {\n            columns.push({ type: \"number\", label: \"Sales Profit\" });\n        }\n\n        if (props.columns.paidSales) {\n            columns.push({ type: \"number\", label: \"Paid Sales\" });\n        }\n\n        if (props.columns.unpaidSales) {\n            columns.push({ type: \"number\", label: \"Credit Sales\" });\n        }\n\n        if (props.columns.expense) {\n            columns.push({ type: \"number\", label: \"Expense\" });\n        }\n\n        if (props.columns.purchase) {\n            columns.push({ type: \"number\", label: \"Purchase\" });\n        }\n\n        if (props.columns.salesReturn) {\n            columns.push({ type: \"number\", label: \"Sales Return\" });\n        }\n\n        if (props.columns.salesReturnProfit) {\n            columns.push({ type: \"number\", label: \"Sales Return Profit\" });\n        }\n\n        if (props.columns.salesReturnLoss) {\n            columns.push({ type: \"number\", label: \"Sales Return Loss\" });\n        }\n\n        if (props.columns.purchaseReturn) {\n            columns.push({ type: \"number\", label: \"Purchase Return\" });\n        }\n\n        if (props.columns.loss) {\n            columns.push({ type: \"number\", label: \"Sales Loss\" });\n        }\n\n        let data = [];\n\n\n        if (columns.length > 1) {\n            data.push(columns)\n        }\n\n\n        console.log(\"selectedMonth:\", dailySalesSelectedMonth);\n        console.log(\"selectedYear:\", dailySalesSelectedYear);\n        let lastDay = daysInMonth(dailySalesSelectedMonth, dailySalesSelectedYear);\n        console.log(\"lastDay:\", lastDay);\n        for (let day = 1; day <= lastDay; day++) {\n\n            let sales = 0.00;\n            let paidSales = 0.00;\n            let unpaidSales = 0.00;\n            let profit = 0.00;\n            let loss = 0.00;\n            if (props.columns.sales || props.columns.salesProfit || props.columns.loss|| props.columns.paidSales || props.columns.unpaidSales) {\n                for (const sale of props.allOrders) {\n                    // console.log(\"Sale Month:\", new Date(sale.date).getMonth() + 1);\n                    // console.log(\"Sale Year:\", new Date(sale.date).getFullYear());\n                    if ((new Date(sale.date).getMonth() + 1) == dailySalesSelectedMonth && new Date(sale.date).getFullYear() == dailySalesSelectedYear && new Date(sale.date).getDate() == day) {\n                        sales += parseFloat(sale.net_total);\n                        profit += parseFloat(sale.net_profit);\n                        paidSales += parseFloat(sale.total_payment_received);\n                        unpaidSales += parseFloat(sale.balance_amount);\n                        /*\n                        if(sale.payment_status==\"paid\"){\n                            paidSales += parseFloat(sale.net_total);\n                        }else if(sale.payment_status==\"not_paid\"){\n                            unpaidSales += parseFloat(sale.net_total);\n                        }\n                        */\n                        loss += parseFloat(sale.loss);\n                    }\n                }\n            }\n\n            let totalExpense = 0.00;\n            if (props.columns.expense) {\n                for (const expense of props.allExpenses) {\n                    if ((new Date(expense.date).getMonth() + 1) == dailySalesSelectedMonth &&\n                        new Date(expense.date).getFullYear() == dailySalesSelectedYear &&\n                        new Date(expense.date).getDate() == day) {\n                        totalExpense += parseFloat(expense.amount);\n                    }\n                }\n            }\n\n            let totalPurchase = 0.00;\n            if (props.columns.purchase) {\n                for (const purchase of props.allPurchases) {\n                    if ((new Date(purchase.date).getMonth() + 1) == dailySalesSelectedMonth &&\n                        new Date(purchase.date).getFullYear() == dailySalesSelectedYear &&\n                        new Date(purchase.date).getDate() == day) {\n                        totalPurchase += parseFloat(purchase.net_total);\n                    }\n                }\n            }\n\n            let totalSalesReturn = 0.00;\n            let totalSalesReturnProfit = 0.00;\n            let totalSalesReturnLoss = 0.00;\n            if (props.columns.salesReturn||props.columns.salesReturnProfit||props.columns.salesReturnLoss) {\n                for (const salesReturn of props.allSalesReturns) {\n                    if ((new Date(salesReturn.date).getMonth() + 1) == dailySalesSelectedMonth &&\n                        new Date(salesReturn.date).getFullYear() == dailySalesSelectedYear &&\n                        new Date(salesReturn.date).getDate() == day) {\n                        totalSalesReturn += parseFloat(salesReturn.net_total);\n                        totalSalesReturnProfit += parseFloat(salesReturn.net_profit);\n                        totalSalesReturnLoss += parseFloat(salesReturn.loss);\n                    }\n                }\n            }\n\n            let totalPurchaseReturn = 0.00;\n            if (props.columns.purchaseReturn) {\n                for (const purchaseReturn of props.allPurchaseReturns) {\n                    if ((new Date(purchaseReturn.date).getMonth() + 1) == dailySalesSelectedMonth &&\n                        new Date(purchaseReturn.date).getFullYear() == dailySalesSelectedYear &&\n                        new Date(purchaseReturn.date).getDate() == day) {\n                        totalPurchaseReturn += parseFloat(purchaseReturn.net_total);\n                    }\n                }\n            }\n\n            let row = [new Date(dailySalesSelectedYear, dailySalesSelectedMonth - 1, day)];\n\n            if (props.columns.sales) {\n                row.push(parseFloat(sales.toFixed(2)));\n            }\n\n            if (props.columns.salesProfit) {\n                row.push(parseFloat(profit.toFixed(2)));\n            }\n\n            if (props.columns.paidSales) {\n                row.push(parseFloat(paidSales.toFixed(2)));\n            }\n\n            if (props.columns.unpaidSales) {\n                row.push(parseFloat(unpaidSales.toFixed(2)));\n            }\n\n            if (props.columns.expense) {\n                row.push(parseFloat(totalExpense.toFixed(2)));\n            }\n\n            if (props.columns.purchase) {\n                row.push(parseFloat(totalPurchase.toFixed(2)));\n            }\n\n            if (props.columns.salesReturn) {\n                row.push(parseFloat(totalSalesReturn.toFixed(2)));\n            }\n\n            if (props.columns.salesReturnProfit) {\n                row.push(parseFloat(totalSalesReturnProfit.toFixed(2)));\n            }\n\n            if (props.columns.salesReturnLoss) {\n                row.push(parseFloat(totalSalesReturnLoss.toFixed(2)));\n            }\n\n            if (props.columns.purchaseReturn) {\n                row.push(parseFloat(totalPurchaseReturn.toFixed(2)));\n            }\n\n            if (props.columns.loss) {\n                row.push(parseFloat(loss.toFixed(2)));\n            }\n\n            if (row.length > 1) {\n                data.push(row);\n            }\n        }\n\n        dailySales = data;\n        setDailySales(data);\n    }\n\n\n    const [options, setOptions] = useState({\n        title: '',\n        subtitle: '(SAR)',\n        legend: { position: 'right' },\n        hAxis: {\n            title: \"Date\",\n        },\n        vAxis: {\n            title: \"Amount(SAR)\",\n        },\n        series: {\n            // 0: { curveType: \"function\", axis: 'Temps' },\n            // 1: { curveType: \"function\", axis: 'Daylight' },\n        },\n    });\n\n\n    useEffect(() => {\n        // getAllOrders();\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return (\n        <>\n            <div className=\"container-fluid p-0\">\n                <div className=\"row\">\n\n                    <div className=\"col-md-2\">\n                        <label className=\"form-label\">Year</label>\n\n                        <div className=\"input-group mb-3\">\n                            <select\n                                value={dailySalesSelectedYear}\n                                onChange={(e) => {\n                                    if (!e.target.value) {\n                                        return;\n                                    }\n                                    dailySalesSelectedYear = parseInt(e.target.value);\n                                    setDailySalesSelectedYear(parseInt(e.target.value));\n                                    makeDailyData();\n                                }}\n                                className=\"form-control\"\n                            >\n                                {yearOptions.map((option) => (\n                                    <option value={option.value}>{option.label}</option>\n                                ))}\n                            </select>\n                        </div>\n                    </div>\n\n                    <div className=\"col-md-2\">\n                        <label className=\"form-label\">Month</label>\n\n                        <div className=\"input-group mb-3\">\n                            <select\n                                value={dailySalesSelectedMonth}\n                                onChange={(e) => {\n                                    if (!e.target.value) {\n                                        return;\n                                    }\n                                    dailySalesSelectedMonth = parseInt(e.target.value);\n                                    setDailySalesSelectedMonth(parseInt(e.target.value));\n                                    makeDailyData();\n                                }}\n                                className=\"form-control\"\n                            >\n                                {monthOptions.map((option) => (\n                                    <option value={option.value}>{option.label}</option>\n                                ))}\n\n                            </select>\n                        </div>\n                    </div>\n\n                    {dailySales && dailySales.length > 0 ? <Chart\n                        chartType=\"LineChart\"\n                        width=\"100%\"\n                        height=\"400px\"\n                        data={dailySales}\n                        options={options}\n                    /> : \"\"}\n                </div>\n            </div>\n        </>\n    );\n});\n\nexport default DailySales;\n"]},"metadata":{},"sourceType":"module"}