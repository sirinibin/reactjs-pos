{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport PropTypes from 'prop-types';\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport scrollIntoView from 'scroll-into-view-if-needed';\nimport { useTypeaheadContext } from '../core/Context';\nimport { getDisplayName, getMenuItemId, preventInputBlur } from '../utils';\nimport { optionType } from '../propTypes';\nvar propTypes = {\n  option: optionType.isRequired,\n  position: PropTypes.number\n};\nexport function useItem(_ref) {\n  var label = _ref.label,\n      onClick = _ref.onClick,\n      option = _ref.option,\n      position = _ref.position;\n\n  var _useTypeaheadContext = useTypeaheadContext(),\n      activeIndex = _useTypeaheadContext.activeIndex,\n      id = _useTypeaheadContext.id,\n      isOnlyResult = _useTypeaheadContext.isOnlyResult,\n      onActiveItemChange = _useTypeaheadContext.onActiveItemChange,\n      onInitialItemChange = _useTypeaheadContext.onInitialItemChange,\n      onMenuItemClick = _useTypeaheadContext.onMenuItemClick,\n      setItem = _useTypeaheadContext.setItem;\n\n  var itemRef = useRef(null);\n  useEffect(function () {\n    if (position === 0) {\n      onInitialItemChange(option);\n    }\n  });\n  useEffect(function () {\n    if (position === activeIndex) {\n      onActiveItemChange(option); // Automatically scroll the menu as the user keys through it.\n\n      var node = itemRef.current;\n      node && scrollIntoView(node, {\n        block: 'nearest',\n        boundary: node === null || node === void 0 ? void 0 : node.parentNode,\n        inline: 'nearest',\n        scrollMode: 'if-needed'\n      });\n    }\n  });\n  var handleClick = useCallback(function (e) {\n    onMenuItemClick(option, e);\n    onClick && onClick(e);\n  }, [onClick, onMenuItemClick, option]);\n  var active = isOnlyResult || activeIndex === position; // Update the item's position in the item stack.\n\n  setItem(option, position);\n  return {\n    active: active,\n    'aria-label': label,\n    'aria-selected': active,\n    id: getMenuItemId(id, position),\n    onClick: handleClick,\n    onMouseDown: preventInputBlur,\n    ref: itemRef,\n    role: 'option'\n  };\n}\n/* istanbul ignore next */\n\nexport function withItem(Component) {\n  var WrappedMenuItem = function WrappedMenuItem(props) {\n    return /*#__PURE__*/React.createElement(Component, _extends({}, props, useItem(props)));\n  };\n\n  WrappedMenuItem.displayName = \"withItem(\".concat(getDisplayName(Component), \")\");\n  WrappedMenuItem.propTypes = propTypes;\n  return WrappedMenuItem;\n}","map":{"version":3,"sources":["/Users/sirin/go/src/github.com/sirinibin/reactjs-pos/node_modules/react-bootstrap-typeahead/es/behaviors/item.js"],"names":["_extends","PropTypes","React","useCallback","useEffect","useRef","scrollIntoView","useTypeaheadContext","getDisplayName","getMenuItemId","preventInputBlur","optionType","propTypes","option","isRequired","position","number","useItem","_ref","label","onClick","_useTypeaheadContext","activeIndex","id","isOnlyResult","onActiveItemChange","onInitialItemChange","onMenuItemClick","setItem","itemRef","node","current","block","boundary","parentNode","inline","scrollMode","handleClick","e","active","onMouseDown","ref","role","withItem","Component","WrappedMenuItem","props","createElement","displayName","concat"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport PropTypes from 'prop-types';\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport scrollIntoView from 'scroll-into-view-if-needed';\nimport { useTypeaheadContext } from '../core/Context';\nimport { getDisplayName, getMenuItemId, preventInputBlur } from '../utils';\nimport { optionType } from '../propTypes';\nvar propTypes = {\n  option: optionType.isRequired,\n  position: PropTypes.number\n};\nexport function useItem(_ref) {\n  var label = _ref.label,\n      onClick = _ref.onClick,\n      option = _ref.option,\n      position = _ref.position;\n\n  var _useTypeaheadContext = useTypeaheadContext(),\n      activeIndex = _useTypeaheadContext.activeIndex,\n      id = _useTypeaheadContext.id,\n      isOnlyResult = _useTypeaheadContext.isOnlyResult,\n      onActiveItemChange = _useTypeaheadContext.onActiveItemChange,\n      onInitialItemChange = _useTypeaheadContext.onInitialItemChange,\n      onMenuItemClick = _useTypeaheadContext.onMenuItemClick,\n      setItem = _useTypeaheadContext.setItem;\n\n  var itemRef = useRef(null);\n  useEffect(function () {\n    if (position === 0) {\n      onInitialItemChange(option);\n    }\n  });\n  useEffect(function () {\n    if (position === activeIndex) {\n      onActiveItemChange(option); // Automatically scroll the menu as the user keys through it.\n\n      var node = itemRef.current;\n      node && scrollIntoView(node, {\n        block: 'nearest',\n        boundary: node === null || node === void 0 ? void 0 : node.parentNode,\n        inline: 'nearest',\n        scrollMode: 'if-needed'\n      });\n    }\n  });\n  var handleClick = useCallback(function (e) {\n    onMenuItemClick(option, e);\n    onClick && onClick(e);\n  }, [onClick, onMenuItemClick, option]);\n  var active = isOnlyResult || activeIndex === position; // Update the item's position in the item stack.\n\n  setItem(option, position);\n  return {\n    active: active,\n    'aria-label': label,\n    'aria-selected': active,\n    id: getMenuItemId(id, position),\n    onClick: handleClick,\n    onMouseDown: preventInputBlur,\n    ref: itemRef,\n    role: 'option'\n  };\n}\n/* istanbul ignore next */\n\nexport function withItem(Component) {\n  var WrappedMenuItem = function WrappedMenuItem(props) {\n    return /*#__PURE__*/React.createElement(Component, _extends({}, props, useItem(props)));\n  };\n\n  WrappedMenuItem.displayName = \"withItem(\".concat(getDisplayName(Component), \")\");\n  WrappedMenuItem.propTypes = propTypes;\n  return WrappedMenuItem;\n}"]},"metadata":{},"sourceType":"module"}