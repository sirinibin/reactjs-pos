{"ast":null,"code":"var _jsxFileName = \"/Users/sirin/go/src/github.com/sirinibin/reactjs-pos/src/analytics/sales/yearlySales.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, forwardRef, useImperativeHandle } from \"react\";\nimport Cookies from \"universal-cookie\";\nimport { Chart } from \"react-google-charts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst YearlySales = /*#__PURE__*/forwardRef(_c = _s((props, ref) => {\n  _s();\n\n  const cookies = new Cookies();\n  useImperativeHandle(ref, () => ({\n    init() {\n      if (props.allOrders.length > 0) {\n        makeYearlySalesData();\n      }\n    }\n\n  }));\n  const [yearOptions, setYearOptions] = useState([{\n    label: \"2024\",\n    value: 2024\n  }, {\n    label: \"2023\",\n    value: 2023\n  }, {\n    label: \"2022\",\n    value: 2022\n  }, {\n    label: \"2021\",\n    value: 2021\n  }]);\n  let [yearlySales, setYearlySales] = useState([]);\n\n  function makeYearlySalesData() {\n    let columns = [{\n      type: \"string\",\n      label: \"Year\"\n    }];\n\n    if (props.columns.sales) {\n      columns.push({\n        type: \"number\",\n        label: \"Sales\"\n      });\n    }\n\n    if (props.columns.salesProfit) {\n      columns.push({\n        type: \"number\",\n        label: \"Sales Profit\"\n      });\n    }\n\n    if (props.columns.paidSales) {\n      columns.push({\n        type: \"number\",\n        label: \"Paid Sales\"\n      });\n    }\n\n    if (props.columns.unpaidSales) {\n      columns.push({\n        type: \"number\",\n        label: \"Credit Sales\"\n      });\n    }\n\n    if (props.columns.expense) {\n      columns.push({\n        type: \"number\",\n        label: \"Expense\"\n      });\n    }\n\n    if (props.columns.purchase) {\n      columns.push({\n        type: \"number\",\n        label: \"Purchase\"\n      });\n    }\n\n    if (props.columns.salesReturn) {\n      columns.push({\n        type: \"number\",\n        label: \"Sales Return\"\n      });\n    }\n\n    if (props.columns.salesReturnProfit) {\n      columns.push({\n        type: \"number\",\n        label: \"Sales Return Profit\"\n      });\n    }\n\n    if (props.columns.salesReturnLoss) {\n      columns.push({\n        type: \"number\",\n        label: \"Sales Return Loss\"\n      });\n    }\n\n    if (props.columns.purchaseReturn) {\n      columns.push({\n        type: \"number\",\n        label: \"Purchase Return\"\n      });\n    }\n\n    if (props.columns.loss) {\n      columns.push({\n        type: \"number\",\n        label: \"Sales Loss\"\n      });\n    }\n\n    let data = [];\n\n    if (columns.length > 1) {\n      data.push(columns);\n    }\n\n    let firstYear = 2020;\n    let lastYear = new Date().getFullYear();\n\n    for (let year = firstYear; year <= parseInt(lastYear); year++) {\n      let sales = 0.00;\n      let profit = 0.00;\n      let paidSales = 0.00;\n      let unpaidSales = 0.00;\n      let loss = 0.00;\n\n      if (props.columns.sales || props.columns.salesProfit || props.columns.paidSales || props.columns.unpaidSales || props.columns.loss) {\n        for (const sale of props.allOrders) {\n          if (parseInt(new Date(sale.date).getFullYear()) === year) {\n            sales += parseFloat(sale.net_total);\n            profit += parseFloat(sale.net_profit);\n            paidSales += parseFloat(sale.total_payment_received);\n            unpaidSales += parseFloat(sale.balance_amount);\n            /*\n            if(sale.payment_status==\"paid\"){\n                paidSales += parseFloat(sale.net_total);\n            }else if(sale.payment_status==\"not_paid\"){\n                unpaidSales += parseFloat(sale.net_total);\n            }\n            */\n\n            loss += parseFloat(sale.loss);\n          }\n        }\n      }\n\n      let totalExpense = 0.00;\n\n      if (props.columns.expense) {\n        for (const expense of props.allExpenses) {\n          if (parseInt(new Date(expense.date).getFullYear()) === year) {\n            totalExpense += parseFloat(expense.amount);\n          }\n        }\n      }\n\n      let totalPurchase = 0.00;\n\n      if (props.columns.purchase) {\n        for (const purchase of props.allPurchases) {\n          if (parseInt(new Date(purchase.date).getFullYear()) === year) {\n            totalPurchase += parseFloat(purchase.net_total);\n          }\n        }\n      }\n\n      let totalSalesReturn = 0.00;\n      let totalSalesReturnProfit = 0.00;\n      let totalSalesReturnLoss = 0.00;\n\n      if (props.columns.salesReturn || props.columns.salesReturnProfit || props.columns.salesReturnLoss) {\n        for (const salesReturn of props.allSalesReturns) {\n          if (parseInt(new Date(salesReturn.date).getFullYear()) === year) {\n            totalSalesReturn += parseFloat(salesReturn.net_total);\n            totalSalesReturnProfit += parseFloat(salesReturn.net_profit);\n            totalSalesReturnLoss += parseFloat(salesReturn.loss);\n          }\n        }\n      }\n\n      let totalPurchaseReturn = 0.00;\n\n      if (props.columns.purchaseReturn) {\n        for (const purchaseReturn of props.allPurchaseReturns) {\n          if (parseInt(new Date(purchaseReturn.date).getFullYear()) === year) {\n            totalPurchaseReturn += parseFloat(purchaseReturn.net_total);\n          }\n        }\n      }\n\n      let row = [year.toString()];\n\n      if (props.columns.sales) {\n        row.push(parseFloat(sales.toFixed(2)));\n      }\n\n      if (props.columns.salesProfit) {\n        row.push(parseFloat(profit.toFixed(2)));\n      }\n\n      if (props.columns.paidSales) {\n        row.push(parseFloat(paidSales.toFixed(2)));\n      }\n\n      if (props.columns.unpaidSales) {\n        row.push(parseFloat(unpaidSales.toFixed(2)));\n      }\n\n      if (props.columns.expense) {\n        row.push(parseFloat(totalExpense.toFixed(2)));\n      }\n\n      if (props.columns.purchase) {\n        row.push(parseFloat(totalPurchase.toFixed(2)));\n      }\n\n      if (props.columns.salesReturn) {\n        row.push(parseFloat(totalSalesReturn.toFixed(2)));\n      }\n\n      if (props.columns.salesReturnProfit) {\n        row.push(parseFloat(totalSalesReturnProfit.toFixed(2)));\n      }\n\n      if (props.columns.salesReturnLoss) {\n        row.push(parseFloat(totalSalesReturnLoss.toFixed(2)));\n      }\n\n      if (props.columns.purchaseReturn) {\n        row.push(parseFloat(totalPurchaseReturn.toFixed(2)));\n      }\n\n      if (props.columns.loss) {\n        row.push(parseFloat(loss.toFixed(2)));\n      }\n\n      if (row.length > 1) {\n        data.push(row);\n      }\n    }\n\n    yearlySales = data;\n    setYearlySales(data); //setYearlySales(data);\n  }\n\n  const [options, setOptions] = useState({\n    title: 'Sales',\n    subtitle: '(SAR)',\n    legend: {\n      position: 'right'\n    },\n    hAxis: {\n      title: \"Year\"\n    },\n    vAxis: {\n      title: \"Amount(SAR)\"\n    },\n    series: {// 0: { curveType: \"function\", axis: 'Temps' },\n      // 1: { curveType: \"function\", axis: 'Daylight' },\n    }\n  });\n  useEffect(() => {// getAllOrders();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-fluid p-0\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: yearlySales && yearlySales.length > 0 ? /*#__PURE__*/_jsxDEV(Chart, {\n          chartType: \"LineChart\",\n          width: \"100%\",\n          height: \"400px\",\n          data: yearlySales,\n          options: options\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 62\n        }, this) : \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}, \"1kpLwbieRegKAr9H8yrlX2HGZnI=\", false, function () {\n  return [useImperativeHandle];\n}));\n_c2 = YearlySales;\nexport default YearlySales;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"YearlySales$forwardRef\");\n$RefreshReg$(_c2, \"YearlySales\");","map":{"version":3,"sources":["/Users/sirin/go/src/github.com/sirinibin/reactjs-pos/src/analytics/sales/yearlySales.js"],"names":["React","useState","useEffect","useRef","forwardRef","useImperativeHandle","Cookies","Chart","YearlySales","props","ref","cookies","init","allOrders","length","makeYearlySalesData","yearOptions","setYearOptions","label","value","yearlySales","setYearlySales","columns","type","sales","push","salesProfit","paidSales","unpaidSales","expense","purchase","salesReturn","salesReturnProfit","salesReturnLoss","purchaseReturn","loss","data","firstYear","lastYear","Date","getFullYear","year","parseInt","profit","sale","date","parseFloat","net_total","net_profit","total_payment_received","balance_amount","totalExpense","allExpenses","amount","totalPurchase","allPurchases","totalSalesReturn","totalSalesReturnProfit","totalSalesReturnLoss","allSalesReturns","totalPurchaseReturn","allPurchaseReturns","row","toString","toFixed","options","setOptions","title","subtitle","legend","position","hAxis","vAxis","series"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, forwardRef, useImperativeHandle } from \"react\";\nimport Cookies from \"universal-cookie\";\nimport { Chart } from \"react-google-charts\";\n\n\n\nconst YearlySales = forwardRef((props, ref) => {\n    const cookies = new Cookies();\n    useImperativeHandle(ref, () => ({\n        init() {\n            if (props.allOrders.length > 0) {\n                makeYearlySalesData();\n            }\n        }\n    }));\n\n    const [yearOptions, setYearOptions] = useState([\n        {\n            label: \"2024\",\n            value: 2024,\n        },\n        {\n            label: \"2023\",\n            value: 2023,\n        },\n        {\n            label: \"2022\",\n            value: 2022,\n        },\n        {\n            label: \"2021\",\n            value: 2021,\n        },\n    ]);\n\n\n\n    let [yearlySales, setYearlySales] = useState([]);\n\n    function makeYearlySalesData() {\n        let columns = [\n            { type: \"string\", label: \"Year\" }\n        ];\n        if (props.columns.sales) {\n            columns.push({ type: \"number\", label: \"Sales\" });\n        }\n\n        if (props.columns.salesProfit) {\n            columns.push({ type: \"number\", label: \"Sales Profit\" });\n        }\n\n        if (props.columns.paidSales) {\n            columns.push({ type: \"number\", label: \"Paid Sales\" });\n        }\n\n        if (props.columns.unpaidSales) {\n            columns.push({ type: \"number\", label: \"Credit Sales\" });\n        }\n\n        if (props.columns.expense) {\n            columns.push({ type: \"number\", label: \"Expense\" });\n        }\n\n        if (props.columns.purchase) {\n            columns.push({ type: \"number\", label: \"Purchase\" });\n        }\n\n        if (props.columns.salesReturn) {\n            columns.push({ type: \"number\", label: \"Sales Return\" });\n        }\n\n        if (props.columns.salesReturnProfit) {\n            columns.push({ type: \"number\", label: \"Sales Return Profit\" });\n        }\n\n        if (props.columns.salesReturnLoss) {\n            columns.push({ type: \"number\", label: \"Sales Return Loss\" });\n        }\n\n        if (props.columns.purchaseReturn) {\n            columns.push({ type: \"number\", label: \"Purchase Return\" });\n        }\n\n        if (props.columns.loss) {\n            columns.push({ type: \"number\", label: \"Sales Loss\" });\n        }\n\n        let data = [];\n\n\n        if (columns.length > 1) {\n            data.push(columns)\n        }\n\n        let firstYear = 2020;\n        let lastYear = new Date().getFullYear();\n\n        for (let year = firstYear; year <= parseInt(lastYear); year++) {\n\n            let sales = 0.00;\n            let profit = 0.00;\n            let paidSales = 0.00;\n            let unpaidSales = 0.00;\n            let loss = 0.00;\n            if (props.columns.sales || props.columns.salesProfit || props.columns.paidSales || props.columns.unpaidSales || props.columns.loss) {\n                for (const sale of props.allOrders) {\n                    if (parseInt(new Date(sale.date).getFullYear()) === year) {\n                        sales += parseFloat(sale.net_total);\n                        profit += parseFloat(sale.net_profit);\n\n                        paidSales += parseFloat(sale.total_payment_received);\n                        unpaidSales += parseFloat(sale.balance_amount);\n                        /*\n                        if(sale.payment_status==\"paid\"){\n                            paidSales += parseFloat(sale.net_total);\n                        }else if(sale.payment_status==\"not_paid\"){\n                            unpaidSales += parseFloat(sale.net_total);\n                        }\n                        */\n\n                        loss += parseFloat(sale.loss);\n                    }\n                }\n            }\n\n            let totalExpense = 0.00;\n            if (props.columns.expense) {\n                for (const expense of props.allExpenses) {\n                    if (parseInt(new Date(expense.date).getFullYear()) === year) {\n                        totalExpense += parseFloat(expense.amount);\n                    }\n                }\n            }\n\n            let totalPurchase = 0.00;\n            if (props.columns.purchase) {\n                for (const purchase of props.allPurchases) {\n                    if (parseInt(new Date(purchase.date).getFullYear()) === year) {\n                        totalPurchase += parseFloat(purchase.net_total);\n                    }\n                }\n            }\n\n            let totalSalesReturn = 0.00;\n            let totalSalesReturnProfit = 0.00;\n            let totalSalesReturnLoss = 0.00;\n            if (props.columns.salesReturn||props.columns.salesReturnProfit||props.columns.salesReturnLoss) {\n                for (const salesReturn of props.allSalesReturns) {\n                    if (parseInt(new Date(salesReturn.date).getFullYear()) === year) {\n                        totalSalesReturn += parseFloat(salesReturn.net_total);\n                        totalSalesReturnProfit += parseFloat(salesReturn.net_profit);\n                        totalSalesReturnLoss += parseFloat(salesReturn.loss);\n                    }\n                }\n            }\n\n            let totalPurchaseReturn = 0.00;\n            if (props.columns.purchaseReturn) {\n                for (const purchaseReturn of props.allPurchaseReturns) {\n                    if (parseInt(new Date(purchaseReturn.date).getFullYear()) === year) {\n                        totalPurchaseReturn += parseFloat(purchaseReturn.net_total);\n                    }\n                }\n            }\n\n            let row = [year.toString()];\n\n            if (props.columns.sales) {\n                row.push(parseFloat(sales.toFixed(2)));\n            }\n\n            if (props.columns.salesProfit) {\n                row.push(parseFloat(profit.toFixed(2)));\n            }\n\n            if (props.columns.paidSales) {\n                row.push(parseFloat(paidSales.toFixed(2)));\n            }\n\n            if (props.columns.unpaidSales) {\n                row.push(parseFloat(unpaidSales.toFixed(2)));\n            }\n\n            if (props.columns.expense) {\n                row.push(parseFloat(totalExpense.toFixed(2)));\n            }\n\n            if (props.columns.purchase) {\n                row.push(parseFloat(totalPurchase.toFixed(2)));\n            }\n\n            if (props.columns.salesReturn) {\n                row.push(parseFloat(totalSalesReturn.toFixed(2)));\n            }\n\n            if (props.columns.salesReturnProfit) {\n                row.push(parseFloat(totalSalesReturnProfit.toFixed(2)));\n            }\n\n            if (props.columns.salesReturnLoss) {\n                row.push(parseFloat(totalSalesReturnLoss.toFixed(2)));\n            }\n\n            if (props.columns.purchaseReturn) {\n                row.push(parseFloat(totalPurchaseReturn.toFixed(2)));\n            }\n\n            if (props.columns.loss) {\n                row.push(parseFloat(loss.toFixed(2)));\n            }\n\n            if (row.length > 1) {\n                data.push(row);\n            }\n\n        }\n        yearlySales = data;\n        setYearlySales(data);\n        //setYearlySales(data);\n    }\n\n    const [options, setOptions] = useState({\n        title: 'Sales',\n        subtitle: '(SAR)',\n        legend: { position: 'right' },\n        hAxis: {\n            title: \"Year\",\n        },\n        vAxis: {\n            title: \"Amount(SAR)\",\n        },\n        series: {\n            // 0: { curveType: \"function\", axis: 'Temps' },\n            // 1: { curveType: \"function\", axis: 'Daylight' },\n        },\n    });\n\n\n\n\n\n    useEffect(() => {\n        // getAllOrders();\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return (\n        <>\n            <div className=\"container-fluid p-0\">\n                <div className=\"row\">\n                    {yearlySales && yearlySales.length > 0 ? <Chart\n                        chartType=\"LineChart\"\n                        width=\"100%\"\n                        height=\"400px\"\n                        data={yearlySales}\n                        options={options}\n                    /> : \"\"}\n                </div>\n            </div>\n        </>\n    );\n});\n\nexport default YearlySales;\n"]},"metadata":{},"sourceType":"module"}