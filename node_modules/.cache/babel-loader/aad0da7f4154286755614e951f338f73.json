{"ast":null,"code":"var _classCallCheck = require(\"/Users/sirin/go/src/github.com/sirinibin/reactjs-pos/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/sirin/go/src/github.com/sirinibin/reactjs-pos/node_modules/@babel/runtime/helpers/createClass\");\n\n/**\n * Use the ImageData from a Canvas and turn the image in a 1-bit black and white image using dithering\n */\nvar CanvasDither = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function CanvasDither() {\n    _classCallCheck(this, CanvasDither);\n  }\n\n  _createClass(CanvasDither, [{\n    key: \"grayscale\",\n    value:\n    /**\n       * Change the image to grayscale\n       *\n       * @param  {object}   image         The imageData of a Canvas 2d context\n       * @return {object}                 The resulting imageData\n       *\n       */\n    function grayscale(image) {\n      for (var i = 0; i < image.data.length; i += 4) {\n        var luminance = image.data[i] * 0.299 + image.data[i + 1] * 0.587 + image.data[i + 2] * 0.114;\n        image.data.fill(luminance, i, i + 3);\n      }\n\n      return image;\n    }\n    /**\n       * Change the image to blank and white using a simple threshold\n       *\n       * @param  {object}   image         The imageData of a Canvas 2d context\n       * @param  {number}   threshold     Threshold value (0-255)\n       * @return {object}                 The resulting imageData\n       *\n       */\n\n  }, {\n    key: \"threshold\",\n    value: function threshold(image, _threshold) {\n      for (var i = 0; i < image.data.length; i += 4) {\n        var luminance = image.data[i] * 0.299 + image.data[i + 1] * 0.587 + image.data[i + 2] * 0.114;\n        var value = luminance < _threshold ? 0 : 255;\n        image.data.fill(value, i, i + 3);\n      }\n\n      return image;\n    }\n    /**\n       * Change the image to blank and white using the Bayer algorithm\n       *\n       * @param  {object}   image         The imageData of a Canvas 2d context\n       * @param  {number}   threshold     Threshold value (0-255)\n       * @return {object}                 The resulting imageData\n       *\n       */\n\n  }, {\n    key: \"bayer\",\n    value: function bayer(image, threshold) {\n      var thresholdMap = [[15, 135, 45, 165], [195, 75, 225, 105], [60, 180, 30, 150], [240, 120, 210, 90]];\n\n      for (var i = 0; i < image.data.length; i += 4) {\n        var luminance = image.data[i] * 0.299 + image.data[i + 1] * 0.587 + image.data[i + 2] * 0.114;\n        var x = i / 4 % image.width;\n        var y = Math.floor(i / 4 / image.width);\n        var map = Math.floor((luminance + thresholdMap[x % 4][y % 4]) / 2);\n        var value = map < threshold ? 0 : 255;\n        image.data.fill(value, i, i + 3);\n      }\n\n      return image;\n    }\n    /**\n       * Change the image to blank and white using the Floyd-Steinberg algorithm\n       *\n       * @param  {object}   image         The imageData of a Canvas 2d context\n       * @return {object}                 The resulting imageData\n       *\n       */\n\n  }, {\n    key: \"floydsteinberg\",\n    value: function floydsteinberg(image) {\n      var width = image.width;\n      var luminance = new Uint8ClampedArray(image.width * image.height);\n\n      for (var l = 0, i = 0; i < image.data.length; l++, i += 4) {\n        luminance[l] = image.data[i] * 0.299 + image.data[i + 1] * 0.587 + image.data[i + 2] * 0.114;\n      }\n\n      for (var _l = 0, _i = 0; _i < image.data.length; _l++, _i += 4) {\n        var value = luminance[_l] < 129 ? 0 : 255;\n        var error = Math.floor((luminance[_l] - value) / 16);\n        image.data.fill(value, _i, _i + 3);\n        luminance[_l + 1] += error * 7;\n        luminance[_l + width - 1] += error * 3;\n        luminance[_l + width] += error * 5;\n        luminance[_l + width + 1] += error * 1;\n      }\n\n      return image;\n    }\n    /**\n       * Change the image to blank and white using the Atkinson algorithm\n       *\n       * @param  {object}   image         The imageData of a Canvas 2d context\n       * @return {object}                 The resulting imageData\n       *\n       */\n\n  }, {\n    key: \"atkinson\",\n    value: function atkinson(image) {\n      var width = image.width;\n      var luminance = new Uint8ClampedArray(image.width * image.height);\n\n      for (var l = 0, i = 0; i < image.data.length; l++, i += 4) {\n        luminance[l] = image.data[i] * 0.299 + image.data[i + 1] * 0.587 + image.data[i + 2] * 0.114;\n      }\n\n      for (var _l2 = 0, _i2 = 0; _i2 < image.data.length; _l2++, _i2 += 4) {\n        var value = luminance[_l2] < 129 ? 0 : 255;\n        var error = Math.floor((luminance[_l2] - value) / 8);\n        image.data.fill(value, _i2, _i2 + 3);\n        luminance[_l2 + 1] += error;\n        luminance[_l2 + 2] += error;\n        luminance[_l2 + width - 1] += error;\n        luminance[_l2 + width] += error;\n        luminance[_l2 + width + 1] += error;\n        luminance[_l2 + 2 * width] += error;\n      }\n\n      return image;\n    }\n  }]);\n\n  return CanvasDither;\n}();\n\nmodule.exports = new CanvasDither();","map":{"version":3,"sources":["/Users/sirin/go/src/github.com/sirinibin/reactjs-pos/node_modules/canvas-dither/src/canvas-dither.js"],"names":["CanvasDither","image","i","data","length","luminance","fill","threshold","value","thresholdMap","x","width","y","Math","floor","map","Uint8ClampedArray","height","l","error","module","exports"],"mappings":";;;;AAAA;AACA;AACA;IACMA,Y;;;;;;;;;;AACJ;AACF;AACA;AACA;AACA;AACA;AACA;AACE,uBAAUC,KAAV,EAAiB;AACf,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,IAAN,CAAWC,MAA/B,EAAuCF,CAAC,IAAI,CAA5C,EAA+C;AAC7C,YAAMG,SAAS,GAAIJ,KAAK,CAACE,IAAN,CAAWD,CAAX,IAAgB,KAAjB,GAA2BD,KAAK,CAACE,IAAN,CAAWD,CAAC,GAAG,CAAf,IAAoB,KAA/C,GAAyDD,KAAK,CAACE,IAAN,CAAWD,CAAC,GAAG,CAAf,IAAoB,KAA/F;AACAD,QAAAA,KAAK,CAACE,IAAN,CAAWG,IAAX,CAAgBD,SAAhB,EAA2BH,CAA3B,EAA8BA,CAAC,GAAG,CAAlC;AACD;;AAED,aAAOD,KAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,mBAAUA,KAAV,EAAiBM,UAAjB,EAA4B;AAC1B,WAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,IAAN,CAAWC,MAA/B,EAAuCF,CAAC,IAAI,CAA5C,EAA+C;AAC7C,YAAMG,SAAS,GAAIJ,KAAK,CAACE,IAAN,CAAWD,CAAX,IAAgB,KAAjB,GAA2BD,KAAK,CAACE,IAAN,CAAWD,CAAC,GAAG,CAAf,IAAoB,KAA/C,GAAyDD,KAAK,CAACE,IAAN,CAAWD,CAAC,GAAG,CAAf,IAAoB,KAA/F;AAEA,YAAMM,KAAK,GAAGH,SAAS,GAAGE,UAAZ,GAAwB,CAAxB,GAA4B,GAA1C;AACAN,QAAAA,KAAK,CAACE,IAAN,CAAWG,IAAX,CAAgBE,KAAhB,EAAuBN,CAAvB,EAA0BA,CAAC,GAAG,CAA9B;AACD;;AAED,aAAOD,KAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,eAAMA,KAAN,EAAaM,SAAb,EAAwB;AACtB,UAAME,YAAY,GAAG,CACnB,CAAC,EAAD,EAAK,GAAL,EAAU,EAAV,EAAc,GAAd,CADmB,EAEnB,CAAC,GAAD,EAAM,EAAN,EAAU,GAAV,EAAe,GAAf,CAFmB,EAGnB,CAAC,EAAD,EAAK,GAAL,EAAU,EAAV,EAAc,GAAd,CAHmB,EAInB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,EAAhB,CAJmB,CAArB;;AAOA,WAAK,IAAIP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,IAAN,CAAWC,MAA/B,EAAuCF,CAAC,IAAI,CAA5C,EAA+C;AAC7C,YAAMG,SAAS,GAAIJ,KAAK,CAACE,IAAN,CAAWD,CAAX,IAAgB,KAAjB,GAA2BD,KAAK,CAACE,IAAN,CAAWD,CAAC,GAAG,CAAf,IAAoB,KAA/C,GAAyDD,KAAK,CAACE,IAAN,CAAWD,CAAC,GAAG,CAAf,IAAoB,KAA/F;AAEA,YAAMQ,CAAC,GAAGR,CAAC,GAAG,CAAJ,GAAQD,KAAK,CAACU,KAAxB;AACA,YAAMC,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWZ,CAAC,GAAG,CAAJ,GAAQD,KAAK,CAACU,KAAzB,CAAV;AACA,YAAMI,GAAG,GAAGF,IAAI,CAACC,KAAL,CAAW,CAACT,SAAS,GAAGI,YAAY,CAACC,CAAC,GAAG,CAAL,CAAZ,CAAoBE,CAAC,GAAG,CAAxB,CAAb,IAA2C,CAAtD,CAAZ;AACA,YAAMJ,KAAK,GAAGO,GAAG,GAAGR,SAAN,GAAkB,CAAlB,GAAsB,GAApC;AACAN,QAAAA,KAAK,CAACE,IAAN,CAAWG,IAAX,CAAgBE,KAAhB,EAAuBN,CAAvB,EAA0BA,CAAC,GAAG,CAA9B;AACD;;AAED,aAAOD,KAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;WACE,wBAAeA,KAAf,EAAsB;AACpB,UAAMU,KAAK,GAAGV,KAAK,CAACU,KAApB;AACA,UAAMN,SAAS,GAAG,IAAIW,iBAAJ,CAAsBf,KAAK,CAACU,KAAN,GAAcV,KAAK,CAACgB,MAA1C,CAAlB;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAR,EAAWhB,CAAC,GAAG,CAApB,EAAuBA,CAAC,GAAGD,KAAK,CAACE,IAAN,CAAWC,MAAtC,EAA8Cc,CAAC,IAAIhB,CAAC,IAAI,CAAxD,EAA2D;AACzDG,QAAAA,SAAS,CAACa,CAAD,CAAT,GAAgBjB,KAAK,CAACE,IAAN,CAAWD,CAAX,IAAgB,KAAjB,GAA2BD,KAAK,CAACE,IAAN,CAAWD,CAAC,GAAG,CAAf,IAAoB,KAA/C,GAAyDD,KAAK,CAACE,IAAN,CAAWD,CAAC,GAAG,CAAf,IAAoB,KAA5F;AACD;;AAED,WAAK,IAAIgB,EAAC,GAAG,CAAR,EAAWhB,EAAC,GAAG,CAApB,EAAuBA,EAAC,GAAGD,KAAK,CAACE,IAAN,CAAWC,MAAtC,EAA8Cc,EAAC,IAAIhB,EAAC,IAAI,CAAxD,EAA2D;AACzD,YAAMM,KAAK,GAAGH,SAAS,CAACa,EAAD,CAAT,GAAe,GAAf,GAAqB,CAArB,GAAyB,GAAvC;AACA,YAAMC,KAAK,GAAGN,IAAI,CAACC,KAAL,CAAW,CAACT,SAAS,CAACa,EAAD,CAAT,GAAeV,KAAhB,IAAyB,EAApC,CAAd;AACAP,QAAAA,KAAK,CAACE,IAAN,CAAWG,IAAX,CAAgBE,KAAhB,EAAuBN,EAAvB,EAA0BA,EAAC,GAAG,CAA9B;AAEAG,QAAAA,SAAS,CAACa,EAAC,GAAG,CAAL,CAAT,IAAoBC,KAAK,GAAG,CAA5B;AACAd,QAAAA,SAAS,CAACa,EAAC,GAAGP,KAAJ,GAAY,CAAb,CAAT,IAA4BQ,KAAK,GAAG,CAApC;AACAd,QAAAA,SAAS,CAACa,EAAC,GAAGP,KAAL,CAAT,IAAwBQ,KAAK,GAAG,CAAhC;AACAd,QAAAA,SAAS,CAACa,EAAC,GAAGP,KAAJ,GAAY,CAAb,CAAT,IAA4BQ,KAAK,GAAG,CAApC;AACD;;AAED,aAAOlB,KAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;WACE,kBAASA,KAAT,EAAgB;AACd,UAAMU,KAAK,GAAGV,KAAK,CAACU,KAApB;AACA,UAAMN,SAAS,GAAG,IAAIW,iBAAJ,CAAsBf,KAAK,CAACU,KAAN,GAAcV,KAAK,CAACgB,MAA1C,CAAlB;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAR,EAAWhB,CAAC,GAAG,CAApB,EAAuBA,CAAC,GAAGD,KAAK,CAACE,IAAN,CAAWC,MAAtC,EAA8Cc,CAAC,IAAIhB,CAAC,IAAI,CAAxD,EAA2D;AACzDG,QAAAA,SAAS,CAACa,CAAD,CAAT,GAAgBjB,KAAK,CAACE,IAAN,CAAWD,CAAX,IAAgB,KAAjB,GAA2BD,KAAK,CAACE,IAAN,CAAWD,CAAC,GAAG,CAAf,IAAoB,KAA/C,GAAyDD,KAAK,CAACE,IAAN,CAAWD,CAAC,GAAG,CAAf,IAAoB,KAA5F;AACD;;AAED,WAAK,IAAIgB,GAAC,GAAG,CAAR,EAAWhB,GAAC,GAAG,CAApB,EAAuBA,GAAC,GAAGD,KAAK,CAACE,IAAN,CAAWC,MAAtC,EAA8Cc,GAAC,IAAIhB,GAAC,IAAI,CAAxD,EAA2D;AACzD,YAAMM,KAAK,GAAGH,SAAS,CAACa,GAAD,CAAT,GAAe,GAAf,GAAqB,CAArB,GAAyB,GAAvC;AACA,YAAMC,KAAK,GAAGN,IAAI,CAACC,KAAL,CAAW,CAACT,SAAS,CAACa,GAAD,CAAT,GAAeV,KAAhB,IAAyB,CAApC,CAAd;AACAP,QAAAA,KAAK,CAACE,IAAN,CAAWG,IAAX,CAAgBE,KAAhB,EAAuBN,GAAvB,EAA0BA,GAAC,GAAG,CAA9B;AAEAG,QAAAA,SAAS,CAACa,GAAC,GAAG,CAAL,CAAT,IAAoBC,KAApB;AACAd,QAAAA,SAAS,CAACa,GAAC,GAAG,CAAL,CAAT,IAAoBC,KAApB;AACAd,QAAAA,SAAS,CAACa,GAAC,GAAGP,KAAJ,GAAY,CAAb,CAAT,IAA4BQ,KAA5B;AACAd,QAAAA,SAAS,CAACa,GAAC,GAAGP,KAAL,CAAT,IAAwBQ,KAAxB;AACAd,QAAAA,SAAS,CAACa,GAAC,GAAGP,KAAJ,GAAY,CAAb,CAAT,IAA4BQ,KAA5B;AACAd,QAAAA,SAAS,CAACa,GAAC,GAAG,IAAIP,KAAT,CAAT,IAA4BQ,KAA5B;AACD;;AAED,aAAOlB,KAAP;AACD;;;;;;AAGHmB,MAAM,CAACC,OAAP,GAAiB,IAAIrB,YAAJ,EAAjB","sourcesContent":["/**\n * Use the ImageData from a Canvas and turn the image in a 1-bit black and white image using dithering\n */\nclass CanvasDither {\n  /**\n     * Change the image to grayscale\n     *\n     * @param  {object}   image         The imageData of a Canvas 2d context\n     * @return {object}                 The resulting imageData\n     *\n     */\n  grayscale(image) {\n    for (let i = 0; i < image.data.length; i += 4) {\n      const luminance = (image.data[i] * 0.299) + (image.data[i + 1] * 0.587) + (image.data[i + 2] * 0.114);\n      image.data.fill(luminance, i, i + 3);\n    }\n\n    return image;\n  }\n\n  /**\n     * Change the image to blank and white using a simple threshold\n     *\n     * @param  {object}   image         The imageData of a Canvas 2d context\n     * @param  {number}   threshold     Threshold value (0-255)\n     * @return {object}                 The resulting imageData\n     *\n     */\n  threshold(image, threshold) {\n    for (let i = 0; i < image.data.length; i += 4) {\n      const luminance = (image.data[i] * 0.299) + (image.data[i + 1] * 0.587) + (image.data[i + 2] * 0.114);\n\n      const value = luminance < threshold ? 0 : 255;\n      image.data.fill(value, i, i + 3);\n    }\n\n    return image;\n  }\n\n  /**\n     * Change the image to blank and white using the Bayer algorithm\n     *\n     * @param  {object}   image         The imageData of a Canvas 2d context\n     * @param  {number}   threshold     Threshold value (0-255)\n     * @return {object}                 The resulting imageData\n     *\n     */\n  bayer(image, threshold) {\n    const thresholdMap = [\n      [15, 135, 45, 165],\n      [195, 75, 225, 105],\n      [60, 180, 30, 150],\n      [240, 120, 210, 90],\n    ];\n\n    for (let i = 0; i < image.data.length; i += 4) {\n      const luminance = (image.data[i] * 0.299) + (image.data[i + 1] * 0.587) + (image.data[i + 2] * 0.114);\n\n      const x = i / 4 % image.width;\n      const y = Math.floor(i / 4 / image.width);\n      const map = Math.floor((luminance + thresholdMap[x % 4][y % 4]) / 2);\n      const value = map < threshold ? 0 : 255;\n      image.data.fill(value, i, i + 3);\n    }\n\n    return image;\n  }\n\n  /**\n     * Change the image to blank and white using the Floyd-Steinberg algorithm\n     *\n     * @param  {object}   image         The imageData of a Canvas 2d context\n     * @return {object}                 The resulting imageData\n     *\n     */\n  floydsteinberg(image) {\n    const width = image.width;\n    const luminance = new Uint8ClampedArray(image.width * image.height);\n\n    for (let l = 0, i = 0; i < image.data.length; l++, i += 4) {\n      luminance[l] = (image.data[i] * 0.299) + (image.data[i + 1] * 0.587) + (image.data[i + 2] * 0.114);\n    }\n\n    for (let l = 0, i = 0; i < image.data.length; l++, i += 4) {\n      const value = luminance[l] < 129 ? 0 : 255;\n      const error = Math.floor((luminance[l] - value) / 16);\n      image.data.fill(value, i, i + 3);\n\n      luminance[l + 1] += error * 7;\n      luminance[l + width - 1] += error * 3;\n      luminance[l + width] += error * 5;\n      luminance[l + width + 1] += error * 1;\n    }\n\n    return image;\n  }\n\n  /**\n     * Change the image to blank and white using the Atkinson algorithm\n     *\n     * @param  {object}   image         The imageData of a Canvas 2d context\n     * @return {object}                 The resulting imageData\n     *\n     */\n  atkinson(image) {\n    const width = image.width;\n    const luminance = new Uint8ClampedArray(image.width * image.height);\n\n    for (let l = 0, i = 0; i < image.data.length; l++, i += 4) {\n      luminance[l] = (image.data[i] * 0.299) + (image.data[i + 1] * 0.587) + (image.data[i + 2] * 0.114);\n    }\n\n    for (let l = 0, i = 0; i < image.data.length; l++, i += 4) {\n      const value = luminance[l] < 129 ? 0 : 255;\n      const error = Math.floor((luminance[l] - value) / 8);\n      image.data.fill(value, i, i + 3);\n\n      luminance[l + 1] += error;\n      luminance[l + 2] += error;\n      luminance[l + width - 1] += error;\n      luminance[l + width] += error;\n      luminance[l + width + 1] += error;\n      luminance[l + 2 * width] += error;\n    }\n\n    return image;\n  }\n}\n\nmodule.exports = new CanvasDither();\n"]},"metadata":{},"sourceType":"script"}