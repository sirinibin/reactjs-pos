{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _optionsFromStrings = require(\"./optionsFromStrings.js\");\n\nvar _optionsFromStrings2 = _interopRequireDefault(_optionsFromStrings);\n\nvar _defaults = require(\"../options/defaults.js\");\n\nvar _defaults2 = _interopRequireDefault(_defaults);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getOptionsFromElement(element) {\n  var options = {};\n\n  for (var property in _defaults2.default) {\n    if (_defaults2.default.hasOwnProperty(property)) {\n      // jsbarcode-*\n      if (element.hasAttribute(\"jsbarcode-\" + property.toLowerCase())) {\n        options[property] = element.getAttribute(\"jsbarcode-\" + property.toLowerCase());\n      } // data-*\n\n\n      if (element.hasAttribute(\"data-\" + property.toLowerCase())) {\n        options[property] = element.getAttribute(\"data-\" + property.toLowerCase());\n      }\n    }\n  }\n\n  options[\"value\"] = element.getAttribute(\"jsbarcode-value\") || element.getAttribute(\"data-value\"); // Since all atributes are string they need to be converted to integers\n\n  options = (0, _optionsFromStrings2.default)(options);\n  return options;\n}\n\nexports.default = getOptionsFromElement;","map":{"version":3,"sources":["/Users/sirin/go/src/github.com/sirinibin/reactjs-pos/node_modules/jsbarcode/bin/help/getOptionsFromElement.js"],"names":["Object","defineProperty","exports","value","_optionsFromStrings","require","_optionsFromStrings2","_interopRequireDefault","_defaults","_defaults2","obj","__esModule","default","getOptionsFromElement","element","options","property","hasOwnProperty","hasAttribute","toLowerCase","getAttribute"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC5CC,EAAAA,KAAK,EAAE;AADqC,CAA7C;;AAIA,IAAIC,mBAAmB,GAAGC,OAAO,CAAC,yBAAD,CAAjC;;AAEA,IAAIC,oBAAoB,GAAGC,sBAAsB,CAACH,mBAAD,CAAjD;;AAEA,IAAII,SAAS,GAAGH,OAAO,CAAC,wBAAD,CAAvB;;AAEA,IAAII,UAAU,GAAGF,sBAAsB,CAACC,SAAD,CAAvC;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEE,IAAAA,OAAO,EAAEF;AAAX,GAArC;AAAwD;;AAE/F,SAASG,qBAAT,CAA+BC,OAA/B,EAAwC;AACvC,MAAIC,OAAO,GAAG,EAAd;;AACA,OAAK,IAAIC,QAAT,IAAqBP,UAAU,CAACG,OAAhC,EAAyC;AACxC,QAAIH,UAAU,CAACG,OAAX,CAAmBK,cAAnB,CAAkCD,QAAlC,CAAJ,EAAiD;AAChD;AACA,UAAIF,OAAO,CAACI,YAAR,CAAqB,eAAeF,QAAQ,CAACG,WAAT,EAApC,CAAJ,EAAiE;AAChEJ,QAAAA,OAAO,CAACC,QAAD,CAAP,GAAoBF,OAAO,CAACM,YAAR,CAAqB,eAAeJ,QAAQ,CAACG,WAAT,EAApC,CAApB;AACA,OAJ+C,CAMhD;;;AACA,UAAIL,OAAO,CAACI,YAAR,CAAqB,UAAUF,QAAQ,CAACG,WAAT,EAA/B,CAAJ,EAA4D;AAC3DJ,QAAAA,OAAO,CAACC,QAAD,CAAP,GAAoBF,OAAO,CAACM,YAAR,CAAqB,UAAUJ,QAAQ,CAACG,WAAT,EAA/B,CAApB;AACA;AACD;AACD;;AAEDJ,EAAAA,OAAO,CAAC,OAAD,CAAP,GAAmBD,OAAO,CAACM,YAAR,CAAqB,iBAArB,KAA2CN,OAAO,CAACM,YAAR,CAAqB,YAArB,CAA9D,CAhBuC,CAkBvC;;AACAL,EAAAA,OAAO,GAAG,CAAC,GAAGT,oBAAoB,CAACM,OAAzB,EAAkCG,OAAlC,CAAV;AAEA,SAAOA,OAAP;AACA;;AAEDb,OAAO,CAACU,OAAR,GAAkBC,qBAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _optionsFromStrings = require(\"./optionsFromStrings.js\");\n\nvar _optionsFromStrings2 = _interopRequireDefault(_optionsFromStrings);\n\nvar _defaults = require(\"../options/defaults.js\");\n\nvar _defaults2 = _interopRequireDefault(_defaults);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction getOptionsFromElement(element) {\n\tvar options = {};\n\tfor (var property in _defaults2.default) {\n\t\tif (_defaults2.default.hasOwnProperty(property)) {\n\t\t\t// jsbarcode-*\n\t\t\tif (element.hasAttribute(\"jsbarcode-\" + property.toLowerCase())) {\n\t\t\t\toptions[property] = element.getAttribute(\"jsbarcode-\" + property.toLowerCase());\n\t\t\t}\n\n\t\t\t// data-*\n\t\t\tif (element.hasAttribute(\"data-\" + property.toLowerCase())) {\n\t\t\t\toptions[property] = element.getAttribute(\"data-\" + property.toLowerCase());\n\t\t\t}\n\t\t}\n\t}\n\n\toptions[\"value\"] = element.getAttribute(\"jsbarcode-value\") || element.getAttribute(\"data-value\");\n\n\t// Since all atributes are string they need to be converted to integers\n\toptions = (0, _optionsFromStrings2.default)(options);\n\n\treturn options;\n}\n\nexports.default = getOptionsFromElement;"]},"metadata":{},"sourceType":"script"}