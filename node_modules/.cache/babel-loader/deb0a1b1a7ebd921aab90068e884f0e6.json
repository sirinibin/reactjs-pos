{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _merge = require(\"../help/merge.js\");\n\nvar _merge2 = _interopRequireDefault(_merge);\n\nvar _shared = require(\"./shared.js\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar CanvasRenderer = function () {\n  function CanvasRenderer(canvas, encodings, options) {\n    _classCallCheck(this, CanvasRenderer);\n\n    this.canvas = canvas;\n    this.encodings = encodings;\n    this.options = options;\n  }\n\n  _createClass(CanvasRenderer, [{\n    key: \"render\",\n    value: function render() {\n      // Abort if the browser does not support HTML5 canvas\n      if (!this.canvas.getContext) {\n        throw new Error('The browser does not support canvas.');\n      }\n\n      this.prepareCanvas();\n\n      for (var i = 0; i < this.encodings.length; i++) {\n        var encodingOptions = (0, _merge2.default)(this.options, this.encodings[i].options);\n        this.drawCanvasBarcode(encodingOptions, this.encodings[i]);\n        this.drawCanvasText(encodingOptions, this.encodings[i]);\n        this.moveCanvasDrawing(this.encodings[i]);\n      }\n\n      this.restoreCanvas();\n    }\n  }, {\n    key: \"prepareCanvas\",\n    value: function prepareCanvas() {\n      // Get the canvas context\n      var ctx = this.canvas.getContext(\"2d\");\n      ctx.save();\n      (0, _shared.calculateEncodingAttributes)(this.encodings, this.options, ctx);\n      var totalWidth = (0, _shared.getTotalWidthOfEncodings)(this.encodings);\n      var maxHeight = (0, _shared.getMaximumHeightOfEncodings)(this.encodings);\n      this.canvas.width = totalWidth + this.options.marginLeft + this.options.marginRight;\n      this.canvas.height = maxHeight; // Paint the canvas\n\n      ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n      if (this.options.background) {\n        ctx.fillStyle = this.options.background;\n        ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n      }\n\n      ctx.translate(this.options.marginLeft, 0);\n    }\n  }, {\n    key: \"drawCanvasBarcode\",\n    value: function drawCanvasBarcode(options, encoding) {\n      // Get the canvas context\n      var ctx = this.canvas.getContext(\"2d\");\n      var binary = encoding.data; // Creates the barcode out of the encoded binary\n\n      var yFrom;\n\n      if (options.textPosition == \"top\") {\n        yFrom = options.marginTop + options.fontSize + options.textMargin;\n      } else {\n        yFrom = options.marginTop;\n      }\n\n      ctx.fillStyle = options.lineColor;\n\n      for (var b = 0; b < binary.length; b++) {\n        var x = b * options.width + encoding.barcodePadding;\n\n        if (binary[b] === \"1\") {\n          ctx.fillRect(x, yFrom, options.width, options.height);\n        } else if (binary[b]) {\n          ctx.fillRect(x, yFrom, options.width, options.height * binary[b]);\n        }\n      }\n    }\n  }, {\n    key: \"drawCanvasText\",\n    value: function drawCanvasText(options, encoding) {\n      // Get the canvas context\n      var ctx = this.canvas.getContext(\"2d\");\n      var font = options.fontOptions + \" \" + options.fontSize + \"px \" + options.font; // Draw the text if displayValue is set\n\n      if (options.displayValue) {\n        var x, y;\n\n        if (options.textPosition == \"top\") {\n          y = options.marginTop + options.fontSize - options.textMargin;\n        } else {\n          y = options.height + options.textMargin + options.marginTop + options.fontSize;\n        }\n\n        ctx.font = font; // Draw the text in the correct X depending on the textAlign option\n\n        if (options.textAlign == \"left\" || encoding.barcodePadding > 0) {\n          x = 0;\n          ctx.textAlign = 'left';\n        } else if (options.textAlign == \"right\") {\n          x = encoding.width - 1;\n          ctx.textAlign = 'right';\n        } // In all other cases, center the text\n        else {\n          x = encoding.width / 2;\n          ctx.textAlign = 'center';\n        }\n\n        ctx.fillText(encoding.text, x, y);\n      }\n    }\n  }, {\n    key: \"moveCanvasDrawing\",\n    value: function moveCanvasDrawing(encoding) {\n      var ctx = this.canvas.getContext(\"2d\");\n      ctx.translate(encoding.width, 0);\n    }\n  }, {\n    key: \"restoreCanvas\",\n    value: function restoreCanvas() {\n      // Get the canvas context\n      var ctx = this.canvas.getContext(\"2d\");\n      ctx.restore();\n    }\n  }]);\n\n  return CanvasRenderer;\n}();\n\nexports.default = CanvasRenderer;","map":{"version":3,"sources":["/Users/sirin/go/src/github.com/sirinibin/reactjs-pos/node_modules/jsbarcode/bin/renderers/canvas.js"],"names":["Object","defineProperty","exports","value","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_merge","require","_merge2","_interopRequireDefault","_shared","obj","__esModule","default","_classCallCheck","instance","TypeError","CanvasRenderer","canvas","encodings","options","render","getContext","Error","prepareCanvas","encodingOptions","drawCanvasBarcode","drawCanvasText","moveCanvasDrawing","restoreCanvas","ctx","save","calculateEncodingAttributes","totalWidth","getTotalWidthOfEncodings","maxHeight","getMaximumHeightOfEncodings","width","marginLeft","marginRight","height","clearRect","background","fillStyle","fillRect","translate","encoding","binary","data","yFrom","textPosition","marginTop","fontSize","textMargin","lineColor","b","x","barcodePadding","font","fontOptions","displayValue","y","textAlign","fillText","text","restore"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _merge = require(\"../help/merge.js\");\n\nvar _merge2 = _interopRequireDefault(_merge);\n\nvar _shared = require(\"./shared.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar CanvasRenderer = function () {\n\tfunction CanvasRenderer(canvas, encodings, options) {\n\t\t_classCallCheck(this, CanvasRenderer);\n\n\t\tthis.canvas = canvas;\n\t\tthis.encodings = encodings;\n\t\tthis.options = options;\n\t}\n\n\t_createClass(CanvasRenderer, [{\n\t\tkey: \"render\",\n\t\tvalue: function render() {\n\t\t\t// Abort if the browser does not support HTML5 canvas\n\t\t\tif (!this.canvas.getContext) {\n\t\t\t\tthrow new Error('The browser does not support canvas.');\n\t\t\t}\n\n\t\t\tthis.prepareCanvas();\n\t\t\tfor (var i = 0; i < this.encodings.length; i++) {\n\t\t\t\tvar encodingOptions = (0, _merge2.default)(this.options, this.encodings[i].options);\n\n\t\t\t\tthis.drawCanvasBarcode(encodingOptions, this.encodings[i]);\n\t\t\t\tthis.drawCanvasText(encodingOptions, this.encodings[i]);\n\n\t\t\t\tthis.moveCanvasDrawing(this.encodings[i]);\n\t\t\t}\n\n\t\t\tthis.restoreCanvas();\n\t\t}\n\t}, {\n\t\tkey: \"prepareCanvas\",\n\t\tvalue: function prepareCanvas() {\n\t\t\t// Get the canvas context\n\t\t\tvar ctx = this.canvas.getContext(\"2d\");\n\n\t\t\tctx.save();\n\n\t\t\t(0, _shared.calculateEncodingAttributes)(this.encodings, this.options, ctx);\n\t\t\tvar totalWidth = (0, _shared.getTotalWidthOfEncodings)(this.encodings);\n\t\t\tvar maxHeight = (0, _shared.getMaximumHeightOfEncodings)(this.encodings);\n\n\t\t\tthis.canvas.width = totalWidth + this.options.marginLeft + this.options.marginRight;\n\n\t\t\tthis.canvas.height = maxHeight;\n\n\t\t\t// Paint the canvas\n\t\t\tctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\t\t\tif (this.options.background) {\n\t\t\t\tctx.fillStyle = this.options.background;\n\t\t\t\tctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\t\t\t}\n\n\t\t\tctx.translate(this.options.marginLeft, 0);\n\t\t}\n\t}, {\n\t\tkey: \"drawCanvasBarcode\",\n\t\tvalue: function drawCanvasBarcode(options, encoding) {\n\t\t\t// Get the canvas context\n\t\t\tvar ctx = this.canvas.getContext(\"2d\");\n\n\t\t\tvar binary = encoding.data;\n\n\t\t\t// Creates the barcode out of the encoded binary\n\t\t\tvar yFrom;\n\t\t\tif (options.textPosition == \"top\") {\n\t\t\t\tyFrom = options.marginTop + options.fontSize + options.textMargin;\n\t\t\t} else {\n\t\t\t\tyFrom = options.marginTop;\n\t\t\t}\n\n\t\t\tctx.fillStyle = options.lineColor;\n\n\t\t\tfor (var b = 0; b < binary.length; b++) {\n\t\t\t\tvar x = b * options.width + encoding.barcodePadding;\n\n\t\t\t\tif (binary[b] === \"1\") {\n\t\t\t\t\tctx.fillRect(x, yFrom, options.width, options.height);\n\t\t\t\t} else if (binary[b]) {\n\t\t\t\t\tctx.fillRect(x, yFrom, options.width, options.height * binary[b]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"drawCanvasText\",\n\t\tvalue: function drawCanvasText(options, encoding) {\n\t\t\t// Get the canvas context\n\t\t\tvar ctx = this.canvas.getContext(\"2d\");\n\n\t\t\tvar font = options.fontOptions + \" \" + options.fontSize + \"px \" + options.font;\n\n\t\t\t// Draw the text if displayValue is set\n\t\t\tif (options.displayValue) {\n\t\t\t\tvar x, y;\n\n\t\t\t\tif (options.textPosition == \"top\") {\n\t\t\t\t\ty = options.marginTop + options.fontSize - options.textMargin;\n\t\t\t\t} else {\n\t\t\t\t\ty = options.height + options.textMargin + options.marginTop + options.fontSize;\n\t\t\t\t}\n\n\t\t\t\tctx.font = font;\n\n\t\t\t\t// Draw the text in the correct X depending on the textAlign option\n\t\t\t\tif (options.textAlign == \"left\" || encoding.barcodePadding > 0) {\n\t\t\t\t\tx = 0;\n\t\t\t\t\tctx.textAlign = 'left';\n\t\t\t\t} else if (options.textAlign == \"right\") {\n\t\t\t\t\tx = encoding.width - 1;\n\t\t\t\t\tctx.textAlign = 'right';\n\t\t\t\t}\n\t\t\t\t// In all other cases, center the text\n\t\t\t\telse {\n\t\t\t\t\t\tx = encoding.width / 2;\n\t\t\t\t\t\tctx.textAlign = 'center';\n\t\t\t\t\t}\n\n\t\t\t\tctx.fillText(encoding.text, x, y);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"moveCanvasDrawing\",\n\t\tvalue: function moveCanvasDrawing(encoding) {\n\t\t\tvar ctx = this.canvas.getContext(\"2d\");\n\n\t\t\tctx.translate(encoding.width, 0);\n\t\t}\n\t}, {\n\t\tkey: \"restoreCanvas\",\n\t\tvalue: function restoreCanvas() {\n\t\t\t// Get the canvas context\n\t\t\tvar ctx = this.canvas.getContext(\"2d\");\n\n\t\t\tctx.restore();\n\t\t}\n\t}]);\n\n\treturn CanvasRenderer;\n}();\n\nexports.default = CanvasRenderer;"]},"metadata":{},"sourceType":"script"}