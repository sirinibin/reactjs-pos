{"ast":null,"code":"const EscPosEncoder = require('esc-pos-encoder');\n\nconst StarPrntEncoder = require('star-prnt-encoder');\n/**\n * Create a byte stream based on commands for ESC/POS or StarPRNT printers\n */\n\n\nclass ThermalPrinterEncoder {\n  /**\n     * Create a new object\n     *\n     * @param  {object}   options   Object containing configuration options\n     */\n  constructor(options) {\n    const languages = {\n      'esc-pos': EscPosEncoder,\n      'star-prnt': StarPrntEncoder\n    };\n\n    if (typeof options === 'undefined' || typeof options.language === 'undefined') {\n      throw new Error('You need to specify the language of the thermal printer');\n    }\n\n    if (typeof languages[options.language] === 'undefined') {\n      throw new Error('Language not supported by this library');\n    }\n\n    this.language = options.language;\n    const source = languages[this.language].prototype;\n    const props = Object.getOwnPropertyNames(source);\n    props.forEach(prop => {\n      this[prop] = source[prop];\n    });\n\n    this._reset(options);\n  }\n\n}\n\nmodule.exports = ThermalPrinterEncoder;","map":{"version":3,"sources":["/Users/sirin/go/src/github.com/sirinibin/reactjs-pos/node_modules/thermal-printer-encoder/src/thermal-printer-encoder.js"],"names":["EscPosEncoder","require","StarPrntEncoder","ThermalPrinterEncoder","constructor","options","languages","language","Error","source","prototype","props","Object","getOwnPropertyNames","forEach","prop","_reset","module","exports"],"mappings":"AAAA,MAAMA,aAAa,GAAGC,OAAO,CAAC,iBAAD,CAA7B;;AACA,MAAMC,eAAe,GAAGD,OAAO,CAAC,mBAAD,CAA/B;AAEA;AACA;AACA;;;AACA,MAAME,qBAAN,CAA4B;AAC1B;AACF;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,UAAMC,SAAS,GAAG;AAChB,iBAAWN,aADK;AAEhB,mBAAaE;AAFG,KAAlB;;AAKA,QAAI,OAAOG,OAAP,KAAmB,WAAnB,IAAkC,OAAOA,OAAO,CAACE,QAAf,KAA4B,WAAlE,EAA+E;AAC7E,YAAM,IAAIC,KAAJ,CAAU,yDAAV,CAAN;AACD;;AAED,QAAI,OAAOF,SAAS,CAACD,OAAO,CAACE,QAAT,CAAhB,KAAuC,WAA3C,EAAwD;AACtD,YAAM,IAAIC,KAAJ,CAAU,wCAAV,CAAN;AACD;;AAED,SAAKD,QAAL,GAAgBF,OAAO,CAACE,QAAxB;AAEA,UAAME,MAAM,GAAGH,SAAS,CAAC,KAAKC,QAAN,CAAT,CAAyBG,SAAxC;AACA,UAAMC,KAAK,GAAGC,MAAM,CAACC,mBAAP,CAA2BJ,MAA3B,CAAd;AACAE,IAAAA,KAAK,CAACG,OAAN,CAAeC,IAAD,IAAU;AACtB,WAAKA,IAAL,IAAaN,MAAM,CAACM,IAAD,CAAnB;AACD,KAFD;;AAIA,SAAKC,MAAL,CAAYX,OAAZ;AACD;;AA7ByB;;AAiC5BY,MAAM,CAACC,OAAP,GAAiBf,qBAAjB","sourcesContent":["const EscPosEncoder = require('esc-pos-encoder');\nconst StarPrntEncoder = require('star-prnt-encoder');\n\n/**\n * Create a byte stream based on commands for ESC/POS or StarPRNT printers\n */\nclass ThermalPrinterEncoder {\n  /**\n     * Create a new object\n     *\n     * @param  {object}   options   Object containing configuration options\n     */\n  constructor(options) {\n    const languages = {\n      'esc-pos': EscPosEncoder,\n      'star-prnt': StarPrntEncoder,\n    };\n\n    if (typeof options === 'undefined' || typeof options.language === 'undefined') {\n      throw new Error('You need to specify the language of the thermal printer');\n    }\n\n    if (typeof languages[options.language] === 'undefined') {\n      throw new Error('Language not supported by this library');\n    }\n\n    this.language = options.language;\n\n    const source = languages[this.language].prototype;\n    const props = Object.getOwnPropertyNames(source);\n    props.forEach((prop) => {\n      this[prop] = source[prop];\n    });\n\n    this._reset(options);\n  }\n}\n\n\nmodule.exports = ThermalPrinterEncoder;\n"]},"metadata":{},"sourceType":"script"}