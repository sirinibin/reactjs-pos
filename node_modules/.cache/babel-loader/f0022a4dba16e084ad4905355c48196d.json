{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/sirin/go/src/github.com/sirinibin/reactjs-pos/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _slicedToArray from\"/Users/sirin/go/src/github.com/sirinibin/reactjs-pos/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect,useRef,forwardRef,useImperativeHandle}from\"react\";import Cookies from\"universal-cookie\";import{Chart}from\"react-google-charts\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var MonthlySales=/*#__PURE__*/forwardRef(function(props,ref){var cookies=new Cookies();useImperativeHandle(ref,function(){return{init:function init(){if(props.allOrders.length>0){makeMonthlySalesData();}}};});var _useState=useState([{label:\"2023\",value:2023},{label:\"2022\",value:2022},{label:\"2021\",value:2021},{label:\"2020\",value:2020}]),_useState2=_slicedToArray(_useState,2),yearOptions=_useState2[0],setYearOptions=_useState2[1];var _useState3=useState([{label:\"JAN\",value:1},{label:\"FEB\",value:2},{label:\"MAR\",value:3},{label:\"APR\",value:4},{label:\"MAY\",value:5},{label:\"JUN\",value:6},{label:\"JULY\",value:7},{label:\"AUG\",value:8},{label:\"SEP\",value:9},{label:\"OCT\",value:10},{label:\"NOV\",value:11},{label:\"DEC\",value:12}]),_useState4=_slicedToArray(_useState3,2),monthOptions=_useState4[0],setMonthOptions=_useState4[1];function getMonthNameByNumber(number){var _iterator=_createForOfIteratorHelper(monthOptions),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var month=_step.value;if(month.value==number){return month.label;}}}catch(err){_iterator.e(err);}finally{_iterator.f();}}var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),monthlySales=_useState6[0],setMonthlySales=_useState6[1];var _useState7=useState(new Date().getFullYear()),_useState8=_slicedToArray(_useState7,2),monthlySalesSelectedYear=_useState8[0],setMonthlySalesSelectedYear=_useState8[1];function makeMonthlySalesData(){var columns=[{type:\"string\",label:\"Month\"}];if(props.columns.sales){columns.push({type:\"number\",label:\"Sales\"});}if(props.columns.salesProfit){columns.push({type:\"number\",label:\"Sales Profit\"});}if(props.columns.paidSales){columns.push({type:\"number\",label:\"Paid Sales\"});}if(props.columns.unpaidSales){columns.push({type:\"number\",label:\"Credit Sales\"});}if(props.columns.expense){columns.push({type:\"number\",label:\"Expense\"});}if(props.columns.purchase){columns.push({type:\"number\",label:\"Purchase\"});}if(props.columns.salesReturn){columns.push({type:\"number\",label:\"Sales Return\"});}if(props.columns.salesReturnProfit){columns.push({type:\"number\",label:\"Sales Return Profit\"});}if(props.columns.salesReturnLoss){columns.push({type:\"number\",label:\"Sales Return Loss\"});}if(props.columns.purchaseReturn){columns.push({type:\"number\",label:\"Purchase Return\"});}if(props.columns.loss){columns.push({type:\"number\",label:\"Loss\"});}var data=[];if(columns.length>1){data.push(columns);}console.log(\"selectedYear:\",monthlySalesSelectedYear);var lastMonth=12;for(var month=1;month<=lastMonth;month++){var sales=0.00;var profit=0.00;var paidSales=0.00;var unpaidSales=0.00;var loss=0.00;if(props.columns.sales||props.columns.salesProfit||props.columns.loss||props.columns.paidSales||props.columns.unpaidSales){var _iterator2=_createForOfIteratorHelper(props.allOrders),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var sale=_step2.value;// console.log(\"Sale Month:\", new Date(sale.date).getMonth() + 1);\n// console.log(\"Sale Year:\", new Date(sale.date).getFullYear());\nif(new Date(sale.date).getMonth()+1==month&&new Date(sale.date).getFullYear()==monthlySalesSelectedYear){sales+=parseFloat(sale.net_total);profit+=parseFloat(sale.net_profit);paidSales+=parseFloat(sale.total_payment_received);unpaidSales+=parseFloat(sale.balance_amount);/*\n                        if(sale.payment_status==\"paid\"){\n                            paidSales += parseFloat(sale.net_total);\n                        }else if(sale.payment_status==\"not_paid\"){\n                            unpaidSales += parseFloat(sale.net_total);\n                        }\n                        */loss+=parseFloat(sale.loss);}}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}}var totalExpense=0.00;if(props.columns.expense){var _iterator3=_createForOfIteratorHelper(props.allExpenses),_step3;try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var expense=_step3.value;// console.log(\"Sale Month:\", new Date(sale.date).getMonth() + 1);\n// console.log(\"Sale Year:\", new Date(sale.date).getFullYear());\nif(new Date(expense.date).getMonth()+1==month&&new Date(expense.date).getFullYear()==monthlySalesSelectedYear){totalExpense+=parseFloat(expense.amount);}}}catch(err){_iterator3.e(err);}finally{_iterator3.f();}}var totalPurchase=0.00;if(props.columns.purchase){var _iterator4=_createForOfIteratorHelper(props.allPurchases),_step4;try{for(_iterator4.s();!(_step4=_iterator4.n()).done;){var purchase=_step4.value;if(new Date(purchase.date).getMonth()+1==month&&new Date(purchase.date).getFullYear()==monthlySalesSelectedYear){totalPurchase+=parseFloat(purchase.net_total);}}}catch(err){_iterator4.e(err);}finally{_iterator4.f();}}var totalSalesReturn=0.00;var totalSalesReturnProfit=0.00;var totalSalesReturnLoss=0.00;if(props.columns.salesReturn||props.columns.salesReturnProfit||props.columns.salesReturnLoss){var _iterator5=_createForOfIteratorHelper(props.allSalesReturns),_step5;try{for(_iterator5.s();!(_step5=_iterator5.n()).done;){var salesReturn=_step5.value;if(new Date(salesReturn.date).getMonth()+1==month&&new Date(salesReturn.date).getFullYear()==monthlySalesSelectedYear){totalSalesReturn+=parseFloat(salesReturn.net_total);totalSalesReturnProfit+=parseFloat(salesReturn.net_profit);totalSalesReturnLoss+=parseFloat(salesReturn.loss);}}}catch(err){_iterator5.e(err);}finally{_iterator5.f();}}var totalPurchaseReturn=0.00;if(props.columns.purchaseReturn){var _iterator6=_createForOfIteratorHelper(props.allPurchaseReturns),_step6;try{for(_iterator6.s();!(_step6=_iterator6.n()).done;){var purchaseReturn=_step6.value;if(new Date(purchaseReturn.date).getMonth()+1==month&&new Date(purchaseReturn.date).getFullYear()==monthlySalesSelectedYear){totalPurchaseReturn+=parseFloat(purchaseReturn.net_total);}}}catch(err){_iterator6.e(err);}finally{_iterator6.f();}}var row=[getMonthNameByNumber(month)];if(props.columns.sales){row.push(parseFloat(sales.toFixed(2)));}if(props.columns.salesProfit){row.push(parseFloat(profit.toFixed(2)));}if(props.columns.paidSales){row.push(parseFloat(paidSales.toFixed(2)));}if(props.columns.unpaidSales){row.push(parseFloat(unpaidSales.toFixed(2)));}if(props.columns.expense){row.push(parseFloat(totalExpense.toFixed(2)));}if(props.columns.purchase){row.push(parseFloat(totalPurchase.toFixed(2)));}if(props.columns.salesReturn){row.push(parseFloat(totalSalesReturn.toFixed(2)));}if(props.columns.salesReturnProfit){row.push(parseFloat(totalSalesReturnProfit.toFixed(2)));}if(props.columns.salesReturnLoss){row.push(parseFloat(totalSalesReturnLoss.toFixed(2)));}if(props.columns.purchaseReturn){row.push(parseFloat(totalPurchaseReturn.toFixed(2)));}if(props.columns.loss){row.push(parseFloat(loss.toFixed(2)));}if(row.length>1){data.push(row);}}monthlySales=data;setMonthlySales(data);//setMonthlySales(data);\n}var _useState9=useState({title:'Sales',subtitle:'(SAR)',legend:{position:'right'},hAxis:{title:\"Month\"},vAxis:{title:\"Amount(SAR)\"},series:{// 0: { curveType: \"function\", axis: 'Temps' },\n// 1: { curveType: \"function\", axis: 'Daylight' },\n}}),_useState10=_slicedToArray(_useState9,2),options=_useState10[0],setOptions=_useState10[1];useEffect(function(){// getAllOrders();\n// eslint-disable-next-line react-hooks/exhaustive-deps\n},[]);return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(\"div\",{className:\"container-fluid p-0\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"col-md-2\",children:[/*#__PURE__*/_jsx(\"label\",{className:\"form-label\",children:\"Year\"}),/*#__PURE__*/_jsx(\"div\",{className:\"input-group mb-3\",children:/*#__PURE__*/_jsx(\"select\",{value:monthlySalesSelectedYear,onChange:function onChange(e){if(!e.target.value){return;}monthlySalesSelectedYear=parseInt(e.target.value);setMonthlySalesSelectedYear(parseInt(e.target.value));makeMonthlySalesData();},className:\"form-control\",children:yearOptions.map(function(option){return/*#__PURE__*/_jsx(\"option\",{value:option.value,children:option.label});})})})]}),monthlySales&&monthlySales.length>0?/*#__PURE__*/_jsx(Chart,{chartType:\"LineChart\",width:\"100%\",height:\"400px\",data:monthlySales,options:options}):\"\"]})})});});export default MonthlySales;","map":{"version":3,"sources":["/Users/sirin/go/src/github.com/sirinibin/reactjs-pos/src/analytics/sales/monthlySales.js"],"names":["React","useState","useEffect","useRef","forwardRef","useImperativeHandle","Cookies","Chart","MonthlySales","props","ref","cookies","init","allOrders","length","makeMonthlySalesData","label","value","yearOptions","setYearOptions","monthOptions","setMonthOptions","getMonthNameByNumber","number","month","monthlySales","setMonthlySales","Date","getFullYear","monthlySalesSelectedYear","setMonthlySalesSelectedYear","columns","type","sales","push","salesProfit","paidSales","unpaidSales","expense","purchase","salesReturn","salesReturnProfit","salesReturnLoss","purchaseReturn","loss","data","console","log","lastMonth","profit","sale","date","getMonth","parseFloat","net_total","net_profit","total_payment_received","balance_amount","totalExpense","allExpenses","amount","totalPurchase","allPurchases","totalSalesReturn","totalSalesReturnProfit","totalSalesReturnLoss","allSalesReturns","totalPurchaseReturn","allPurchaseReturns","row","toFixed","title","subtitle","legend","position","hAxis","vAxis","series","options","setOptions","e","target","parseInt","map","option"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, forwardRef, useImperativeHandle } from \"react\";\nimport Cookies from \"universal-cookie\";\nimport { Chart } from \"react-google-charts\";\n\n\n\nconst MonthlySales = forwardRef((props, ref) => {\n    const cookies = new Cookies();\n    useImperativeHandle(ref, () => ({\n        init() {\n            if (props.allOrders.length > 0) {\n                makeMonthlySalesData();\n            }\n        }\n    }));\n\n    const [yearOptions, setYearOptions] = useState([\n        {\n            label: \"2023\",\n            value: 2023,\n        },\n        {\n            label: \"2022\",\n            value: 2022,\n        },\n        {\n            label: \"2021\",\n            value: 2021,\n        },\n        {\n            label: \"2020\",\n            value: 2020,\n        }\n    ]);\n\n    const [monthOptions, setMonthOptions] = useState([\n        {\n            label: \"JAN\",\n            value: 1,\n        },\n        {\n            label: \"FEB\",\n            value: 2,\n        },\n        {\n            label: \"MAR\",\n            value: 3,\n        },\n        {\n            label: \"APR\",\n            value: 4,\n        },\n        {\n            label: \"MAY\",\n            value: 5,\n        },\n        {\n            label: \"JUN\",\n            value: 6,\n        },\n        {\n            label: \"JULY\",\n            value: 7,\n        },\n        {\n            label: \"AUG\",\n            value: 8,\n        },\n        {\n            label: \"SEP\",\n            value: 9,\n        },\n        {\n            label: \"OCT\",\n            value: 10,\n        },\n        {\n            label: \"NOV\",\n            value: 11,\n        },\n        {\n            label: \"DEC\",\n            value: 12,\n        },\n    ]);\n\n    function getMonthNameByNumber(number) {\n        for (const month of monthOptions) {\n            if (month.value == number) {\n                return month.label;\n            }\n        }\n    }\n\n\n\n    let [monthlySales, setMonthlySales] = useState([]);\n    let [monthlySalesSelectedYear, setMonthlySalesSelectedYear] = useState(new Date().getFullYear());\n\n\n    function makeMonthlySalesData() {\n        let columns = [\n            { type: \"string\", label: \"Month\" }\n        ];\n        if (props.columns.sales) {\n            columns.push({ type: \"number\", label: \"Sales\" });\n        }\n\n        if (props.columns.salesProfit) {\n            columns.push({ type: \"number\", label: \"Sales Profit\" });\n        }\n\n        if (props.columns.paidSales) {\n            columns.push({ type: \"number\", label: \"Paid Sales\" });\n        }\n\n        if (props.columns.unpaidSales) {\n            columns.push({ type: \"number\", label: \"Credit Sales\" });\n        }\n\n        if (props.columns.expense) {\n            columns.push({ type: \"number\", label: \"Expense\" });\n        }\n\n        if (props.columns.purchase) {\n            columns.push({ type: \"number\", label: \"Purchase\" });\n        }\n\n        if (props.columns.salesReturn) {\n            columns.push({ type: \"number\", label: \"Sales Return\" });\n        }\n\n        if (props.columns.salesReturnProfit) {\n            columns.push({ type: \"number\", label: \"Sales Return Profit\" });\n        }\n\n        if (props.columns.salesReturnLoss) {\n            columns.push({ type: \"number\", label: \"Sales Return Loss\" });\n        }\n\n        if (props.columns.purchaseReturn) {\n            columns.push({ type: \"number\", label: \"Purchase Return\" });\n        }\n\n        if (props.columns.loss) {\n            columns.push({ type: \"number\", label: \"Loss\" });\n        }\n\n        let data = [];\n\n\n        if (columns.length > 1) {\n            data.push(columns)\n        }\n\n        console.log(\"selectedYear:\", monthlySalesSelectedYear);\n        let lastMonth = 12;\n\n        for (let month = 1; month <= lastMonth; month++) {\n\n            let sales = 0.00;\n            let profit = 0.00;\n            let paidSales = 0.00;\n            let unpaidSales = 0.00;\n            let loss = 0.00;\n            if (props.columns.sales || props.columns.salesProfit || props.columns.loss||props.columns.paidSales||props.columns.unpaidSales) {\n                for (const sale of props.allOrders) {\n                    // console.log(\"Sale Month:\", new Date(sale.date).getMonth() + 1);\n                    // console.log(\"Sale Year:\", new Date(sale.date).getFullYear());\n                    if ((new Date(sale.date).getMonth() + 1) == month && new Date(sale.date).getFullYear() == monthlySalesSelectedYear) {\n                        sales += parseFloat(sale.net_total);\n                        profit += parseFloat(sale.net_profit);\n\n                        paidSales += parseFloat(sale.total_payment_received);\n                        unpaidSales += parseFloat(sale.balance_amount);\n                        /*\n                        if(sale.payment_status==\"paid\"){\n                            paidSales += parseFloat(sale.net_total);\n                        }else if(sale.payment_status==\"not_paid\"){\n                            unpaidSales += parseFloat(sale.net_total);\n                        }\n                        */\n\n                        loss += parseFloat(sale.loss);\n                    }\n                }\n            }\n\n            let totalExpense = 0.00;\n            if (props.columns.expense) {\n                for (const expense of props.allExpenses) {\n                    // console.log(\"Sale Month:\", new Date(sale.date).getMonth() + 1);\n                    // console.log(\"Sale Year:\", new Date(sale.date).getFullYear());\n                    if ((new Date(expense.date).getMonth() + 1) == month &&\n                        new Date(expense.date).getFullYear() == monthlySalesSelectedYear) {\n                        totalExpense += parseFloat(expense.amount);\n                    }\n                }\n            }\n\n            let totalPurchase = 0.00;\n            if (props.columns.purchase) {\n                for (const purchase of props.allPurchases) {\n                    if ((new Date(purchase.date).getMonth() + 1) == month &&\n                        new Date(purchase.date).getFullYear() == monthlySalesSelectedYear) {\n                        totalPurchase += parseFloat(purchase.net_total);\n                    }\n                }\n            }\n\n            let totalSalesReturn = 0.00;\n            let totalSalesReturnProfit = 0.00;\n            let totalSalesReturnLoss = 0.00;\n            if (props.columns.salesReturn||props.columns.salesReturnProfit||props.columns.salesReturnLoss) {\n                for (const salesReturn of props.allSalesReturns) {\n                    if ((new Date(salesReturn.date).getMonth() + 1) == month &&\n                        new Date(salesReturn.date).getFullYear() == monthlySalesSelectedYear) {\n                        totalSalesReturn += parseFloat(salesReturn.net_total);\n                        totalSalesReturnProfit += parseFloat(salesReturn.net_profit);\n                        totalSalesReturnLoss += parseFloat(salesReturn.loss);\n                    }\n                }\n            }\n\n            let totalPurchaseReturn = 0.00;\n            if (props.columns.purchaseReturn) {\n                for (const purchaseReturn of props.allPurchaseReturns) {\n                    if ((new Date(purchaseReturn.date).getMonth() + 1) == month &&\n                        new Date(purchaseReturn.date).getFullYear() == monthlySalesSelectedYear) {\n                        totalPurchaseReturn += parseFloat(purchaseReturn.net_total);\n                    }\n                }\n            }\n\n\n            let row = [getMonthNameByNumber(month)];\n\n            if (props.columns.sales) {\n                row.push(parseFloat(sales.toFixed(2)));\n            }\n\n            if (props.columns.salesProfit) {\n                row.push(parseFloat(profit.toFixed(2)));\n            }\n\n            if (props.columns.paidSales) {\n                row.push(parseFloat(paidSales.toFixed(2)));\n            }\n\n            if (props.columns.unpaidSales) {\n                row.push(parseFloat(unpaidSales.toFixed(2)));\n            }\n\n            if (props.columns.expense) {\n                row.push(parseFloat(totalExpense.toFixed(2)));\n            }\n\n            if (props.columns.purchase) {\n                row.push(parseFloat(totalPurchase.toFixed(2)));\n            }\n\n            if (props.columns.salesReturn) {\n                row.push(parseFloat(totalSalesReturn.toFixed(2)));\n            }\n\n            if (props.columns.salesReturnProfit) {\n                row.push(parseFloat(totalSalesReturnProfit.toFixed(2)));\n            }\n\n            if (props.columns.salesReturnLoss) {\n                row.push(parseFloat(totalSalesReturnLoss.toFixed(2)));\n            }\n\n            if (props.columns.purchaseReturn) {\n                row.push(parseFloat(totalPurchaseReturn.toFixed(2)));\n            }\n\n            if (props.columns.loss) {\n                row.push(parseFloat(loss.toFixed(2)));\n            }\n\n            if (row.length > 1) {\n                data.push(row);\n            }\n\n        }\n        monthlySales = data;\n        setMonthlySales(data);\n        //setMonthlySales(data);\n    }\n\n\n    const [options, setOptions] = useState({\n        title: 'Sales',\n        subtitle: '(SAR)',\n        legend: { position: 'right' },\n        hAxis: {\n            title: \"Month\",\n        },\n        vAxis: {\n            title: \"Amount(SAR)\",\n        },\n        series: {\n            // 0: { curveType: \"function\", axis: 'Temps' },\n            // 1: { curveType: \"function\", axis: 'Daylight' },\n        },\n    });\n\n\n\n\n\n    useEffect(() => {\n        // getAllOrders();\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return (\n        <>\n            <div className=\"container-fluid p-0\">\n                <div className=\"row\">\n                    <div className=\"col-md-2\">\n                        <label className=\"form-label\">Year</label>\n\n                        <div className=\"input-group mb-3\">\n                            <select\n                                value={monthlySalesSelectedYear}\n                                onChange={(e) => {\n                                    if (!e.target.value) {\n                                        return;\n                                    }\n                                    monthlySalesSelectedYear = parseInt(e.target.value);\n                                    setMonthlySalesSelectedYear(parseInt(e.target.value));\n                                    makeMonthlySalesData();\n                                }}\n                                className=\"form-control\"\n                            >\n                                {yearOptions.map((option) => (\n                                    <option value={option.value}>{option.label}</option>\n                                ))}\n                            </select>\n                        </div>\n                    </div>\n\n\n                    {monthlySales && monthlySales.length > 0 ? <Chart\n                        chartType=\"LineChart\"\n                        width=\"100%\"\n                        height=\"400px\"\n                        data={monthlySales}\n                        options={options}\n                    /> : \"\"}\n                </div>\n            </div>\n        </>\n    );\n});\n\nexport default MonthlySales;\n"]},"metadata":{},"sourceType":"module"}