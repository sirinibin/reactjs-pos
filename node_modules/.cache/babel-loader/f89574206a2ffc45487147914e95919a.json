{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _constants = require('./constants'); // Encode data string\n\n\nvar encode = function encode(data, structure, separator) {\n  var encoded = data.split('').map(function (val, idx) {\n    return _constants.BINARIES[structure[idx]];\n  }).map(function (val, idx) {\n    return val ? val[data[idx]] : '';\n  });\n\n  if (separator) {\n    var last = data.length - 1;\n    encoded = encoded.map(function (val, idx) {\n      return idx < last ? val + separator : val;\n    });\n  }\n\n  return encoded.join('');\n};\n\nexports.default = encode;","map":{"version":3,"sources":["/Users/sirin/go/src/github.com/sirinibin/reactjs-pos/node_modules/jsbarcode/bin/barcodes/EAN_UPC/encoder.js"],"names":["Object","defineProperty","exports","value","_constants","require","encode","data","structure","separator","encoded","split","map","val","idx","BINARIES","last","length","join","default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC5CC,EAAAA,KAAK,EAAE;AADqC,CAA7C;;AAIA,IAAIC,UAAU,GAAGC,OAAO,CAAC,aAAD,CAAxB,C,CAEA;;;AACA,IAAIC,MAAM,GAAG,SAASA,MAAT,CAAgBC,IAAhB,EAAsBC,SAAtB,EAAiCC,SAAjC,EAA4C;AACxD,MAAIC,OAAO,GAAGH,IAAI,CAACI,KAAL,CAAW,EAAX,EAAeC,GAAf,CAAmB,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AACpD,WAAOV,UAAU,CAACW,QAAX,CAAoBP,SAAS,CAACM,GAAD,CAA7B,CAAP;AACA,GAFa,EAEXF,GAFW,CAEP,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AAC1B,WAAOD,GAAG,GAAGA,GAAG,CAACN,IAAI,CAACO,GAAD,CAAL,CAAN,GAAoB,EAA9B;AACA,GAJa,CAAd;;AAMA,MAAIL,SAAJ,EAAe;AACd,QAAIO,IAAI,GAAGT,IAAI,CAACU,MAAL,GAAc,CAAzB;AACAP,IAAAA,OAAO,GAAGA,OAAO,CAACE,GAAR,CAAY,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AACzC,aAAOA,GAAG,GAAGE,IAAN,GAAaH,GAAG,GAAGJ,SAAnB,GAA+BI,GAAtC;AACA,KAFS,CAAV;AAGA;;AAED,SAAOH,OAAO,CAACQ,IAAR,CAAa,EAAb,CAAP;AACA,CAfD;;AAiBAhB,OAAO,CAACiB,OAAR,GAAkBb,MAAlB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _constants = require('./constants');\n\n// Encode data string\nvar encode = function encode(data, structure, separator) {\n\tvar encoded = data.split('').map(function (val, idx) {\n\t\treturn _constants.BINARIES[structure[idx]];\n\t}).map(function (val, idx) {\n\t\treturn val ? val[data[idx]] : '';\n\t});\n\n\tif (separator) {\n\t\tvar last = data.length - 1;\n\t\tencoded = encoded.map(function (val, idx) {\n\t\t\treturn idx < last ? val + separator : val;\n\t\t});\n\t}\n\n\treturn encoded.join('');\n};\n\nexports.default = encode;"]},"metadata":{},"sourceType":"script"}