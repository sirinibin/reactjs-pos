"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateQR = exports.createQRData = void 0;
const fieldUtil_1 = require("./utils/fieldUtil");
/**
 * Generates data string to generate qr from
 * Usage
 * ```js
 * const qrData = createQRData({
 *  sellerName: '',
 *  vatNumber: '',
 *  timestamp: '',
 *  total: '100.00',
 *  vatTotal: '15.00'
 * })
 * ```
 */
function createQRData({ sellerName, vatNumber, timestamp, total, vatTotal, }) {
    const fields = [
        [1, sellerName],
        [2, vatNumber],
        [3, timestamp],
        [4, total],
        [5, vatTotal],
    ];
    const qrData = fields.reduce((qrDataStr, [tag, value]) => qrDataStr + (0, fieldUtil_1.toTLV)(tag, value), "");
    return (0, fieldUtil_1.toBase64)(qrData);
}
exports.createQRData = createQRData;
async function generateQR(payload, options = { format: "buffer" }) {
    try {
        const qrData = createQRData(payload);
        const { default: qrcode } = await Promise.resolve().then(() => __importStar(require("qrcode")));
        if (options.format === "buffer") {
            return qrcode.toBuffer(qrData);
        }
        if (options.format === "file") {
            return qrcode.toFile(options.filePath || "./qr-data.png", qrData, {
                type: "png",
            });
        }
        if (options.format === "data-url") {
            return qrcode.toDataURL(qrData);
        }
        if (options.format === "svg") {
            return qrcode.toString(qrData, { type: "svg" });
        }
    }
    catch (error) {
        console.error(error);
    }
}
exports.generateQR = generateQR;
//# sourceMappingURL=index.js.map