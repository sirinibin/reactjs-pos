import React, { ChangeEvent, ComponentType, ReactNode } from 'react';
import type { Option, TypeaheadProps } from '../types';
export interface UseAsyncProps extends TypeaheadProps {
    delay?: number;
    emptyLabel?: ReactNode;
    isLoading: boolean;
    onSearch: (query: string) => void;
    promptText?: ReactNode;
    searchText?: ReactNode;
    useCache?: boolean;
}
export declare function useAsync(props: UseAsyncProps): {
    allowNew: boolean | ((options: Option[], state: import("../types").TypeaheadPropsAndState) => boolean);
    emptyLabel: React.ReactNode;
    isLoading: boolean;
    minLength: number;
    onInputChange: (query: string, e: ChangeEvent<HTMLInputElement>) => void;
    options: Option[];
    autoFocus: boolean;
    caseSensitive: boolean;
    children: (props: import("../types").TypeaheadManagerChildProps) => JSX.Element;
    defaultInputValue: string;
    defaultOpen: boolean;
    defaultSelected: Option[];
    filterBy: string[] | import("../types").FilterByCallback;
    highlightOnlyResult: boolean;
    id?: string | undefined;
    ignoreDiacritics: boolean;
    inputProps: React.HTMLProps<HTMLInputElement>;
    labelKey: import("../types").LabelKey;
    maxResults: number;
    multiple: boolean;
    onBlur: React.FocusEventHandler<HTMLInputElement>;
    onChange: (selected: Option[]) => void;
    onFocus: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
    onKeyDown: React.KeyboardEventHandler<HTMLInputElement>;
    onMenuToggle: (isOpen: boolean) => void;
    onPaginate: (event: import("../types").SelectEvent<HTMLElement>, shownResults: number) => void;
    open?: boolean | undefined;
    paginate: boolean;
    selected: Option[];
    selectHintOnEnter?: boolean | undefined;
};
export declare function withAsync<T extends UseAsyncProps = UseAsyncProps>(Component: ComponentType<T>): React.ForwardRefExoticComponent<React.PropsWithoutRef<T> & React.RefAttributes<never>>;
