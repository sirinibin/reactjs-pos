import PropTypes from 'prop-types';
import React, { ComponentType, HTMLProps, MouseEvent, MouseEventHandler } from 'react';
import { preventInputBlur } from '../utils';
import { Option } from '../types';
export interface UseItemProps<T> extends HTMLProps<T> {
    onClick?: MouseEventHandler<T>;
    option: Option;
    position: number;
}
export declare function useItem<T extends HTMLElement>({ label, onClick, option, position, }: UseItemProps<T>): {
    active: boolean;
    'aria-label': string | undefined;
    'aria-selected': boolean;
    id: string;
    onClick: (e: MouseEvent<T>) => void;
    onMouseDown: typeof preventInputBlur;
    ref: React.RefObject<T>;
    role: string;
};
export declare function withItem<T extends UseItemProps<HTMLElement>>(Component: ComponentType<T>): {
    (props: T): JSX.Element;
    displayName: string;
    propTypes: {
        option: PropTypes.Validator<string | object>;
        position: PropTypes.Requireable<number>;
    };
};
