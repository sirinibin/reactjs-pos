import PropTypes from 'prop-types';
import React, { useState, } from 'react';
import { useRootClose } from 'react-overlays';
import { getDisplayName, isFunction } from '../utils';
import { optionType } from '../propTypes';
const propTypes = {
    onBlur: PropTypes.func,
    onClick: PropTypes.func,
    onFocus: PropTypes.func,
    onRemove: PropTypes.func,
    option: optionType.isRequired,
};
export function useToken({ onBlur, onClick, onFocus, onRemove, option, ...props }) {
    const [active, setActive] = useState(false);
    const [rootElement, attachRef] = useState(null);
    const handleBlur = (e) => {
        e.stopPropagation();
        setActive(false);
        onBlur && onBlur(e);
    };
    const handleClick = (e) => {
        e.stopPropagation();
        setActive(true);
        onClick && onClick(e);
    };
    const handleFocus = (e) => {
        e.stopPropagation();
        setActive(true);
        onFocus && onFocus(e);
    };
    const handleRemove = () => {
        onRemove && onRemove(option);
    };
    const handleKeyDown = (e) => {
        switch (e.key) {
            case 'Backspace':
                if (active) {
                    e.preventDefault();
                    handleRemove();
                }
                break;
            default:
                break;
        }
    };
    useRootClose(rootElement, handleBlur, {
        ...props,
        disabled: !active,
    });
    return {
        active,
        onBlur: handleBlur,
        onClick: handleClick,
        onFocus: handleFocus,
        onKeyDown: handleKeyDown,
        onRemove: isFunction(onRemove) ? handleRemove : undefined,
        ref: attachRef,
    };
}
export function withToken(Component) {
    const displayName = `withToken(${getDisplayName(Component)})`;
    const WrappedToken = (props) => (React.createElement(Component, { ...props, ...useToken(props) }));
    WrappedToken.displayName = displayName;
    WrappedToken.propTypes = propTypes;
    return WrappedToken;
}
