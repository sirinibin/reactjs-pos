import cx from 'classnames';
import PropTypes from 'prop-types';
import React, { Children, useEffect, useRef, } from 'react';
import { BaseMenuItem } from './MenuItem';
import { preventInputBlur } from '../utils';
import { checkPropType, isRequiredForA11y } from '../propTypes';
const MenuDivider = () => React.createElement("div", { className: "dropdown-divider", role: "separator" });
const MenuHeader = (props) => (React.createElement("div", { ...props, className: "dropdown-header", role: "heading" }));
const propTypes = {
    'aria-label': PropTypes.string,
    emptyLabel: PropTypes.node,
    id: checkPropType(PropTypes.oneOfType([PropTypes.number, PropTypes.string]), isRequiredForA11y),
    maxHeight: PropTypes.string,
};
const defaultProps = {
    'aria-label': 'menu-options',
};
const Menu = ({ children, className, emptyLabel = 'No matches found.', innerRef, inputHeight, maxHeight = '300px', scheduleUpdate, style, text, ...props }) => {
    const isInitialMount = useRef(true);
    useEffect(() => {
        if (isInitialMount.current) {
            isInitialMount.current = false;
            return;
        }
        scheduleUpdate && scheduleUpdate();
    }, [inputHeight, scheduleUpdate]);
    const contents = Children.count(children) === 0 ? (React.createElement(BaseMenuItem, { disabled: true, role: "option" }, emptyLabel)) : (children);
    return (React.createElement("div", { ...props, className: cx('rbt-menu', 'dropdown-menu', 'show', className), key: text, onMouseDown: preventInputBlur, ref: innerRef, role: "listbox", style: {
            ...style,
            display: 'block',
            maxHeight,
            overflow: 'auto',
        } }, contents));
};
Menu.propTypes = propTypes;
Menu.defaultProps = defaultProps;
Menu.Divider = MenuDivider;
Menu.Header = MenuHeader;
export default Menu;
