import type { Placement } from '@popperjs/core';
import PropTypes from 'prop-types';
import { CSSProperties, ReactElement, Ref } from 'react';
export declare enum Align {
    JUSTIFY = "justify",
    LEFT = "left",
    RIGHT = "right"
}
export interface OverlayRenderProps {
    innerRef: Ref<any>;
    inputHeight: number;
    scheduleUpdate: (() => void) | null;
    style: CSSProperties;
}
export interface OverlayProps {
    align: Align;
    children: (props: OverlayRenderProps) => ReactElement | null;
    dropup: boolean;
    flip: boolean;
    isMenuShown: boolean;
    positionFixed: boolean;
    referenceElement?: HTMLElement;
}
export declare function getModifiers(props: Pick<OverlayProps, 'align' | 'flip'>): {
    enabled: boolean;
    name: string;
}[];
export declare function getPlacement(props: Pick<OverlayProps, 'align' | 'dropup'>): Placement;
declare const Overlay: {
    ({ referenceElement, ...props }: OverlayProps): ReactElement<any, string | import("react").JSXElementConstructor<any>> | null;
    propTypes: {
        align: PropTypes.Requireable<Align>;
        children: PropTypes.Validator<(...args: any[]) => any>;
        dropup: PropTypes.Requireable<boolean>;
        flip: PropTypes.Requireable<boolean>;
        isMenuShown: PropTypes.Requireable<boolean>;
        positionFixed: PropTypes.Requireable<boolean>;
        referenceElement: PropTypes.Requireable<Element>;
    };
    defaultProps: {
        align: Align;
        dropup: boolean;
        flip: boolean;
        isMenuShown: boolean;
        positionFixed: boolean;
    };
};
export default Overlay;
