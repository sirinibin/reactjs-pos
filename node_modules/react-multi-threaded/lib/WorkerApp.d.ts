/// <reference types="react" />
import { AppTransport } from "./types";
declare type ViewDataBase = {
    uid: string;
    name: string;
    parentUid: string;
    childIndex: number;
    isRoot: boolean;
};
declare type ViewData = ViewDataBase & {
    props: Record<string, any>;
};
export declare type ShareableViewData = ViewDataBase & {
    props: Array<{
        name: string;
    } & ({
        type: "data";
        data: any;
    } | {
        type: "event";
        uid: string;
    })>;
};
declare class App {
    private appTree;
    private server?;
    private clients;
    private runningViews;
    private _isAppRunning;
    private _isAppStopped;
    private reactTreeController?;
    get isAppRunning(): boolean;
    get isAppStopped(): boolean;
    constructor(appTree: JSX.Element);
    startServer(server: AppTransport): void;
    pauseApp: () => void;
    resumeApp: () => void;
    close: () => void;
    addClient(client: AppTransport): void;
    removeClient: (client: AppTransport) => void;
    private registerClientTransport;
    updateRunningView(viewData: ViewData): void;
    deleteRunningView: (uid: string) => void;
    private registerViewEvent;
    private parseViewData;
}
declare const RenderApp: (appTree: JSX.Element, transport?: AppTransport | undefined) => {
    pause: () => void;
    continue: () => void;
};
export { App, RenderApp };
