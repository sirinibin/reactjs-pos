"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RenderApp = exports.App = void 0;
var react_1 = __importDefault(require("react"));
var uuid_1 = require("uuid");
var Contexts_1 = require("./Contexts");
var render_1 = require("@react-fullstack/render");
var Transport_1 = require("./Transport");
var RootComponent_1 = __importDefault(require("./components/RootComponent"));
var App = /** @class */ (function () {
    function App(appTree) {
        var _this = this;
        this.clients = [];
        this.runningViews = [];
        this._isAppRunning = false;
        this._isAppStopped = false;
        this.pauseApp = function () {
            if (_this.reactTreeController) {
                _this.reactTreeController.stop();
                _this._isAppStopped = true;
            }
            else {
                throw TypeError("connot pause app before app is started");
            }
        };
        this.resumeApp = function () {
            if (_this.reactTreeController) {
                _this.reactTreeController.continue();
                _this._isAppStopped = false;
            }
            else {
                throw TypeError("connot resume app before app is started");
            }
        };
        this.close = function () {
            _this.pauseApp();
            _this._isAppStopped = true;
        };
        this.removeClient = function (client) {
            _this.clients = _this.clients.filter(function (currentClient) { return currentClient !== client; });
        };
        this.deleteRunningView = function (uid) {
            var runningViewIndex = _this.runningViews.findIndex(function (view) { return view.uid === uid; });
            if (runningViewIndex !== -1) {
                _this.runningViews.splice(runningViewIndex, 1);
                if (!_this.server) {
                    return;
                }
                _this.server.emit("delete_view", { viewUid: uid });
            }
        };
        this.appTree = appTree;
    }
    Object.defineProperty(App.prototype, "isAppRunning", {
        get: function () {
            return this._isAppRunning;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(App.prototype, "isAppStopped", {
        get: function () {
            return this._isAppStopped;
        },
        enumerable: false,
        configurable: true
    });
    App.prototype.startServer = function (server) {
        this.server = server;
        this.reactTreeController = render_1.Render(react_1.default.createElement(Contexts_1.WorkerAppContext.Provider, { value: this },
            react_1.default.createElement(Contexts_1.AppTypeContext.Provider, { value: "worker" },
                react_1.default.createElement(RootComponent_1.default, null, this.appTree))));
        this.server.emit("on_worker_start");
    };
    App.prototype.addClient = function (client) {
        this.clients.push(client);
        this.registerClientTransport(client);
    };
    App.prototype.registerClientTransport = function (client) {
        var _this = this;
        var requestViewsTreeHandler = function () {
            client.emit("update_views_tree", {
                views: _this.runningViews.map(function (runningView) {
                    return _this.parseViewData(runningView);
                }),
            });
        };
        client.on("request_views_tree", requestViewsTreeHandler);
    };
    App.prototype.updateRunningView = function (viewData) {
        var runningViewIndex = this.runningViews.findIndex(function (view) { return view.uid === viewData.uid; });
        if (runningViewIndex !== -1) {
            this.runningViews[runningViewIndex] = viewData;
        }
        else {
            this.runningViews.push(viewData);
        }
        if (!this.server) {
            return;
        }
        this.server.emit("update_view", { view: this.parseViewData(viewData) });
    };
    App.prototype.registerViewEvent = function (event, viewUid) {
        var _this = this;
        var eventUid = uuid_1.v4();
        this.clients.forEach(function (client) {
            var requestEventHandler = function (_a) {
                var eventArguments = _a.eventArguments, requestedEventUid = _a.eventUid, currentEventUid = _a.uid;
                if (requestedEventUid !== eventUid) {
                    return;
                }
                var stillExist = !!_this.runningViews.find(function (view) { return view.uid === viewUid; });
                if (stillExist) {
                    var eventResult = event.apply(void 0, eventArguments);
                    if (eventResult instanceof Promise) {
                        eventResult.then(function (result) {
                            client.emit("respond_to_event", {
                                data: result && JSON.parse(JSON.stringify(result)),
                                uid: currentEventUid,
                                eventUid: eventUid,
                            });
                        });
                    }
                    else {
                        client.emit("respond_to_event", {
                            data: eventResult && JSON.parse(JSON.stringify(eventResult)),
                            uid: currentEventUid,
                            eventUid: eventUid,
                        });
                    }
                }
            };
            client.on("request_event", requestEventHandler);
        });
        return eventUid;
    };
    App.prototype.parseViewData = function (viewData) {
        var _this = this;
        var childIndex = viewData.childIndex, isRoot = viewData.isRoot, name = viewData.name, parentUid = viewData.parentUid, uid = viewData.uid;
        var props = Object.keys(viewData.props)
            .filter(function (name) {
            return !["children", "key"].includes(name) &&
                viewData.props[name] !== undefined;
        })
            .map(function (name) {
            var prop = viewData.props[name];
            if (typeof prop === "function") {
                return {
                    name: name,
                    type: "event",
                    uid: _this.registerViewEvent(prop, uid),
                };
            }
            else {
                return {
                    name: name,
                    type: "data",
                    data: JSON.parse(JSON.stringify(prop)),
                };
            }
        });
        return {
            childIndex: childIndex,
            isRoot: isRoot,
            name: name,
            parentUid: parentUid,
            uid: uid,
            props: props,
        };
    };
    return App;
}());
exports.App = App;
var RenderApp = function (appTree, transport) {
    var appTransport = transport || Transport_1.createTransport();
    var app = new App(appTree);
    app.addClient(appTransport);
    app.startServer(appTransport);
    return {
        pause: app.pauseApp,
        continue: app.resumeApp,
    };
};
exports.RenderApp = RenderApp;
//# sourceMappingURL=WorkerApp.js.map