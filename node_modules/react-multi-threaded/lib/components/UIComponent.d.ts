import React from "react";
declare type MapResultToPromise<T> = T extends (...args: infer U) => infer R ? R extends Promise<any> ? (...args: U) => R : (...args: U) => Promise<R> : T;
declare type ParseProps<Props extends Record<string, any>> = {
    [Key in keyof Props]: MapResultToPromise<Props[Key]>;
};
declare type UnParseProps<Props extends ParseProps<any>> = Props extends ParseProps<infer OriginalProps> ? OriginalProps : never;
declare type UIComponentProps<Props extends Record<string, any>> = ParseProps<React.PropsWithChildren<Props>>;
declare type FunctionComponent<P> = (props: P) => React.ReactElement;
declare type ClassComponent<P> = new (props: P) => React.Component<P, any>;
declare type AnyComponent<P> = FunctionComponent<P> | ClassComponent<P>;
declare type ExtractProps<TComponentOrTProps> = TComponentOrTProps extends AnyComponent<infer TProps> ? TProps : TComponentOrTProps;
declare const AsUIComponent: <Component extends FunctionComponent<any> | ClassComponent<any>>(component: Component) => (props: UnParseProps<ExtractProps<Component>>) => JSX.Element;
export { AsUIComponent, UIComponentProps, AnyComponent };
